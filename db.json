{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/apple-touch-icon-precomposed.png","path":"apple-touch-icon-precomposed.png","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/20210105095453467.png","path":"images/20210105095453467.png","modified":0,"renderable":0},{"_id":"source/images/image-20210105095453467.png","path":"images/image-20210105095453467.png","modified":0,"renderable":0},{"_id":"source/images/image-20210110230804739.png","path":"images/image-20210110230804739.png","modified":0,"renderable":0},{"_id":"source/images/image-20210110230804740.png","path":"images/image-20210110230804740.png","modified":0,"renderable":0},{"_id":"source/images/image-20210110230804741.png","path":"images/image-20210110230804741.png","modified":0,"renderable":0},{"_id":"source/images/image-20210110230804742.png","path":"images/image-20210110230804742.png","modified":0,"renderable":0},{"_id":"source/images/image-20210110231126007.png","path":"images/image-20210110231126007.png","modified":0,"renderable":0},{"_id":"source/images/image-20210110231246455.png","path":"images/image-20210110231246455.png","modified":0,"renderable":0},{"_id":"source/images/image-20210804175832490.png","path":"images/image-20210804175832490.png","modified":0,"renderable":0},{"_id":"source/images/image-20210804175909528.png","path":"images/image-20210804175909528.png","modified":0,"renderable":0},{"_id":"source/images/image-20210916182124338.png","path":"images/image-20210916182124338.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about.html","hash":"cace99ebd57cf04ebc7113782b70884c4b46851a","modified":1610971426000},{"_id":"source/apple-touch-icon-precomposed.png","hash":"01d30fa3051f0793cd63d3f01362a1b2639f9e63","modified":1610588840000},{"_id":"source/apple-touch-icon.png","hash":"01d30fa3051f0793cd63d3f01362a1b2639f9e63","modified":1610543550000},{"_id":"source/robots.txt","hash":"2911c7eb46e0c3ee05c5a484bd212f39eebd01e5","modified":1610971457000},{"_id":"source/_posts/about.md","hash":"176ea03e8859bd88cb8222352aeff8f1a6534312","modified":1610518669000},{"_id":"source/_posts/bitwise-operation.md","hash":"4a9defeac02666cb244753ac6af32cefbbc04664","modified":1610876009000},{"_id":"source/_posts/docker-install-elastic-single-node.md","hash":"b46310aa761b96f0efdf17eb9e027a8dbdb9baf0","modified":1609169777000},{"_id":"source/_posts/elastic-search-hot-warm.md","hash":"e6f26c4c15b8b72dc4f199efc5c89e631553a695","modified":1628073130000},{"_id":"source/_posts/elasticsearch-cluster-lite-deploy.md","hash":"e67891933060715a126d1683e9c5593e98955999","modified":1609170396000},{"_id":"source/_posts/elasticsearch-uri-search.md","hash":"950b26e585736eb73efaad28de684284fe01518a","modified":1609229603000},{"_id":"source/_posts/fibonacci-for-python.md","hash":"32db388a4f470ab88b16fc359ad0b2aaac63b1d0","modified":1610876181000},{"_id":"source/_posts/flask-docker-have-a-try.md","hash":"4e677a1e235821e0f44b96210fcfd7511a979725","modified":1609092530000},{"_id":"source/_posts/hexo-some-config.md","hash":"e47dfa700998f59a1eb45b8a7a6aed43318be424","modified":1649297162000},{"_id":"source/_posts/leetcode-bitwise-operation.md","hash":"8ad37526554eeb90ec66076d7cbfcfd1a83db44d","modified":1610876089000},{"_id":"source/_posts/logstash-mongo-elastic.md","hash":"d8f6454eda17ec4bfc90a4dc2802f103a19b66b8","modified":1610701642000},{"_id":"source/_posts/maximum-subarray.md","hash":"cdd586045aec4d6fe49790abc812e8b2caedf202","modified":1610876254000},{"_id":"source/_posts/nginx-some-config.md","hash":"ea5790578885731edfc73f6e0381d3c6efbc298e","modified":1610723973000},{"_id":"source/_posts/supervisor-usage.md","hash":"aa74e3f16574eb9ad83af709109c654eefe281d7","modified":1631788563000},{"_id":"source/_posts/trie-prefix-tree.md","hash":"d80c5bed65284867ecf344fceb046e478d695a4c","modified":1610876198000},{"_id":"source/_posts/union-find-sets.md","hash":"479db7ef72f71b1776be840793ff2bacf81e80e9","modified":1610876167000},{"_id":"source/_posts/uwsgi-for-flask.md","hash":"0f9ba10f82ad84336ae22dbb0aaacdae9161153b","modified":1610718457000},{"_id":"source/images/20210105095453467.png","hash":"b14ea7a09698942281313d76d3f6f95979e03077","modified":1609811693000},{"_id":"source/images/image-20210105095453467.png","hash":"b14ea7a09698942281313d76d3f6f95979e03077","modified":1609811693000},{"_id":"source/images/image-20210110230804740.png","hash":"8facd1e7b7ac7c8c8d0a1fc2d5a01848210dfdcc","modified":1610294821000},{"_id":"source/images/image-20210804175832490.png","hash":"64d51903151fd2cf012397195bc64a89e9ce7a7c","modified":1628072500000},{"_id":"source/images/image-20210804175909528.png","hash":"cb9d576067199b2d208a9ec0456c6cb1a396f47d","modified":1628072461000},{"_id":"source/images/image-20210110230804739.png","hash":"a238ba60b9cdfc0cb5e54f2b59a2263607543f1b","modified":1610292560000},{"_id":"source/images/image-20210110230804741.png","hash":"5f122603a6b7788adadd441e5b3588159c2ee539","modified":1610294877000},{"_id":"source/images/image-20210110230804742.png","hash":"d3a02f5102ef89a21ae3375c3e9afb14c142a52e","modified":1610294959000},{"_id":"source/images/image-20210110231126007.png","hash":"339c076c393e597fcad9adc8752ece240400fa17","modified":1610292620000},{"_id":"source/images/image-20210110231246455.png","hash":"ec7a1f97535c3b0037f3e279cbecaac492af2a77","modified":1610292583000},{"_id":"source/images/image-20210916182124338.png","hash":"807ac874a1014672ab959866eb292f753022fe17","modified":1631787684000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1647842009426},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1647842009426},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1647842009427},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1647842009427},{"_id":"themes/landscape/_config.yml","hash":"66d7f2ad79a3bcca9180aacccabb7bcf5074c124","modified":1649233615030},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1647842009427},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1647842009427},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1647842009430},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1647842009430},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1647842009430},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1647842009430},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1647842009430},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1647842009430},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1647842009431},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1647842009431},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1647842009431},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"10b20725906ce69f6e1676602851885ee1b9beff","modified":1649235244671},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1647842009431},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1647842009427},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1647842009431},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1647842009431},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1647842009431},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1647842009431},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1647842009431},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1647842009431},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1647842009427},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d3139f86adc2223177e79f04fdddb6324d6ad903","modified":1668158975644},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1647842009431},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1647842009431},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1647842009431},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"68dcaa016dbe68a605b42f623b13000ad1e6050d","modified":1649297215214},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1647842009431},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1647842009432},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1647842009432},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1647842009432},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1647842009432},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1647842009432},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1647842009431},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1647842009432},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1647842009432},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1647842009432},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1647842009432},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1647842009432},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1647842009433},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1647842009433},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1647842009434},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1647842009434},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1647842009434},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1647842009434},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1647842009434},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1647842009434},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1647842009435},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1647842009435},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1647842009435},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1647842009433},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1647842009432},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1647842009433},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1647842009433},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1647842009433},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1647842009433},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1647842009433},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1647842009434},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1647842009435},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1647842009436},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1647842009435},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1647842009436},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1647842009435},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1647842009436},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1647842009436},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1647842009433},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1647842009436},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1647842009436},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1647842009436},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1647842009436},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1647842009436},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1647842009436},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1647842009436},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"9c2f0cf100290ed7fce449ffe8a820116d9be195","modified":1570457266000},{"_id":"public/atom.xml","hash":"17522ad3afa5ac1199134a9a38773ace0311bf47","modified":1649297221299},{"_id":"public/about.html","hash":"f4b58affabdda2eeb01a6e3a0777e5936f466f27","modified":1668159435172},{"_id":"public/paper/289c52a7.html","hash":"49249ea58e81d0edff4ab3ade4f5b77110b3df86","modified":1668159435172},{"_id":"public/paper/bfde335e.html","hash":"9572b3bef4100d58fc095d626ec429497e36c019","modified":1668159435172},{"_id":"public/paper/cb20bfd8.html","hash":"5b824c9a7b88e559bf3d0bf1b83f43ed1d8038d3","modified":1668159435172},{"_id":"public/paper/d8052ccb.html","hash":"2fe8bc664aee2e41558ef55e6add965b67480ae6","modified":1668159435172},{"_id":"public/paper/85dc8b23.html","hash":"c8b94b84ef60a50fd960719212e707ccad8f5835","modified":1668159435172},{"_id":"public/paper/cf78f348.html","hash":"6e8baa73c09a9aa6fde2c4b7e030fa513ffc2317","modified":1668159435172},{"_id":"public/paper/92640653.html","hash":"a597c315e703ddd3828c4432d0771ed6b9c04aaf","modified":1668159435172},{"_id":"public/paper/5d612136.html","hash":"6baaf8695f982b8668626cf61cf1cefb1294c995","modified":1668159435172},{"_id":"public/paper/2e5bdf1e.html","hash":"a507aeca217761854d1b4da545503649fa38bab7","modified":1668159435172},{"_id":"public/archives/index.html","hash":"a647265661dfc1190215d316a6ca3b8340eae47e","modified":1668159435172},{"_id":"public/archives/page/2/index.html","hash":"c47167c0a2b291554026dcf8fac6da6df9917122","modified":1668159435172},{"_id":"public/archives/2020/index.html","hash":"22a1e8f3bd73c699976bb8e08eb3a1a16167159f","modified":1668159435172},{"_id":"public/archives/2020/12/index.html","hash":"e200e031418dca3bbf0323716d4dbb28ea867d8d","modified":1668159435172},{"_id":"public/archives/2021/index.html","hash":"6d36d428fa6db63de0f70abe02afad0de2d53484","modified":1668159435172},{"_id":"public/archives/2021/01/index.html","hash":"84236af113870a69e5d2fa9e6f1d87a75f1f6335","modified":1668159435172},{"_id":"public/archives/2022/index.html","hash":"782ce119e4652eda60d5ae527c11be1cd030687f","modified":1668159435172},{"_id":"public/archives/2022/04/index.html","hash":"dccc0cd747ffc77b41db56ac42538ee8f65677c2","modified":1668159435172},{"_id":"public/tags/docker/index.html","hash":"ba85e3cd30111fb661041cf31f7cc14a8fe31b4c","modified":1668159435172},{"_id":"public/tags/elasticsearch/index.html","hash":"c9bf3e90a02526c0760e88245879e51dc16e8ea2","modified":1668159435172},{"_id":"public/tags/python/index.html","hash":"8b1232d5f2c97985e856feffc8ff5b0afc9bd83d","modified":1668159435172},{"_id":"public/tags/leetcode/index.html","hash":"97418b4394681c9c762d0246632ef9ced1a38b7b","modified":1668159435172},{"_id":"public/tags/flask/index.html","hash":"85edd6ffa9861bc3556e4bf86d3562cf682dbeb9","modified":1668159435172},{"_id":"public/tags/gevent/index.html","hash":"9c05df6d85b2fc560812c58883d3e6914b20c5de","modified":1668159435172},{"_id":"public/tags/hexo/index.html","hash":"cbb8eeeb2c361220607cd820fcbf94caf2242134","modified":1668159435172},{"_id":"public/tags/landscape/index.html","hash":"99af0eff6956529ee266a29b90aee17e18847872","modified":1668159435172},{"_id":"public/tags/logstash/index.html","hash":"2a8889d2345fb20e910cf2029760e911dde79fbd","modified":1668159435172},{"_id":"public/tags/nginx/index.html","hash":"bd3b5a57f7804c905d6cf396011cdb169488873b","modified":1668159435172},{"_id":"public/tags/supervisor/index.html","hash":"aed8739d177ae6505544247c22cc11cd6acad5bd","modified":1668159435172},{"_id":"public/tags/uwsgi/index.html","hash":"ff755864f71096362041b022d0e5f49a340352b1","modified":1668159435172},{"_id":"public/paper/89e42a4b.html","hash":"094f121853ed8efed8ac6f7522bab30eb3daaa43","modified":1668159435172},{"_id":"public/paper/32dc2f8e.html","hash":"a5b445dc3599615add24db33cc9777b571e01a58","modified":1668159435172},{"_id":"public/paper/46bbb70a.html","hash":"3513afbb2604df23be8bdac24a744c7780c3207b","modified":1668159435172},{"_id":"public/paper/5daddb41.html","hash":"6364f7e1cb59e9cf5f0cd7f78604a03d97ce9001","modified":1668159435172},{"_id":"public/paper/c2dd96fc.html","hash":"5b999ef93771707b0bd5a565b84ff15843ec63cd","modified":1668159435172},{"_id":"public/paper/7629139c.html","hash":"75dabf3adc725ee850b09ce7794c2a29f765a964","modified":1668159435172},{"_id":"public/paper/da97202b.html","hash":"0b6770eda53bb9a4ed96c627a33ece87e07b3722","modified":1668159435172},{"_id":"public/paper/f848b956.html","hash":"f72cf44b2016575cc747a3915d6157c43a9557f8","modified":1668159435172},{"_id":"public/index.html","hash":"34f109a542afe1e0b184f9897c647b612913782b","modified":1668159435172},{"_id":"public/page/2/index.html","hash":"94fa9bd5cea6aa4919d33e10b4df513831fab518","modified":1668159435172},{"_id":"public/apple-touch-icon-precomposed.png","hash":"01d30fa3051f0793cd63d3f01362a1b2639f9e63","modified":1649234811108},{"_id":"public/apple-touch-icon.png","hash":"01d30fa3051f0793cd63d3f01362a1b2639f9e63","modified":1649234811108},{"_id":"public/robots.txt","hash":"2911c7eb46e0c3ee05c5a484bd212f39eebd01e5","modified":1649234811108},{"_id":"public/images/20210105095453467.png","hash":"b14ea7a09698942281313d76d3f6f95979e03077","modified":1649234811108},{"_id":"public/images/image-20210105095453467.png","hash":"b14ea7a09698942281313d76d3f6f95979e03077","modified":1649234811108},{"_id":"public/images/image-20210110230804740.png","hash":"8facd1e7b7ac7c8c8d0a1fc2d5a01848210dfdcc","modified":1649234811108},{"_id":"public/images/image-20210804175832490.png","hash":"64d51903151fd2cf012397195bc64a89e9ce7a7c","modified":1649234811108},{"_id":"public/images/image-20210804175909528.png","hash":"cb9d576067199b2d208a9ec0456c6cb1a396f47d","modified":1649234811108},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1649234811108},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1649234811108},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1649234811108},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1649234811108},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1649234811108},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1649234811108},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1649234811108},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1649234811108},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1649234811108},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1649234811108},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1649234811108},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1649234811108},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1649234811108},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1649234811108},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1649234811108},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1649234811108},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1649234811108},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1649234811108},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1649234811108},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1649234811108},{"_id":"public/images/image-20210110230804739.png","hash":"a238ba60b9cdfc0cb5e54f2b59a2263607543f1b","modified":1649234811108},{"_id":"public/images/image-20210110230804741.png","hash":"5f122603a6b7788adadd441e5b3588159c2ee539","modified":1649234811108},{"_id":"public/images/image-20210110230804742.png","hash":"d3a02f5102ef89a21ae3375c3e9afb14c142a52e","modified":1649234811108},{"_id":"public/images/image-20210110231126007.png","hash":"339c076c393e597fcad9adc8752ece240400fa17","modified":1649234811108},{"_id":"public/images/image-20210110231246455.png","hash":"ec7a1f97535c3b0037f3e279cbecaac492af2a77","modified":1649234811108},{"_id":"public/images/image-20210916182124338.png","hash":"807ac874a1014672ab959866eb292f753022fe17","modified":1649234811108},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1649234811108},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1649234811108},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1649234811108},{"_id":"themes/landscape/favicon.ico","hash":"3b62f60ac52825e50f4eca529c19ef9c4f51b460","modified":1609225992000},{"_id":"themes/landscape/favicon.png","hash":"f2e6150d5a462a230876dbae74dd15bcbf5c6c18","modified":1610534814000}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  \n  \n  <title>关于这个Up主 | Rusty Sword</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <meta name=\"description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"关于这个Up主\">\n<meta property=\"og:url\" content=\"https://mastersword.cn/paper/2e5bdf1e.html\">\n<meta property=\"og:site_name\" content=\"Rusty Sword\">\n<meta property=\"og:description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:locale\" content=\"zh_CN\">\n<meta property=\"article:published_time\" content=\"2020-12-24T16:00:00.000Z\">\n<meta property=\"article:modified_time\" content=\"2021-01-13T06:17:49.965Z\">\n<meta property=\"article:author\" content=\"Rusty\">\n<meta property=\"article:tag\" content=\"python,elastic,flask,nginx\">\n<meta name=\"twitter:card\" content=\"summary\">\n  \n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"Rusty Sword\" type=\"application/atom+xml\">\n  \n  \n    <link rel=\"shortcut icon\" href=\"/favicon.ico\">\n  \n  \n    \n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/typeface-source-code-pro@0.0.71/index.min.css\">\n\n  \n  \n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n  \n    \n<link rel=\"stylesheet\" href=\"/fancybox/jquery.fancybox.min.css\">\n\n  \n<meta name=\"generator\" content=\"Hexo 5.3.0\"></head>\n\n<body>\n  <div id=\"container\">\n    <div id=\"wrap\">\n      <header id=\"header\">\n  <div id=\"banner\"></div>\n  <div id=\"header-outer\" class=\"outer\">\n    <div id=\"header-title\" class=\"inner\">\n      <h1 id=\"logo-wrap\">\n        <a href=\"/\" id=\"logo\">Rusty Sword</a>\n      </h1>\n      \n    </div>\n    <div id=\"header-inner\" class=\"inner\">\n      <nav id=\"main-nav\">\n        <a id=\"main-nav-toggle\" class=\"nav-icon\"></a>\n        \n          <a class=\"main-nav-link\" href=\"/\">Home</a>\n        \n          <a class=\"main-nav-link\" href=\"/archives\">Archives</a>\n        \n          <a class=\"main-nav-link\" href=\"/about\">About</a>\n        \n      </nav>\n      <nav id=\"sub-nav\">\n        \n          <a id=\"nav-rss-link\" class=\"nav-icon\" href=\"/feed.json\" title=\"订阅\"></a>\n        \n        <a id=\"nav-search-btn\" class=\"nav-icon\" title=\"搜索\"></a>\n      </nav>\n      <div id=\"search-form-wrap\">\n        <form action=\"//google.com/search\" method=\"get\" accept-charset=\"UTF-8\" class=\"search-form\"><input type=\"search\" name=\"q\" class=\"search-form-input\" placeholder=\"搜索\"><button type=\"submit\" class=\"search-form-submit\">&#xF002;</button><input type=\"hidden\" name=\"sitesearch\" value=\"https://mastersword.cn\"></form>\n      </div>\n    </div>\n  </div>\n</header>\n\n      <div class=\"outer\">\n        <section id=\"main\"><article id=\"post-about\" class=\"h-entry article article-type-post\" itemprop=\"blogPost\" itemscope itemtype=\"https://schema.org/BlogPosting\">\n  <div class=\"article-meta\">\n    <a href=\"/paper/2e5bdf1e.html\" class=\"article-date\">\n  <time class=\"dt-published\" datetime=\"2020-12-24T16:00:00.000Z\" itemprop=\"datePublished\">2020-12-25</time>\n</a>\n    \n  </div>\n  <div class=\"article-inner\">\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"p-name article-title\" itemprop=\"headline name\">\n      关于这个Up主\n    </h1>\n  \n\n      </header>\n    \n    <div class=\"e-content article-entry\" itemprop=\"articleBody\">\n      \n        <p>这个人很懒，什么都不愿意写。</p>\n<p><a href=\"mailto:&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>\n\n      \n    </div>\n    <footer class=\"article-footer\">\n      <a data-url=\"https://mastersword.cn/paper/2e5bdf1e.html\" data-id=\"ckk0r2fv10000ke06ha2o06n2\" data-title=\"关于这个Up主\" class=\"article-share-link\">分享</a>\n      \n      \n      \n    </footer>\n  </div>\n  \n    \n<nav id=\"article-nav\">\n  \n    <a href=\"/paper/5d612136.html\" id=\"article-nav-newer\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\">前一篇</strong>\n      <div class=\"article-nav-title\">\n        \n          【算法】斐波拉契数列\n        \n      </div>\n    </a>\n  \n  \n</nav>\n\n  \n</article>\n\n\n</section>\n        \n          <aside id=\"sidebar\">\n  \n    \n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tags</h3>\n    <div class=\"widget\">\n      <ul class=\"tag-list\" itemprop=\"keywords\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/docker/\" rel=\"tag\">docker</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/elasticsearch/\" rel=\"tag\">elasticsearch</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/flask/\" rel=\"tag\">flask</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/gevent/\" rel=\"tag\">gevent</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/hexo/\" rel=\"tag\">hexo</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/landscape/\" rel=\"tag\">landscape</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/leetcode/\" rel=\"tag\">leetcode</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/logstash/\" rel=\"tag\">logstash</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/nginx/\" rel=\"tag\">nginx</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/python/\" rel=\"tag\">python</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/uwsgi/\" rel=\"tag\">uwsgi</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tag Cloud</h3>\n    <div class=\"widget tagcloud\">\n      <a href=\"/tags/docker/\" style=\"font-size: 16.67px;\">docker</a> <a href=\"/tags/elasticsearch/\" style=\"font-size: 20px;\">elasticsearch</a> <a href=\"/tags/flask/\" style=\"font-size: 10px;\">flask</a> <a href=\"/tags/gevent/\" style=\"font-size: 10px;\">gevent</a> <a href=\"/tags/hexo/\" style=\"font-size: 10px;\">hexo</a> <a href=\"/tags/landscape/\" style=\"font-size: 10px;\">landscape</a> <a href=\"/tags/leetcode/\" style=\"font-size: 20px;\">leetcode</a> <a href=\"/tags/logstash/\" style=\"font-size: 10px;\">logstash</a> <a href=\"/tags/nginx/\" style=\"font-size: 10px;\">nginx</a> <a href=\"/tags/python/\" style=\"font-size: 13.33px;\">python</a> <a href=\"/tags/uwsgi/\" style=\"font-size: 10px;\">uwsgi</a>\n    </div>\n  </div>\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Archives</h3>\n    <div class=\"widget\">\n      <ul class=\"archive-list\"><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2021/01/\">一月 2021</a></li><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2020/12/\">十二月 2020</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Recent Posts</h3>\n    <div class=\"widget\">\n      <ul>\n        \n          <li>\n            <a href=\"/paper/89e42a4b.html\">在Centos7使用uWSGI部署Flask</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/d8052ccb.html\">【算法】字典树的基本特征</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/85dc8b23.html\">【算法】并查集</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/46bbb70a.html\">logstash mongodb elastic，从死磕到放弃</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/5daddb41.html\">Nginx的一些配置</a>\n          </li>\n        \n      </ul>\n    </div>\n  </div>\n\n  \n</aside>\n        \n      </div>\n      <footer id=\"footer\">\n  \n  <div class=\"outer\">\n    <div id=\"footer-info\" class=\"inner\">\n      \n      &copy; 2021 Rusty<br>\n      Powered by <a href=\"https://hexo.io/\" target=\"_blank\">Hexo</a>\n      <div>\n        <a href=\"https://beian.miit.gov.cn/\" target=\"_blank\">备案信息：京ICP备19014587号-1</a>\n      </div>\n    </div>\n  </div>\n</footer>\n\n    </div>\n    <nav id=\"mobile-nav\">\n  \n    <a href=\"/\" class=\"mobile-nav-link\">Home</a>\n  \n    <a href=\"/archives\" class=\"mobile-nav-link\">Archives</a>\n  \n    <a href=\"/about\" class=\"mobile-nav-link\">About</a>\n  \n</nav>\n    \n\n\n<script src=\"/js/jquery-3.4.1.min.js\"></script>\n\n\n\n  \n<script src=\"/fancybox/jquery.fancybox.min.js\"></script>\n\n\n\n\n<script src=\"/js/script.js\"></script>\n\n\n\n\n\n  </div>\n</body>\n</html>","source":"about.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  \n  \n  <title>关于这个Up主 | Rusty Sword</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <meta name=\"description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"关于这个Up主\">\n<meta property=\"og:url\" content=\"https://mastersword.cn/paper/2e5bdf1e.html\">\n<meta property=\"og:site_name\" content=\"Rusty Sword\">\n<meta property=\"og:description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:locale\" content=\"zh_CN\">\n<meta property=\"article:published_time\" content=\"2020-12-24T16:00:00.000Z\">\n<meta property=\"article:modified_time\" content=\"2021-01-13T06:17:49.965Z\">\n<meta property=\"article:author\" content=\"Rusty\">\n<meta property=\"article:tag\" content=\"python,elastic,flask,nginx\">\n<meta name=\"twitter:card\" content=\"summary\">\n  \n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"Rusty Sword\" type=\"application/atom+xml\">\n  \n  \n    <link rel=\"shortcut icon\" href=\"/favicon.ico\">\n  \n  \n    \n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/typeface-source-code-pro@0.0.71/index.min.css\">\n\n  \n  \n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n  \n    \n<link rel=\"stylesheet\" href=\"/fancybox/jquery.fancybox.min.css\">\n\n  \n<meta name=\"generator\" content=\"Hexo 5.3.0\"></head>\n\n<body>\n  <div id=\"container\">\n    <div id=\"wrap\">\n      <header id=\"header\">\n  <div id=\"banner\"></div>\n  <div id=\"header-outer\" class=\"outer\">\n    <div id=\"header-title\" class=\"inner\">\n      <h1 id=\"logo-wrap\">\n        <a href=\"/\" id=\"logo\">Rusty Sword</a>\n      </h1>\n      \n    </div>\n    <div id=\"header-inner\" class=\"inner\">\n      <nav id=\"main-nav\">\n        <a id=\"main-nav-toggle\" class=\"nav-icon\"></a>\n        \n          <a class=\"main-nav-link\" href=\"/\">Home</a>\n        \n          <a class=\"main-nav-link\" href=\"/archives\">Archives</a>\n        \n          <a class=\"main-nav-link\" href=\"/about\">About</a>\n        \n      </nav>\n      <nav id=\"sub-nav\">\n        \n          <a id=\"nav-rss-link\" class=\"nav-icon\" href=\"/feed.json\" title=\"订阅\"></a>\n        \n        <a id=\"nav-search-btn\" class=\"nav-icon\" title=\"搜索\"></a>\n      </nav>\n      <div id=\"search-form-wrap\">\n        <form action=\"//google.com/search\" method=\"get\" accept-charset=\"UTF-8\" class=\"search-form\"><input type=\"search\" name=\"q\" class=\"search-form-input\" placeholder=\"搜索\"><button type=\"submit\" class=\"search-form-submit\">&#xF002;</button><input type=\"hidden\" name=\"sitesearch\" value=\"https://mastersword.cn\"></form>\n      </div>\n    </div>\n  </div>\n</header>\n\n      <div class=\"outer\">\n        <section id=\"main\"><article id=\"post-about\" class=\"h-entry article article-type-post\" itemprop=\"blogPost\" itemscope itemtype=\"https://schema.org/BlogPosting\">\n  <div class=\"article-meta\">\n    <a href=\"/paper/2e5bdf1e.html\" class=\"article-date\">\n  <time class=\"dt-published\" datetime=\"2020-12-24T16:00:00.000Z\" itemprop=\"datePublished\">2020-12-25</time>\n</a>\n    \n  </div>\n  <div class=\"article-inner\">\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"p-name article-title\" itemprop=\"headline name\">\n      关于这个Up主\n    </h1>\n  \n\n      </header>\n    \n    <div class=\"e-content article-entry\" itemprop=\"articleBody\">\n      \n        <p>这个人很懒，什么都不愿意写。</p>\n<p><a href=\"mailto:&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>\n\n      \n    </div>\n    <footer class=\"article-footer\">\n      <a data-url=\"https://mastersword.cn/paper/2e5bdf1e.html\" data-id=\"ckk0r2fv10000ke06ha2o06n2\" data-title=\"关于这个Up主\" class=\"article-share-link\">分享</a>\n      \n      \n      \n    </footer>\n  </div>\n  \n    \n<nav id=\"article-nav\">\n  \n    <a href=\"/paper/5d612136.html\" id=\"article-nav-newer\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\">前一篇</strong>\n      <div class=\"article-nav-title\">\n        \n          【算法】斐波拉契数列\n        \n      </div>\n    </a>\n  \n  \n</nav>\n\n  \n</article>\n\n\n</section>\n        \n          <aside id=\"sidebar\">\n  \n    \n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tags</h3>\n    <div class=\"widget\">\n      <ul class=\"tag-list\" itemprop=\"keywords\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/docker/\" rel=\"tag\">docker</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/elasticsearch/\" rel=\"tag\">elasticsearch</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/flask/\" rel=\"tag\">flask</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/gevent/\" rel=\"tag\">gevent</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/hexo/\" rel=\"tag\">hexo</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/landscape/\" rel=\"tag\">landscape</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/leetcode/\" rel=\"tag\">leetcode</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/logstash/\" rel=\"tag\">logstash</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/nginx/\" rel=\"tag\">nginx</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/python/\" rel=\"tag\">python</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/uwsgi/\" rel=\"tag\">uwsgi</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tag Cloud</h3>\n    <div class=\"widget tagcloud\">\n      <a href=\"/tags/docker/\" style=\"font-size: 16.67px;\">docker</a> <a href=\"/tags/elasticsearch/\" style=\"font-size: 20px;\">elasticsearch</a> <a href=\"/tags/flask/\" style=\"font-size: 10px;\">flask</a> <a href=\"/tags/gevent/\" style=\"font-size: 10px;\">gevent</a> <a href=\"/tags/hexo/\" style=\"font-size: 10px;\">hexo</a> <a href=\"/tags/landscape/\" style=\"font-size: 10px;\">landscape</a> <a href=\"/tags/leetcode/\" style=\"font-size: 20px;\">leetcode</a> <a href=\"/tags/logstash/\" style=\"font-size: 10px;\">logstash</a> <a href=\"/tags/nginx/\" style=\"font-size: 10px;\">nginx</a> <a href=\"/tags/python/\" style=\"font-size: 13.33px;\">python</a> <a href=\"/tags/uwsgi/\" style=\"font-size: 10px;\">uwsgi</a>\n    </div>\n  </div>\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Archives</h3>\n    <div class=\"widget\">\n      <ul class=\"archive-list\"><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2021/01/\">一月 2021</a></li><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2020/12/\">十二月 2020</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Recent Posts</h3>\n    <div class=\"widget\">\n      <ul>\n        \n          <li>\n            <a href=\"/paper/89e42a4b.html\">在Centos7使用uWSGI部署Flask</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/d8052ccb.html\">【算法】字典树的基本特征</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/85dc8b23.html\">【算法】并查集</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/46bbb70a.html\">logstash mongodb elastic，从死磕到放弃</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/5daddb41.html\">Nginx的一些配置</a>\n          </li>\n        \n      </ul>\n    </div>\n  </div>\n\n  \n</aside>\n        \n      </div>\n      <footer id=\"footer\">\n  \n  <div class=\"outer\">\n    <div id=\"footer-info\" class=\"inner\">\n      \n      &copy; 2021 Rusty<br>\n      Powered by <a href=\"https://hexo.io/\" target=\"_blank\">Hexo</a>\n      <div>\n        <a href=\"https://beian.miit.gov.cn/\" target=\"_blank\">备案信息：京ICP备19014587号-1</a>\n      </div>\n    </div>\n  </div>\n</footer>\n\n    </div>\n    <nav id=\"mobile-nav\">\n  \n    <a href=\"/\" class=\"mobile-nav-link\">Home</a>\n  \n    <a href=\"/archives\" class=\"mobile-nav-link\">Archives</a>\n  \n    <a href=\"/about\" class=\"mobile-nav-link\">About</a>\n  \n</nav>\n    \n\n\n<script src=\"/js/jquery-3.4.1.min.js\"></script>\n\n\n\n  \n<script src=\"/fancybox/jquery.fancybox.min.js\"></script>\n\n\n\n\n<script src=\"/js/script.js\"></script>\n\n\n\n\n\n  </div>\n</body>\n</html>","date":"2022-04-06T07:48:56.208Z","updated":"2021-01-18T12:03:46.000Z","path":"about.html","title":"","comments":1,"layout":"page","_id":"cl1nbtozh00006rxi1eeh55n9","content":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  \n  \n  <title>关于这个Up主 | Rusty Sword</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <meta name=\"description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"关于这个Up主\">\n<meta property=\"og:url\" content=\"https://mastersword.cn/paper/2e5bdf1e.html\">\n<meta property=\"og:site_name\" content=\"Rusty Sword\">\n<meta property=\"og:description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:locale\" content=\"zh_CN\">\n<meta property=\"article:published_time\" content=\"2020-12-24T16:00:00.000Z\">\n<meta property=\"article:modified_time\" content=\"2021-01-13T06:17:49.965Z\">\n<meta property=\"article:author\" content=\"Rusty\">\n<meta property=\"article:tag\" content=\"python,elastic,flask,nginx\">\n<meta name=\"twitter:card\" content=\"summary\">\n  \n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"Rusty Sword\" type=\"application/atom+xml\">\n  \n  \n    <link rel=\"shortcut icon\" href=\"/favicon.ico\">\n  \n  \n    \n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/typeface-source-code-pro@0.0.71/index.min.css\">\n\n  \n  \n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n  \n    \n<link rel=\"stylesheet\" href=\"/fancybox/jquery.fancybox.min.css\">\n\n  \n<meta name=\"generator\" content=\"Hexo 5.3.0\"></head>\n\n<body>\n  <div id=\"container\">\n    <div id=\"wrap\">\n      <header id=\"header\">\n  <div id=\"banner\"></div>\n  <div id=\"header-outer\" class=\"outer\">\n    <div id=\"header-title\" class=\"inner\">\n      <h1 id=\"logo-wrap\">\n        <a href=\"/\" id=\"logo\">Rusty Sword</a>\n      </h1>\n      \n    </div>\n    <div id=\"header-inner\" class=\"inner\">\n      <nav id=\"main-nav\">\n        <a id=\"main-nav-toggle\" class=\"nav-icon\"></a>\n        \n          <a class=\"main-nav-link\" href=\"/\">Home</a>\n        \n          <a class=\"main-nav-link\" href=\"/archives\">Archives</a>\n        \n          <a class=\"main-nav-link\" href=\"/about\">About</a>\n        \n      </nav>\n      <nav id=\"sub-nav\">\n        \n          <a id=\"nav-rss-link\" class=\"nav-icon\" href=\"/feed.json\" title=\"订阅\"></a>\n        \n        <a id=\"nav-search-btn\" class=\"nav-icon\" title=\"搜索\"></a>\n      </nav>\n      <div id=\"search-form-wrap\">\n        <form action=\"//google.com/search\" method=\"get\" accept-charset=\"UTF-8\" class=\"search-form\"><input type=\"search\" name=\"q\" class=\"search-form-input\" placeholder=\"搜索\"><button type=\"submit\" class=\"search-form-submit\">&#xF002;</button><input type=\"hidden\" name=\"sitesearch\" value=\"https://mastersword.cn\"></form>\n      </div>\n    </div>\n  </div>\n</header>\n\n      <div class=\"outer\">\n        <section id=\"main\"><article id=\"post-about\" class=\"h-entry article article-type-post\" itemprop=\"blogPost\" itemscope itemtype=\"https://schema.org/BlogPosting\">\n  <div class=\"article-meta\">\n    <a href=\"/paper/2e5bdf1e.html\" class=\"article-date\">\n  <time class=\"dt-published\" datetime=\"2020-12-24T16:00:00.000Z\" itemprop=\"datePublished\">2020-12-25</time>\n</a>\n    \n  </div>\n  <div class=\"article-inner\">\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"p-name article-title\" itemprop=\"headline name\">\n      关于这个Up主\n    </h1>\n  \n\n      </header>\n    \n    <div class=\"e-content article-entry\" itemprop=\"articleBody\">\n      \n        <p>这个人很懒，什么都不愿意写。</p>\n<p><a href=\"mailto:&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>\n\n      \n    </div>\n    <footer class=\"article-footer\">\n      <a data-url=\"https://mastersword.cn/paper/2e5bdf1e.html\" data-id=\"ckk0r2fv10000ke06ha2o06n2\" data-title=\"关于这个Up主\" class=\"article-share-link\">分享</a>\n      \n      \n      \n    </footer>\n  </div>\n  \n    \n<nav id=\"article-nav\">\n  \n    <a href=\"/paper/5d612136.html\" id=\"article-nav-newer\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\">前一篇</strong>\n      <div class=\"article-nav-title\">\n        \n          【算法】斐波拉契数列\n        \n      </div>\n    </a>\n  \n  \n</nav>\n\n  \n</article>\n\n\n</section>\n        \n          <aside id=\"sidebar\">\n  \n    \n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tags</h3>\n    <div class=\"widget\">\n      <ul class=\"tag-list\" itemprop=\"keywords\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/docker/\" rel=\"tag\">docker</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/elasticsearch/\" rel=\"tag\">elasticsearch</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/flask/\" rel=\"tag\">flask</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/gevent/\" rel=\"tag\">gevent</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/hexo/\" rel=\"tag\">hexo</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/landscape/\" rel=\"tag\">landscape</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/leetcode/\" rel=\"tag\">leetcode</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/logstash/\" rel=\"tag\">logstash</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/nginx/\" rel=\"tag\">nginx</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/python/\" rel=\"tag\">python</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/uwsgi/\" rel=\"tag\">uwsgi</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tag Cloud</h3>\n    <div class=\"widget tagcloud\">\n      <a href=\"/tags/docker/\" style=\"font-size: 16.67px;\">docker</a> <a href=\"/tags/elasticsearch/\" style=\"font-size: 20px;\">elasticsearch</a> <a href=\"/tags/flask/\" style=\"font-size: 10px;\">flask</a> <a href=\"/tags/gevent/\" style=\"font-size: 10px;\">gevent</a> <a href=\"/tags/hexo/\" style=\"font-size: 10px;\">hexo</a> <a href=\"/tags/landscape/\" style=\"font-size: 10px;\">landscape</a> <a href=\"/tags/leetcode/\" style=\"font-size: 20px;\">leetcode</a> <a href=\"/tags/logstash/\" style=\"font-size: 10px;\">logstash</a> <a href=\"/tags/nginx/\" style=\"font-size: 10px;\">nginx</a> <a href=\"/tags/python/\" style=\"font-size: 13.33px;\">python</a> <a href=\"/tags/uwsgi/\" style=\"font-size: 10px;\">uwsgi</a>\n    </div>\n  </div>\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Archives</h3>\n    <div class=\"widget\">\n      <ul class=\"archive-list\"><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2021/01/\">一月 2021</a></li><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2020/12/\">十二月 2020</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Recent Posts</h3>\n    <div class=\"widget\">\n      <ul>\n        \n          <li>\n            <a href=\"/paper/89e42a4b.html\">在Centos7使用uWSGI部署Flask</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/d8052ccb.html\">【算法】字典树的基本特征</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/85dc8b23.html\">【算法】并查集</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/46bbb70a.html\">logstash mongodb elastic，从死磕到放弃</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/5daddb41.html\">Nginx的一些配置</a>\n          </li>\n        \n      </ul>\n    </div>\n  </div>\n\n  \n</aside>\n        \n      </div>\n      <footer id=\"footer\">\n  \n  <div class=\"outer\">\n    <div id=\"footer-info\" class=\"inner\">\n      \n      &copy; 2021 Rusty<br>\n      Powered by <a href=\"https://hexo.io/\" target=\"_blank\">Hexo</a>\n      <div>\n        <a href=\"https://beian.miit.gov.cn/\" target=\"_blank\">备案信息：京ICP备19014587号-1</a>\n      </div>\n    </div>\n  </div>\n</footer>\n\n    </div>\n    <nav id=\"mobile-nav\">\n  \n    <a href=\"/\" class=\"mobile-nav-link\">Home</a>\n  \n    <a href=\"/archives\" class=\"mobile-nav-link\">Archives</a>\n  \n    <a href=\"/about\" class=\"mobile-nav-link\">About</a>\n  \n</nav>\n    \n\n\n<script src=\"/js/jquery-3.4.1.min.js\"></script>\n\n\n\n  \n<script src=\"/fancybox/jquery.fancybox.min.js\"></script>\n\n\n\n\n<script src=\"/js/script.js\"></script>\n\n\n\n\n\n  </div>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  \n  \n  <title>关于这个Up主 | Rusty Sword</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <meta name=\"description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:type\" content=\"article\">\n<meta property=\"og:title\" content=\"关于这个Up主\">\n<meta property=\"og:url\" content=\"https://mastersword.cn/paper/2e5bdf1e.html\">\n<meta property=\"og:site_name\" content=\"Rusty Sword\">\n<meta property=\"og:description\" content=\"这个人很懒，什么都不愿意写。 &amp;#114;&amp;#117;&amp;#115;&amp;#x74;&amp;#x73;&amp;#x77;&amp;#111;&amp;#114;&amp;#x64;&amp;#x40;&amp;#x66;&amp;#x6f;&amp;#120;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;\">\n<meta property=\"og:locale\" content=\"zh_CN\">\n<meta property=\"article:published_time\" content=\"2020-12-24T16:00:00.000Z\">\n<meta property=\"article:modified_time\" content=\"2021-01-13T06:17:49.965Z\">\n<meta property=\"article:author\" content=\"Rusty\">\n<meta property=\"article:tag\" content=\"python,elastic,flask,nginx\">\n<meta name=\"twitter:card\" content=\"summary\">\n  \n    <link rel=\"alternate\" href=\"/atom.xml\" title=\"Rusty Sword\" type=\"application/atom+xml\">\n  \n  \n    <link rel=\"shortcut icon\" href=\"/favicon.ico\">\n  \n  \n    \n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/typeface-source-code-pro@0.0.71/index.min.css\">\n\n  \n  \n<link rel=\"stylesheet\" href=\"/css/style.css\">\n\n  \n    \n<link rel=\"stylesheet\" href=\"/fancybox/jquery.fancybox.min.css\">\n\n  \n<meta name=\"generator\" content=\"Hexo 5.3.0\"></head>\n\n<body>\n  <div id=\"container\">\n    <div id=\"wrap\">\n      <header id=\"header\">\n  <div id=\"banner\"></div>\n  <div id=\"header-outer\" class=\"outer\">\n    <div id=\"header-title\" class=\"inner\">\n      <h1 id=\"logo-wrap\">\n        <a href=\"/\" id=\"logo\">Rusty Sword</a>\n      </h1>\n      \n    </div>\n    <div id=\"header-inner\" class=\"inner\">\n      <nav id=\"main-nav\">\n        <a id=\"main-nav-toggle\" class=\"nav-icon\"></a>\n        \n          <a class=\"main-nav-link\" href=\"/\">Home</a>\n        \n          <a class=\"main-nav-link\" href=\"/archives\">Archives</a>\n        \n          <a class=\"main-nav-link\" href=\"/about\">About</a>\n        \n      </nav>\n      <nav id=\"sub-nav\">\n        \n          <a id=\"nav-rss-link\" class=\"nav-icon\" href=\"/feed.json\" title=\"订阅\"></a>\n        \n        <a id=\"nav-search-btn\" class=\"nav-icon\" title=\"搜索\"></a>\n      </nav>\n      <div id=\"search-form-wrap\">\n        <form action=\"//google.com/search\" method=\"get\" accept-charset=\"UTF-8\" class=\"search-form\"><input type=\"search\" name=\"q\" class=\"search-form-input\" placeholder=\"搜索\"><button type=\"submit\" class=\"search-form-submit\">&#xF002;</button><input type=\"hidden\" name=\"sitesearch\" value=\"https://mastersword.cn\"></form>\n      </div>\n    </div>\n  </div>\n</header>\n\n      <div class=\"outer\">\n        <section id=\"main\"><article id=\"post-about\" class=\"h-entry article article-type-post\" itemprop=\"blogPost\" itemscope itemtype=\"https://schema.org/BlogPosting\">\n  <div class=\"article-meta\">\n    <a href=\"/paper/2e5bdf1e.html\" class=\"article-date\">\n  <time class=\"dt-published\" datetime=\"2020-12-24T16:00:00.000Z\" itemprop=\"datePublished\">2020-12-25</time>\n</a>\n    \n  </div>\n  <div class=\"article-inner\">\n    \n    \n      <header class=\"article-header\">\n        \n  \n    <h1 class=\"p-name article-title\" itemprop=\"headline name\">\n      关于这个Up主\n    </h1>\n  \n\n      </header>\n    \n    <div class=\"e-content article-entry\" itemprop=\"articleBody\">\n      \n        <p>这个人很懒，什么都不愿意写。</p>\n<p><a href=\"mailto:&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#114;&#117;&#115;&#x74;&#x73;&#x77;&#111;&#114;&#x64;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>\n\n      \n    </div>\n    <footer class=\"article-footer\">\n      <a data-url=\"https://mastersword.cn/paper/2e5bdf1e.html\" data-id=\"ckk0r2fv10000ke06ha2o06n2\" data-title=\"关于这个Up主\" class=\"article-share-link\">分享</a>\n      \n      \n      \n    </footer>\n  </div>\n  \n    \n<nav id=\"article-nav\">\n  \n    <a href=\"/paper/5d612136.html\" id=\"article-nav-newer\" class=\"article-nav-link-wrap\">\n      <strong class=\"article-nav-caption\">前一篇</strong>\n      <div class=\"article-nav-title\">\n        \n          【算法】斐波拉契数列\n        \n      </div>\n    </a>\n  \n  \n</nav>\n\n  \n</article>\n\n\n</section>\n        \n          <aside id=\"sidebar\">\n  \n    \n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tags</h3>\n    <div class=\"widget\">\n      <ul class=\"tag-list\" itemprop=\"keywords\"><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/docker/\" rel=\"tag\">docker</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/elasticsearch/\" rel=\"tag\">elasticsearch</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/flask/\" rel=\"tag\">flask</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/gevent/\" rel=\"tag\">gevent</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/hexo/\" rel=\"tag\">hexo</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/landscape/\" rel=\"tag\">landscape</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/leetcode/\" rel=\"tag\">leetcode</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/logstash/\" rel=\"tag\">logstash</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/nginx/\" rel=\"tag\">nginx</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/python/\" rel=\"tag\">python</a></li><li class=\"tag-list-item\"><a class=\"tag-list-link\" href=\"/tags/uwsgi/\" rel=\"tag\">uwsgi</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Tag Cloud</h3>\n    <div class=\"widget tagcloud\">\n      <a href=\"/tags/docker/\" style=\"font-size: 16.67px;\">docker</a> <a href=\"/tags/elasticsearch/\" style=\"font-size: 20px;\">elasticsearch</a> <a href=\"/tags/flask/\" style=\"font-size: 10px;\">flask</a> <a href=\"/tags/gevent/\" style=\"font-size: 10px;\">gevent</a> <a href=\"/tags/hexo/\" style=\"font-size: 10px;\">hexo</a> <a href=\"/tags/landscape/\" style=\"font-size: 10px;\">landscape</a> <a href=\"/tags/leetcode/\" style=\"font-size: 20px;\">leetcode</a> <a href=\"/tags/logstash/\" style=\"font-size: 10px;\">logstash</a> <a href=\"/tags/nginx/\" style=\"font-size: 10px;\">nginx</a> <a href=\"/tags/python/\" style=\"font-size: 13.33px;\">python</a> <a href=\"/tags/uwsgi/\" style=\"font-size: 10px;\">uwsgi</a>\n    </div>\n  </div>\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Archives</h3>\n    <div class=\"widget\">\n      <ul class=\"archive-list\"><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2021/01/\">一月 2021</a></li><li class=\"archive-list-item\"><a class=\"archive-list-link\" href=\"/archives/2020/12/\">十二月 2020</a></li></ul>\n    </div>\n  </div>\n\n\n  \n    \n  <div class=\"widget-wrap\">\n    <h3 class=\"widget-title\">Recent Posts</h3>\n    <div class=\"widget\">\n      <ul>\n        \n          <li>\n            <a href=\"/paper/89e42a4b.html\">在Centos7使用uWSGI部署Flask</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/d8052ccb.html\">【算法】字典树的基本特征</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/85dc8b23.html\">【算法】并查集</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/46bbb70a.html\">logstash mongodb elastic，从死磕到放弃</a>\n          </li>\n        \n          <li>\n            <a href=\"/paper/5daddb41.html\">Nginx的一些配置</a>\n          </li>\n        \n      </ul>\n    </div>\n  </div>\n\n  \n</aside>\n        \n      </div>\n      <footer id=\"footer\">\n  \n  <div class=\"outer\">\n    <div id=\"footer-info\" class=\"inner\">\n      \n      &copy; 2021 Rusty<br>\n      Powered by <a href=\"https://hexo.io/\" target=\"_blank\">Hexo</a>\n      <div>\n        <a href=\"https://beian.miit.gov.cn/\" target=\"_blank\">备案信息：京ICP备19014587号-1</a>\n      </div>\n    </div>\n  </div>\n</footer>\n\n    </div>\n    <nav id=\"mobile-nav\">\n  \n    <a href=\"/\" class=\"mobile-nav-link\">Home</a>\n  \n    <a href=\"/archives\" class=\"mobile-nav-link\">Archives</a>\n  \n    <a href=\"/about\" class=\"mobile-nav-link\">About</a>\n  \n</nav>\n    \n\n\n<script src=\"/js/jquery-3.4.1.min.js\"></script>\n\n\n\n  \n<script src=\"/fancybox/jquery.fancybox.min.js\"></script>\n\n\n\n\n<script src=\"/js/script.js\"></script>\n\n\n\n\n\n  </div>\n</body>\n</html>"}],"Post":[{"title":"关于这个Up主","abbrlink":"2e5bdf1e","date":"2020-12-24T16:00:00.000Z","_content":"\n这个人很懒，什么都不愿意写。\n\nrustsword@foxmail.com\n\n","source":"_posts/about.md","raw":"---\ntitle: 关于这个Up主\nabbrlink: 2e5bdf1e\ndate: 2020-12-25 00:00:00\n---\n\n这个人很懒，什么都不愿意写。\n\nrustsword@foxmail.com\n\n","slug":"about","published":1,"updated":"2021-01-13T06:17:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozk00016rxid41jejkm","content":"<p>这个人很懒，什么都不愿意写。</p>\n<p><a href=\"mailto:&#114;&#117;&#115;&#116;&#115;&#119;&#x6f;&#114;&#100;&#64;&#x66;&#x6f;&#120;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;\">&#114;&#117;&#115;&#116;&#115;&#119;&#x6f;&#114;&#100;&#64;&#x66;&#x6f;&#120;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个人很懒，什么都不愿意写。</p>\n<p><a href=\"mailto:&#114;&#117;&#115;&#116;&#115;&#119;&#x6f;&#114;&#100;&#64;&#x66;&#x6f;&#120;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;\">&#114;&#117;&#115;&#116;&#115;&#119;&#x6f;&#114;&#100;&#64;&#x66;&#x6f;&#120;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></p>\n"},{"title":"【算法基础】位运算","date":"2021-01-17T09:00:00.000Z","abbrlink":"cb20bfd8","_content":"\n程序中的所有数在计算机内存中都是以二进制的形式储存的，位运算就是直接对整数在内存中的二进制位进行操作。有或，与，亦或，非等。\n\n<!-- more -->\n\n#### 位运算符\n\n| 含义     | 运算符   | 示例                 |\n| -------- | -------- | -------------------- |\n| 左移     | ```<<``` | 0011 << 1 == 0110    |\n| 右移     | ```>>``` | 0110 >> 1 == 0011    |\n| 按位或   | ```\\|```  | 0011 \\| 1011 == 1011 |\n| 按位与   | ```&```  | 0011 & 1011 == 0011  |\n| 按位取反 | ```~```  | !0011 == 1100        |\n| 按位亦或 | ```^```  | 0011 ^ 1011 == 1000  |\n\n#### 亦或 - XOR\n\n亦或相同为0，不同为一，也可以理解为不进位的加法。亦或有以下的一些特点：\n\n- x ^ 0 = x\n- x ^ x = 0\n- x ^ (~x) = 1s // 1s表示全1，也就是 ~0\n- x ^ 1s = ~x\n- c = a ^ b，a ^ c = b，b ^ c = a  // 交换律\n- a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c  // 结合律\n\n#### 一些移位的公式\n\n- 将 x 最后边的 n 位 置 0：x & (~0 << n)\n- 获取 x 的第 n 位值（0 或者 1）： (x >> n) & 1\n- 获取 x 的第 n 位的幂值：x & (1 << n)\n- 仅将第 n 位置为 1：x | (1 << n)\n- 仅将第 n 位置为 0：x & (~ (1 << n))\n- 将 x 最高位至第 n 位（含）清零：x & ((1 << n) - 1)\n\n#### 常用的位运算\n\n1. 判断奇偶性\n\n​      x % 2 == 1 等价于 x & 1 == 1\n\n​      x % 2 == 0 等价于 x & 1 == 0\n\n2. 乘以2与除以2\n\n​      x * 2 等价于 x << 1\n\n​      x / 2 等价于 x >> 1\n\n3. 清零最低位的1\n\n​      x = x & (x - 1)\n\n4. 得到最低位的1\n\n​      x = x & -x\n\n5. x & ~x == 0\n","source":"_posts/bitwise-operation.md","raw":"---\ntitle: 【算法基础】位运算\ndate: 2021-01-17 17:00:00\nabbrlink: cb20bfd8\n---\n\n程序中的所有数在计算机内存中都是以二进制的形式储存的，位运算就是直接对整数在内存中的二进制位进行操作。有或，与，亦或，非等。\n\n<!-- more -->\n\n#### 位运算符\n\n| 含义     | 运算符   | 示例                 |\n| -------- | -------- | -------------------- |\n| 左移     | ```<<``` | 0011 << 1 == 0110    |\n| 右移     | ```>>``` | 0110 >> 1 == 0011    |\n| 按位或   | ```\\|```  | 0011 \\| 1011 == 1011 |\n| 按位与   | ```&```  | 0011 & 1011 == 0011  |\n| 按位取反 | ```~```  | !0011 == 1100        |\n| 按位亦或 | ```^```  | 0011 ^ 1011 == 1000  |\n\n#### 亦或 - XOR\n\n亦或相同为0，不同为一，也可以理解为不进位的加法。亦或有以下的一些特点：\n\n- x ^ 0 = x\n- x ^ x = 0\n- x ^ (~x) = 1s // 1s表示全1，也就是 ~0\n- x ^ 1s = ~x\n- c = a ^ b，a ^ c = b，b ^ c = a  // 交换律\n- a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c  // 结合律\n\n#### 一些移位的公式\n\n- 将 x 最后边的 n 位 置 0：x & (~0 << n)\n- 获取 x 的第 n 位值（0 或者 1）： (x >> n) & 1\n- 获取 x 的第 n 位的幂值：x & (1 << n)\n- 仅将第 n 位置为 1：x | (1 << n)\n- 仅将第 n 位置为 0：x & (~ (1 << n))\n- 将 x 最高位至第 n 位（含）清零：x & ((1 << n) - 1)\n\n#### 常用的位运算\n\n1. 判断奇偶性\n\n​      x % 2 == 1 等价于 x & 1 == 1\n\n​      x % 2 == 0 等价于 x & 1 == 0\n\n2. 乘以2与除以2\n\n​      x * 2 等价于 x << 1\n\n​      x / 2 等价于 x >> 1\n\n3. 清零最低位的1\n\n​      x = x & (x - 1)\n\n4. 得到最低位的1\n\n​      x = x & -x\n\n5. x & ~x == 0\n","slug":"bitwise-operation","published":1,"updated":"2021-01-17T09:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozn00026rxi587h0m9c","content":"<p>程序中的所有数在计算机内存中都是以二进制的形式储存的，位运算就是直接对整数在内存中的二进制位进行操作。有或，与，亦或，非等。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><table>\n<thead>\n<tr>\n<th>含义</th>\n<th>运算符</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移</td>\n<td><code>&lt;&lt;</code></td>\n<td>0011 &lt;&lt; 1 &#x3D;&#x3D; 0110</td>\n</tr>\n<tr>\n<td>右移</td>\n<td><code>&gt;&gt;</code></td>\n<td>0110 &gt;&gt; 1 &#x3D;&#x3D; 0011</td>\n</tr>\n<tr>\n<td>按位或</td>\n<td><code>|</code></td>\n<td>0011 | 1011 &#x3D;&#x3D; 1011</td>\n</tr>\n<tr>\n<td>按位与</td>\n<td><code>&amp;</code></td>\n<td>0011 &amp; 1011 &#x3D;&#x3D; 0011</td>\n</tr>\n<tr>\n<td>按位取反</td>\n<td><code>~</code></td>\n<td>!0011 &#x3D;&#x3D; 1100</td>\n</tr>\n<tr>\n<td>按位亦或</td>\n<td><code>^</code></td>\n<td>0011 ^ 1011 &#x3D;&#x3D; 1000</td>\n</tr>\n</tbody></table>\n<h4 id=\"亦或-XOR\"><a href=\"#亦或-XOR\" class=\"headerlink\" title=\"亦或 - XOR\"></a>亦或 - XOR</h4><p>亦或相同为0，不同为一，也可以理解为不进位的加法。亦或有以下的一些特点：</p>\n<ul>\n<li>x ^ 0 &#x3D; x</li>\n<li>x ^ x &#x3D; 0</li>\n<li>x ^ (~x) &#x3D; 1s &#x2F;&#x2F; 1s表示全1，也就是 ~0</li>\n<li>x ^ 1s &#x3D; ~x</li>\n<li>c &#x3D; a ^ b，a ^ c &#x3D; b，b ^ c &#x3D; a  &#x2F;&#x2F; 交换律</li>\n<li>a ^ b ^ c &#x3D; a ^ (b ^ c) &#x3D; (a ^ b) ^ c  &#x2F;&#x2F; 结合律</li>\n</ul>\n<h4 id=\"一些移位的公式\"><a href=\"#一些移位的公式\" class=\"headerlink\" title=\"一些移位的公式\"></a>一些移位的公式</h4><ul>\n<li>将 x 最后边的 n 位 置 0：x &amp; (~0 &lt;&lt; n)</li>\n<li>获取 x 的第 n 位值（0 或者 1）： (x &gt;&gt; n) &amp; 1</li>\n<li>获取 x 的第 n 位的幂值：x &amp; (1 &lt;&lt; n)</li>\n<li>仅将第 n 位置为 1：x | (1 &lt;&lt; n)</li>\n<li>仅将第 n 位置为 0：x &amp; (~ (1 &lt;&lt; n))</li>\n<li>将 x 最高位至第 n 位（含）清零：x &amp; ((1 &lt;&lt; n) - 1)</li>\n</ul>\n<h4 id=\"常用的位运算\"><a href=\"#常用的位运算\" class=\"headerlink\" title=\"常用的位运算\"></a>常用的位运算</h4><ol>\n<li>判断奇偶性</li>\n</ol>\n<p>​      x % 2 &#x3D;&#x3D; 1 等价于 x &amp; 1 &#x3D;&#x3D; 1</p>\n<p>​      x % 2 &#x3D;&#x3D; 0 等价于 x &amp; 1 &#x3D;&#x3D; 0</p>\n<ol start=\"2\">\n<li>乘以2与除以2</li>\n</ol>\n<p>​      x * 2 等价于 x &lt;&lt; 1</p>\n<p>​      x &#x2F; 2 等价于 x &gt;&gt; 1</p>\n<ol start=\"3\">\n<li>清零最低位的1</li>\n</ol>\n<p>​      x &#x3D; x &amp; (x - 1)</p>\n<ol start=\"4\">\n<li>得到最低位的1</li>\n</ol>\n<p>​      x &#x3D; x &amp; -x</p>\n<ol start=\"5\">\n<li>x &amp; ~x &#x3D;&#x3D; 0</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>程序中的所有数在计算机内存中都是以二进制的形式储存的，位运算就是直接对整数在内存中的二进制位进行操作。有或，与，亦或，非等。</p>","more":"<h4 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h4><table>\n<thead>\n<tr>\n<th>含义</th>\n<th>运算符</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移</td>\n<td><code>&lt;&lt;</code></td>\n<td>0011 &lt;&lt; 1 &#x3D;&#x3D; 0110</td>\n</tr>\n<tr>\n<td>右移</td>\n<td><code>&gt;&gt;</code></td>\n<td>0110 &gt;&gt; 1 &#x3D;&#x3D; 0011</td>\n</tr>\n<tr>\n<td>按位或</td>\n<td><code>|</code></td>\n<td>0011 | 1011 &#x3D;&#x3D; 1011</td>\n</tr>\n<tr>\n<td>按位与</td>\n<td><code>&amp;</code></td>\n<td>0011 &amp; 1011 &#x3D;&#x3D; 0011</td>\n</tr>\n<tr>\n<td>按位取反</td>\n<td><code>~</code></td>\n<td>!0011 &#x3D;&#x3D; 1100</td>\n</tr>\n<tr>\n<td>按位亦或</td>\n<td><code>^</code></td>\n<td>0011 ^ 1011 &#x3D;&#x3D; 1000</td>\n</tr>\n</tbody></table>\n<h4 id=\"亦或-XOR\"><a href=\"#亦或-XOR\" class=\"headerlink\" title=\"亦或 - XOR\"></a>亦或 - XOR</h4><p>亦或相同为0，不同为一，也可以理解为不进位的加法。亦或有以下的一些特点：</p>\n<ul>\n<li>x ^ 0 &#x3D; x</li>\n<li>x ^ x &#x3D; 0</li>\n<li>x ^ (~x) &#x3D; 1s &#x2F;&#x2F; 1s表示全1，也就是 ~0</li>\n<li>x ^ 1s &#x3D; ~x</li>\n<li>c &#x3D; a ^ b，a ^ c &#x3D; b，b ^ c &#x3D; a  &#x2F;&#x2F; 交换律</li>\n<li>a ^ b ^ c &#x3D; a ^ (b ^ c) &#x3D; (a ^ b) ^ c  &#x2F;&#x2F; 结合律</li>\n</ul>\n<h4 id=\"一些移位的公式\"><a href=\"#一些移位的公式\" class=\"headerlink\" title=\"一些移位的公式\"></a>一些移位的公式</h4><ul>\n<li>将 x 最后边的 n 位 置 0：x &amp; (~0 &lt;&lt; n)</li>\n<li>获取 x 的第 n 位值（0 或者 1）： (x &gt;&gt; n) &amp; 1</li>\n<li>获取 x 的第 n 位的幂值：x &amp; (1 &lt;&lt; n)</li>\n<li>仅将第 n 位置为 1：x | (1 &lt;&lt; n)</li>\n<li>仅将第 n 位置为 0：x &amp; (~ (1 &lt;&lt; n))</li>\n<li>将 x 最高位至第 n 位（含）清零：x &amp; ((1 &lt;&lt; n) - 1)</li>\n</ul>\n<h4 id=\"常用的位运算\"><a href=\"#常用的位运算\" class=\"headerlink\" title=\"常用的位运算\"></a>常用的位运算</h4><ol>\n<li>判断奇偶性</li>\n</ol>\n<p>​      x % 2 &#x3D;&#x3D; 1 等价于 x &amp; 1 &#x3D;&#x3D; 1</p>\n<p>​      x % 2 &#x3D;&#x3D; 0 等价于 x &amp; 1 &#x3D;&#x3D; 0</p>\n<ol start=\"2\">\n<li>乘以2与除以2</li>\n</ol>\n<p>​      x * 2 等价于 x &lt;&lt; 1</p>\n<p>​      x &#x2F; 2 等价于 x &gt;&gt; 1</p>\n<ol start=\"3\">\n<li>清零最低位的1</li>\n</ol>\n<p>​      x &#x3D; x &amp; (x - 1)</p>\n<ol start=\"4\">\n<li>得到最低位的1</li>\n</ol>\n<p>​      x &#x3D; x &amp; -x</p>\n<ol start=\"5\">\n<li>x &amp; ~x &#x3D;&#x3D; 0</li>\n</ol>"},{"title":"Docker 部署单节点 ElasticSearch","abbrlink":"f848b956","date":"2020-12-28T03:31:46.000Z","_content":"\ndocker 版本19.03.2，版本 elasticsearch 版本 7.4.2，本机单节点部署。\n\n<!-- more -->\n\n\n**1. 拉取镜像**\n\n```shell\ndocker pull elasticsearch:7.4.2\ndocker pull kibana:7.4.2\n```\n\n**2. 修改配置文件**\n\nelasticsearch.yml\n\n```shell\ncluster.name: \"single_node\"\nnetwork.host: 0.0.0.0\ndiscovery.type: \"single-node\"\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\n```\n\n**3. 创建elasticsearch存储目录**\n\ndocker elasticsearch 没有 root 用户的写权限，故此需要将存储目录更改为 1000 用户。\n\n```shell\ncd /data\nmkdir -p elasticsearch/data\nmkdir -p elasticsearch/logs\nchown -R 1000 elasticsearch\nchgrp -R 1000 elasticsearch\n```\n\n**4. 启动elasticsearch**\n\ndocker-compose.yml\n\n```yml\nversion: \"3.3\"\nservices: \n   elasticsearch: \n     image: elasticsearch:7.4.2\n     container_name: elasticsearch\n     privileged: true\n     restart: always\n     environment: \n       - \"ES_JAVA_OPTS=-Xms1024m -Xmx1024m\"\n       - bootstrap.memory_lock=true\n     ulimits:\n       memlock:\n         soft: -1\n         hard: -1\n     volumes:\n       - /etc/localtime:/etc/localtime\n       - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n       - /data/elasticsearch/data:/usr/share/elasticsearch/data\n       - /data/elasticsearch/logs:/usr/share/elasticsearch/logs\n     logging:\n       driver: \"json-file\"\n       options:\n         max-size: \"10g\"\n     ports:\n       - 9200:9200\n       - 9300:9300\n     networks:\n       - cloud\nnetworks:\n  cloud:\n    external:\n      name: cloud\n```\n\n这里的 network cloud 是事先创建的，避免 docker-compose.yml 在不同目录导致网络不通。\n\n```shell\ndocker network create cloud\n```\n\n**5. 使用 X-pack 创建用户名和密码**\n\n进入 elasticsearch 容器执行\n\n```shell\n# 自动创建密码\n./bin/elasticsearch-setup-passwords auto\n\n# 手动创建密码\n./bin/elasticsearch-setup-passwords interactive\n```\n\n**6. 修改 kibana 配置文件**\n\nkibana.yml\n\n```shell\nserver.name: kibana\nserver.host: \"0\"\nelasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\nxpack.monitoring.ui.container.elasticsearch.enabled: true\n\nelasticsearch.username: \"elastic username\"\nelasticsearch.password: \"elastic password\"\n```\n\n在 docker-compose.yml 中添加 kibana 相关配置\n\n```yaml\nkibana:\n  image: kibana:7.4.2\n  container_name: kibana\n  privileged: true\n  restart: always\n  ports: \n    - 5601:5601\n  environment:\n    - SERVER_NAME=kibana\n  volumes:\n    - /etc/localtime:/etc/localtime\n    - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml\n  logging:\n    driver: \"json-file\"\n    options:\n      max-size: \"2g\"\n  depends_on:\n    - elasticsearch\n  networks:\n    - cloud\n```\n\n**7. 登录验证  **\n\n浏览器访问 elasticsearch (http://127.0.0.1:9200)，访问 kibana (http://127.0.0.1:5601)，如果弹出登录框，即为验证开启成功。\n\n注意，首次登录 kibana 的时候，需要使用 super 用户，也就是 elastic 这个账号，然后可以在 kibana 的 Management -> Security 中设置各种权限。\n\n**8. 在http请求中进行用户验证**\n\n和大部分数据库的 uri 访问格式一样\n\n```shell\ncurl http://elastic:password@127.0.0.1:9200\n```\n\n**9. 添加 icu 分词器插件 **\n\n进入 docker 容器执行\n\n```shell\n./bin/elasticsearch-plugin install analysis-icu\n\n# 安装完成查看是否安装成功\n./bin/elasticsearch-plugin list\n```\n\n**10. 测试分词器**\n\n在 kibana 的 Dev Tools 中执行\n\n```shell\nGET /_analyze\n{\n  \"analyzer\": \"icu_analyzer\",\n  \"text\": \"北京暴雨\"\n}\n\n# 返回数据\n{\n  \"tokens\" : [\n    {\n      \"token\" : \"北京\",\n      \"start_offset\" : 0,\n      \"end_offset\" : 2,\n      \"type\" : \"<IDEOGRAPHIC>\",\n      \"position\" : 0\n    },\n    {\n      \"token\" : \"暴雨\",\n      \"start_offset\" : 2,\n      \"end_offset\" : 4,\n      \"type\" : \"<IDEOGRAPHIC>\",\n      \"position\" : 1\n    }\n  ]\n}\n```\n\n**11. 提交新的镜像**\n\n```shell\ndocker commit -a \"mr.l\" -m \"add analysis-icu\" elasticsearch elasticsearch:7.4.2-v1.0.1\n```\n\n\n","source":"_posts/docker-install-elastic-single-node.md","raw":"---\ntitle: Docker 部署单节点 ElasticSearch\ntags:\n  - docker\n  - elasticsearch\nabbrlink: f848b956\ndate: 2020-12-28 11:31:46\n---\n\ndocker 版本19.03.2，版本 elasticsearch 版本 7.4.2，本机单节点部署。\n\n<!-- more -->\n\n\n**1. 拉取镜像**\n\n```shell\ndocker pull elasticsearch:7.4.2\ndocker pull kibana:7.4.2\n```\n\n**2. 修改配置文件**\n\nelasticsearch.yml\n\n```shell\ncluster.name: \"single_node\"\nnetwork.host: 0.0.0.0\ndiscovery.type: \"single-node\"\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\n```\n\n**3. 创建elasticsearch存储目录**\n\ndocker elasticsearch 没有 root 用户的写权限，故此需要将存储目录更改为 1000 用户。\n\n```shell\ncd /data\nmkdir -p elasticsearch/data\nmkdir -p elasticsearch/logs\nchown -R 1000 elasticsearch\nchgrp -R 1000 elasticsearch\n```\n\n**4. 启动elasticsearch**\n\ndocker-compose.yml\n\n```yml\nversion: \"3.3\"\nservices: \n   elasticsearch: \n     image: elasticsearch:7.4.2\n     container_name: elasticsearch\n     privileged: true\n     restart: always\n     environment: \n       - \"ES_JAVA_OPTS=-Xms1024m -Xmx1024m\"\n       - bootstrap.memory_lock=true\n     ulimits:\n       memlock:\n         soft: -1\n         hard: -1\n     volumes:\n       - /etc/localtime:/etc/localtime\n       - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n       - /data/elasticsearch/data:/usr/share/elasticsearch/data\n       - /data/elasticsearch/logs:/usr/share/elasticsearch/logs\n     logging:\n       driver: \"json-file\"\n       options:\n         max-size: \"10g\"\n     ports:\n       - 9200:9200\n       - 9300:9300\n     networks:\n       - cloud\nnetworks:\n  cloud:\n    external:\n      name: cloud\n```\n\n这里的 network cloud 是事先创建的，避免 docker-compose.yml 在不同目录导致网络不通。\n\n```shell\ndocker network create cloud\n```\n\n**5. 使用 X-pack 创建用户名和密码**\n\n进入 elasticsearch 容器执行\n\n```shell\n# 自动创建密码\n./bin/elasticsearch-setup-passwords auto\n\n# 手动创建密码\n./bin/elasticsearch-setup-passwords interactive\n```\n\n**6. 修改 kibana 配置文件**\n\nkibana.yml\n\n```shell\nserver.name: kibana\nserver.host: \"0\"\nelasticsearch.hosts: [ \"http://elasticsearch:9200\" ]\nxpack.monitoring.ui.container.elasticsearch.enabled: true\n\nelasticsearch.username: \"elastic username\"\nelasticsearch.password: \"elastic password\"\n```\n\n在 docker-compose.yml 中添加 kibana 相关配置\n\n```yaml\nkibana:\n  image: kibana:7.4.2\n  container_name: kibana\n  privileged: true\n  restart: always\n  ports: \n    - 5601:5601\n  environment:\n    - SERVER_NAME=kibana\n  volumes:\n    - /etc/localtime:/etc/localtime\n    - ./config/kibana.yml:/usr/share/kibana/config/kibana.yml\n  logging:\n    driver: \"json-file\"\n    options:\n      max-size: \"2g\"\n  depends_on:\n    - elasticsearch\n  networks:\n    - cloud\n```\n\n**7. 登录验证  **\n\n浏览器访问 elasticsearch (http://127.0.0.1:9200)，访问 kibana (http://127.0.0.1:5601)，如果弹出登录框，即为验证开启成功。\n\n注意，首次登录 kibana 的时候，需要使用 super 用户，也就是 elastic 这个账号，然后可以在 kibana 的 Management -> Security 中设置各种权限。\n\n**8. 在http请求中进行用户验证**\n\n和大部分数据库的 uri 访问格式一样\n\n```shell\ncurl http://elastic:password@127.0.0.1:9200\n```\n\n**9. 添加 icu 分词器插件 **\n\n进入 docker 容器执行\n\n```shell\n./bin/elasticsearch-plugin install analysis-icu\n\n# 安装完成查看是否安装成功\n./bin/elasticsearch-plugin list\n```\n\n**10. 测试分词器**\n\n在 kibana 的 Dev Tools 中执行\n\n```shell\nGET /_analyze\n{\n  \"analyzer\": \"icu_analyzer\",\n  \"text\": \"北京暴雨\"\n}\n\n# 返回数据\n{\n  \"tokens\" : [\n    {\n      \"token\" : \"北京\",\n      \"start_offset\" : 0,\n      \"end_offset\" : 2,\n      \"type\" : \"<IDEOGRAPHIC>\",\n      \"position\" : 0\n    },\n    {\n      \"token\" : \"暴雨\",\n      \"start_offset\" : 2,\n      \"end_offset\" : 4,\n      \"type\" : \"<IDEOGRAPHIC>\",\n      \"position\" : 1\n    }\n  ]\n}\n```\n\n**11. 提交新的镜像**\n\n```shell\ndocker commit -a \"mr.l\" -m \"add analysis-icu\" elasticsearch elasticsearch:7.4.2-v1.0.1\n```\n\n\n","slug":"docker-install-elastic-single-node","published":1,"updated":"2020-12-28T15:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozo00036rxi8vgde5s0","content":"<p>docker 版本19.03.2，版本 elasticsearch 版本 7.4.2，本机单节点部署。</p>\n<span id=\"more\"></span>\n\n\n<p><strong>1. 拉取镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elasticsearch:7.4.2</span><br><span class=\"line\">docker pull kibana:7.4.2</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 修改配置文件</strong></p>\n<p>elasticsearch.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster.name: &quot;single_node&quot;</span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">discovery.type: &quot;single-node&quot;</span><br><span class=\"line\">xpack.security.enabled: true</span><br><span class=\"line\">xpack.security.transport.ssl.enabled: true</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 创建elasticsearch存储目录</strong></p>\n<p>docker elasticsearch 没有 root 用户的写权限，故此需要将存储目录更改为 1000 用户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data</span><br><span class=\"line\">mkdir -p elasticsearch/data</span><br><span class=\"line\">mkdir -p elasticsearch/logs</span><br><span class=\"line\">chown -R 1000 elasticsearch</span><br><span class=\"line\">chgrp -R 1000 elasticsearch</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 启动elasticsearch</strong></p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span> </span><br><span class=\"line\">   <span class=\"attr\">elasticsearch:</span> </span><br><span class=\"line\">     <span class=\"attr\">image:</span> <span class=\"string\">elasticsearch:7.4.2</span></span><br><span class=\"line\">     <span class=\"attr\">container_name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">     <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">     <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">     <span class=\"attr\">environment:</span> </span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\">     <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">       <span class=\"attr\">memlock:</span></span><br><span class=\"line\">         <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">         <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">     <span class=\"attr\">volumes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/data/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/data/elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class=\"line\">     <span class=\"attr\">logging:</span></span><br><span class=\"line\">       <span class=\"attr\">driver:</span> <span class=\"string\">&quot;json-file&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">options:</span></span><br><span class=\"line\">         <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;10g&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ports:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">     <span class=\"attr\">networks:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">cloud</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cloud</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 network cloud 是事先创建的，避免 docker-compose.yml 在不同目录导致网络不通。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create cloud</span><br></pre></td></tr></table></figure>\n\n<p><strong>5. 使用 X-pack 创建用户名和密码</strong></p>\n<p>进入 elasticsearch 容器执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自动创建密码</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords auto</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动创建密码</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<p><strong>6. 修改 kibana 配置文件</strong></p>\n<p>kibana.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.name: kibana</span><br><span class=\"line\">server.host: &quot;0&quot;</span><br><span class=\"line\">elasticsearch.hosts: [ &quot;http://elasticsearch:9200&quot; ]</span><br><span class=\"line\">xpack.monitoring.ui.container.elasticsearch.enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\">elasticsearch.username: &quot;elastic username&quot;</span><br><span class=\"line\">elasticsearch.password: &quot;elastic password&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在 docker-compose.yml 中添加 kibana 相关配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kibana:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">kibana:7.4.2</span></span><br><span class=\"line\">  <span class=\"attr\">container_name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">  <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">5601</span><span class=\"string\">:5601</span></span><br><span class=\"line\">  <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">SERVER_NAME=kibana</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./config/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class=\"line\">  <span class=\"attr\">logging:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">&quot;json-file&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">options:</span></span><br><span class=\"line\">      <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;2g&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cloud</span></span><br></pre></td></tr></table></figure>\n\n<p>**7. 登录验证  **</p>\n<p>浏览器访问 elasticsearch (<a href=\"http://127.0.0.1:9200)，访问\">http://127.0.0.1:9200)，访问</a> kibana (<a href=\"http://127.0.0.1:5601)，如果弹出登录框，即为验证开启成功。\">http://127.0.0.1:5601)，如果弹出登录框，即为验证开启成功。</a></p>\n<p>注意，首次登录 kibana 的时候，需要使用 super 用户，也就是 elastic 这个账号，然后可以在 kibana 的 Management -&gt; Security 中设置各种权限。</p>\n<p><strong>8. 在http请求中进行用户验证</strong></p>\n<p>和大部分数据库的 uri 访问格式一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://elastic:password@127.0.0.1:9200</span><br></pre></td></tr></table></figure>\n\n<p>**9. 添加 icu 分词器插件 **</p>\n<p>进入 docker 容器执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-plugin install analysis-icu</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装完成查看是否安装成功</span></span><br><span class=\"line\">./bin/elasticsearch-plugin list</span><br></pre></td></tr></table></figure>\n\n<p><strong>10. 测试分词器</strong></p>\n<p>在 kibana 的 Dev Tools 中执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;analyzer&quot;: &quot;icu_analyzer&quot;,</span><br><span class=\"line\">  &quot;text&quot;: &quot;北京暴雨&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">返回数据</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;tokens&quot; : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;token&quot; : &quot;北京&quot;,</span><br><span class=\"line\">      &quot;start_offset&quot; : 0,</span><br><span class=\"line\">      &quot;end_offset&quot; : 2,</span><br><span class=\"line\">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class=\"line\">      &quot;position&quot; : 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;token&quot; : &quot;暴雨&quot;,</span><br><span class=\"line\">      &quot;start_offset&quot; : 2,</span><br><span class=\"line\">      &quot;end_offset&quot; : 4,</span><br><span class=\"line\">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class=\"line\">      &quot;position&quot; : 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>11. 提交新的镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -a &quot;mr.l&quot; -m &quot;add analysis-icu&quot; elasticsearch elasticsearch:7.4.2-v1.0.1</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<p>docker 版本19.03.2，版本 elasticsearch 版本 7.4.2，本机单节点部署。</p>","more":"<p><strong>1. 拉取镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elasticsearch:7.4.2</span><br><span class=\"line\">docker pull kibana:7.4.2</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 修改配置文件</strong></p>\n<p>elasticsearch.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster.name: &quot;single_node&quot;</span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">discovery.type: &quot;single-node&quot;</span><br><span class=\"line\">xpack.security.enabled: true</span><br><span class=\"line\">xpack.security.transport.ssl.enabled: true</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 创建elasticsearch存储目录</strong></p>\n<p>docker elasticsearch 没有 root 用户的写权限，故此需要将存储目录更改为 1000 用户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /data</span><br><span class=\"line\">mkdir -p elasticsearch/data</span><br><span class=\"line\">mkdir -p elasticsearch/logs</span><br><span class=\"line\">chown -R 1000 elasticsearch</span><br><span class=\"line\">chgrp -R 1000 elasticsearch</span><br></pre></td></tr></table></figure>\n\n<p><strong>4. 启动elasticsearch</strong></p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span> </span><br><span class=\"line\">   <span class=\"attr\">elasticsearch:</span> </span><br><span class=\"line\">     <span class=\"attr\">image:</span> <span class=\"string\">elasticsearch:7.4.2</span></span><br><span class=\"line\">     <span class=\"attr\">container_name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">     <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">     <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">     <span class=\"attr\">environment:</span> </span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\">     <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">       <span class=\"attr\">memlock:</span></span><br><span class=\"line\">         <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">         <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">     <span class=\"attr\">volumes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/data/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/data/elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class=\"line\">     <span class=\"attr\">logging:</span></span><br><span class=\"line\">       <span class=\"attr\">driver:</span> <span class=\"string\">&quot;json-file&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">options:</span></span><br><span class=\"line\">         <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;10g&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ports:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">     <span class=\"attr\">networks:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">cloud</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cloud</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的 network cloud 是事先创建的，避免 docker-compose.yml 在不同目录导致网络不通。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create cloud</span><br></pre></td></tr></table></figure>\n\n<p><strong>5. 使用 X-pack 创建用户名和密码</strong></p>\n<p>进入 elasticsearch 容器执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自动创建密码</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords auto</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">手动创建密码</span></span><br><span class=\"line\">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<p><strong>6. 修改 kibana 配置文件</strong></p>\n<p>kibana.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.name: kibana</span><br><span class=\"line\">server.host: &quot;0&quot;</span><br><span class=\"line\">elasticsearch.hosts: [ &quot;http://elasticsearch:9200&quot; ]</span><br><span class=\"line\">xpack.monitoring.ui.container.elasticsearch.enabled: true</span><br><span class=\"line\"></span><br><span class=\"line\">elasticsearch.username: &quot;elastic username&quot;</span><br><span class=\"line\">elasticsearch.password: &quot;elastic password&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在 docker-compose.yml 中添加 kibana 相关配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kibana:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">kibana:7.4.2</span></span><br><span class=\"line\">  <span class=\"attr\">container_name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">  <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">5601</span><span class=\"string\">:5601</span></span><br><span class=\"line\">  <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">SERVER_NAME=kibana</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./config/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br><span class=\"line\">  <span class=\"attr\">logging:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">&quot;json-file&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">options:</span></span><br><span class=\"line\">      <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;2g&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">  <span class=\"attr\">networks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cloud</span></span><br></pre></td></tr></table></figure>\n\n<p>**7. 登录验证  **</p>\n<p>浏览器访问 elasticsearch (<a href=\"http://127.0.0.1:9200)，访问\">http://127.0.0.1:9200)，访问</a> kibana (<a href=\"http://127.0.0.1:5601)，如果弹出登录框，即为验证开启成功。\">http://127.0.0.1:5601)，如果弹出登录框，即为验证开启成功。</a></p>\n<p>注意，首次登录 kibana 的时候，需要使用 super 用户，也就是 elastic 这个账号，然后可以在 kibana 的 Management -&gt; Security 中设置各种权限。</p>\n<p><strong>8. 在http请求中进行用户验证</strong></p>\n<p>和大部分数据库的 uri 访问格式一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://elastic:password@127.0.0.1:9200</span><br></pre></td></tr></table></figure>\n\n<p>**9. 添加 icu 分词器插件 **</p>\n<p>进入 docker 容器执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/elasticsearch-plugin install analysis-icu</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装完成查看是否安装成功</span></span><br><span class=\"line\">./bin/elasticsearch-plugin list</span><br></pre></td></tr></table></figure>\n\n<p><strong>10. 测试分词器</strong></p>\n<p>在 kibana 的 Dev Tools 中执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;analyzer&quot;: &quot;icu_analyzer&quot;,</span><br><span class=\"line\">  &quot;text&quot;: &quot;北京暴雨&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">返回数据</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;tokens&quot; : [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;token&quot; : &quot;北京&quot;,</span><br><span class=\"line\">      &quot;start_offset&quot; : 0,</span><br><span class=\"line\">      &quot;end_offset&quot; : 2,</span><br><span class=\"line\">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class=\"line\">      &quot;position&quot; : 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;token&quot; : &quot;暴雨&quot;,</span><br><span class=\"line\">      &quot;start_offset&quot; : 2,</span><br><span class=\"line\">      &quot;end_offset&quot; : 4,</span><br><span class=\"line\">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class=\"line\">      &quot;position&quot; : 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>11. 提交新的镜像</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -a &quot;mr.l&quot; -m &quot;add analysis-icu&quot; elasticsearch elasticsearch:7.4.2-v1.0.1</span><br></pre></td></tr></table></figure>"},{"title":"ElasticSearch生命周期冷热问题","abbrlink":"289c52a7","_content":"\n集群的 SSD 磁盘满了，elasticsearch hot 节点的数据没有自动迁移到 warm 节点，导致写入数据失败，集群变红，问题很严重。\n\n\n<!-- more -->\n\n\n#### 临时解决\n\n只留最新的那个索引保持`hot`状态，其他的`hot`节点手动改成`warm`。\n\n```shell\nPUT data-flow-000001/_settings\n{\n  \"index\": {\n    \"routing\": {\n      \"allocation\": {\n        \"require\": {\n          \"data_type\" : \"warm\"\n        }\n      }\n    }\n  }\n}\n```\n\n通过执行查看分片命令`GET _cat/shards/data-flow-000001`，可以看到数据正在节点之间迁移\n\n```shell\ndata-flow-000001 8  r RELOCATING 834716   6gb 10.11.10.10 es-d01 -> 10.11.10.21 uysX9r9oRsKkaFFQMLbDPw es-d11\ndata-flow-000001 8  p RELOCATING 834716   6gb 10.11.10.11 es-d02 -> 10.11.10.22 GyGJx-iJS0S_VEaxlWXlLg es-d12\ndata-flow-000001 5  p RELOCATING 832768   6gb 10.11.10.12 es-d03 -> 10.11.10.23 uysX9r9oRsKkaFFQMLbDPw es-d13\n...\n```\n\n数据迁移需要时间，在SSD释放一部分空间之后，集群很快就会变绿。\n\n#### 问题溯源\n\n手动解决之后，就要来看一下之前定的生命周期策略为什么没有生效了。在`kabana`上，虽然开启了`hot`配置，但是在选择节点属性来控制分片分配处，并没有做出正确的选择，导致虽然看似开启了`hot -> warm`的配置，其实没有起到作用。\n\n![image-20210804175832490](/images/image-20210804175832490.png)\n\n经测试，正确的选择是\n\n![image-20210804175909528](/images/image-20210804175909528.png)\n\n调整后的生命周期文件如下:\n\n```shell\nPUT _ilm/policy/my_lifecycle\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"min_age\": \"1m\",\n        \"actions\": {\n          \"rollover\": {\n            \"max_age\": \"180d\",\n            \"max_size\": \"240gb\",\n            \"max_docs\": 10000000\n          },\n          \"set_priority\": {\n            \"priority\": 100\n          }\n        }\n      },\n      \"warm\": {\n        \"actions\": {\n          \"allocate\": {\n            \"require\": {\n              \"data_type\": \"warm\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n","source":"_posts/elastic-search-hot-warm.md","raw":"---\ntitle: ElasticSearch生命周期冷热问题\ntags:\n  - docker\n  - elasticsearch\nabbrlink: 289c52a7\n---\n\n集群的 SSD 磁盘满了，elasticsearch hot 节点的数据没有自动迁移到 warm 节点，导致写入数据失败，集群变红，问题很严重。\n\n\n<!-- more -->\n\n\n#### 临时解决\n\n只留最新的那个索引保持`hot`状态，其他的`hot`节点手动改成`warm`。\n\n```shell\nPUT data-flow-000001/_settings\n{\n  \"index\": {\n    \"routing\": {\n      \"allocation\": {\n        \"require\": {\n          \"data_type\" : \"warm\"\n        }\n      }\n    }\n  }\n}\n```\n\n通过执行查看分片命令`GET _cat/shards/data-flow-000001`，可以看到数据正在节点之间迁移\n\n```shell\ndata-flow-000001 8  r RELOCATING 834716   6gb 10.11.10.10 es-d01 -> 10.11.10.21 uysX9r9oRsKkaFFQMLbDPw es-d11\ndata-flow-000001 8  p RELOCATING 834716   6gb 10.11.10.11 es-d02 -> 10.11.10.22 GyGJx-iJS0S_VEaxlWXlLg es-d12\ndata-flow-000001 5  p RELOCATING 832768   6gb 10.11.10.12 es-d03 -> 10.11.10.23 uysX9r9oRsKkaFFQMLbDPw es-d13\n...\n```\n\n数据迁移需要时间，在SSD释放一部分空间之后，集群很快就会变绿。\n\n#### 问题溯源\n\n手动解决之后，就要来看一下之前定的生命周期策略为什么没有生效了。在`kabana`上，虽然开启了`hot`配置，但是在选择节点属性来控制分片分配处，并没有做出正确的选择，导致虽然看似开启了`hot -> warm`的配置，其实没有起到作用。\n\n![image-20210804175832490](/images/image-20210804175832490.png)\n\n经测试，正确的选择是\n\n![image-20210804175909528](/images/image-20210804175909528.png)\n\n调整后的生命周期文件如下:\n\n```shell\nPUT _ilm/policy/my_lifecycle\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"min_age\": \"1m\",\n        \"actions\": {\n          \"rollover\": {\n            \"max_age\": \"180d\",\n            \"max_size\": \"240gb\",\n            \"max_docs\": 10000000\n          },\n          \"set_priority\": {\n            \"priority\": 100\n          }\n        }\n      },\n      \"warm\": {\n        \"actions\": {\n          \"allocate\": {\n            \"require\": {\n              \"data_type\": \"warm\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n","slug":"elastic-search-hot-warm","published":1,"date":"2022-04-06T07:48:55.318Z","updated":"2021-08-04T10:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozp00046rxih081gu7e","content":"<p>集群的 SSD 磁盘满了，elasticsearch hot 节点的数据没有自动迁移到 warm 节点，导致写入数据失败，集群变红，问题很严重。</p>\n<span id=\"more\"></span>\n\n\n<h4 id=\"临时解决\"><a href=\"#临时解决\" class=\"headerlink\" title=\"临时解决\"></a>临时解决</h4><p>只留最新的那个索引保持<code>hot</code>状态，其他的<code>hot</code>节点手动改成<code>warm</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT data-flow-000001/_settings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;index&quot;: &#123;</span><br><span class=\"line\">    &quot;routing&quot;: &#123;</span><br><span class=\"line\">      &quot;allocation&quot;: &#123;</span><br><span class=\"line\">        &quot;require&quot;: &#123;</span><br><span class=\"line\">          &quot;data_type&quot; : &quot;warm&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过执行查看分片命令<code>GET _cat/shards/data-flow-000001</code>，可以看到数据正在节点之间迁移</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data-flow-000001 8  r RELOCATING 834716   6gb 10.11.10.10 es-d01 -&gt; 10.11.10.21 uysX9r9oRsKkaFFQMLbDPw es-d11</span><br><span class=\"line\">data-flow-000001 8  p RELOCATING 834716   6gb 10.11.10.11 es-d02 -&gt; 10.11.10.22 GyGJx-iJS0S_VEaxlWXlLg es-d12</span><br><span class=\"line\">data-flow-000001 5  p RELOCATING 832768   6gb 10.11.10.12 es-d03 -&gt; 10.11.10.23 uysX9r9oRsKkaFFQMLbDPw es-d13</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>数据迁移需要时间，在SSD释放一部分空间之后，集群很快就会变绿。</p>\n<h4 id=\"问题溯源\"><a href=\"#问题溯源\" class=\"headerlink\" title=\"问题溯源\"></a>问题溯源</h4><p>手动解决之后，就要来看一下之前定的生命周期策略为什么没有生效了。在<code>kabana</code>上，虽然开启了<code>hot</code>配置，但是在选择节点属性来控制分片分配处，并没有做出正确的选择，导致虽然看似开启了<code>hot -&gt; warm</code>的配置，其实没有起到作用。</p>\n<p><img src=\"/images/image-20210804175832490.png\" alt=\"image-20210804175832490\"></p>\n<p>经测试，正确的选择是</p>\n<p><img src=\"/images/image-20210804175909528.png\" alt=\"image-20210804175909528\"></p>\n<p>调整后的生命周期文件如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT _ilm/policy/my_lifecycle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;policy&quot;: &#123;</span><br><span class=\"line\">    &quot;phases&quot;: &#123;</span><br><span class=\"line\">      &quot;hot&quot;: &#123;</span><br><span class=\"line\">        &quot;min_age&quot;: &quot;1m&quot;,</span><br><span class=\"line\">        &quot;actions&quot;: &#123;</span><br><span class=\"line\">          &quot;rollover&quot;: &#123;</span><br><span class=\"line\">            &quot;max_age&quot;: &quot;180d&quot;,</span><br><span class=\"line\">            &quot;max_size&quot;: &quot;240gb&quot;,</span><br><span class=\"line\">            &quot;max_docs&quot;: 10000000</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &quot;set_priority&quot;: &#123;</span><br><span class=\"line\">            &quot;priority&quot;: 100</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;warm&quot;: &#123;</span><br><span class=\"line\">        &quot;actions&quot;: &#123;</span><br><span class=\"line\">          &quot;allocate&quot;: &#123;</span><br><span class=\"line\">            &quot;require&quot;: &#123;</span><br><span class=\"line\">              &quot;data_type&quot;: &quot;warm&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>集群的 SSD 磁盘满了，elasticsearch hot 节点的数据没有自动迁移到 warm 节点，导致写入数据失败，集群变红，问题很严重。</p>","more":"<h4 id=\"临时解决\"><a href=\"#临时解决\" class=\"headerlink\" title=\"临时解决\"></a>临时解决</h4><p>只留最新的那个索引保持<code>hot</code>状态，其他的<code>hot</code>节点手动改成<code>warm</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT data-flow-000001/_settings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;index&quot;: &#123;</span><br><span class=\"line\">    &quot;routing&quot;: &#123;</span><br><span class=\"line\">      &quot;allocation&quot;: &#123;</span><br><span class=\"line\">        &quot;require&quot;: &#123;</span><br><span class=\"line\">          &quot;data_type&quot; : &quot;warm&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过执行查看分片命令<code>GET _cat/shards/data-flow-000001</code>，可以看到数据正在节点之间迁移</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data-flow-000001 8  r RELOCATING 834716   6gb 10.11.10.10 es-d01 -&gt; 10.11.10.21 uysX9r9oRsKkaFFQMLbDPw es-d11</span><br><span class=\"line\">data-flow-000001 8  p RELOCATING 834716   6gb 10.11.10.11 es-d02 -&gt; 10.11.10.22 GyGJx-iJS0S_VEaxlWXlLg es-d12</span><br><span class=\"line\">data-flow-000001 5  p RELOCATING 832768   6gb 10.11.10.12 es-d03 -&gt; 10.11.10.23 uysX9r9oRsKkaFFQMLbDPw es-d13</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>数据迁移需要时间，在SSD释放一部分空间之后，集群很快就会变绿。</p>\n<h4 id=\"问题溯源\"><a href=\"#问题溯源\" class=\"headerlink\" title=\"问题溯源\"></a>问题溯源</h4><p>手动解决之后，就要来看一下之前定的生命周期策略为什么没有生效了。在<code>kabana</code>上，虽然开启了<code>hot</code>配置，但是在选择节点属性来控制分片分配处，并没有做出正确的选择，导致虽然看似开启了<code>hot -&gt; warm</code>的配置，其实没有起到作用。</p>\n<p><img src=\"/images/image-20210804175832490.png\" alt=\"image-20210804175832490\"></p>\n<p>经测试，正确的选择是</p>\n<p><img src=\"/images/image-20210804175909528.png\" alt=\"image-20210804175909528\"></p>\n<p>调整后的生命周期文件如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT _ilm/policy/my_lifecycle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;policy&quot;: &#123;</span><br><span class=\"line\">    &quot;phases&quot;: &#123;</span><br><span class=\"line\">      &quot;hot&quot;: &#123;</span><br><span class=\"line\">        &quot;min_age&quot;: &quot;1m&quot;,</span><br><span class=\"line\">        &quot;actions&quot;: &#123;</span><br><span class=\"line\">          &quot;rollover&quot;: &#123;</span><br><span class=\"line\">            &quot;max_age&quot;: &quot;180d&quot;,</span><br><span class=\"line\">            &quot;max_size&quot;: &quot;240gb&quot;,</span><br><span class=\"line\">            &quot;max_docs&quot;: 10000000</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &quot;set_priority&quot;: &#123;</span><br><span class=\"line\">            &quot;priority&quot;: 100</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;warm&quot;: &#123;</span><br><span class=\"line\">        &quot;actions&quot;: &#123;</span><br><span class=\"line\">          &quot;allocate&quot;: &#123;</span><br><span class=\"line\">            &quot;require&quot;: &#123;</span><br><span class=\"line\">              &quot;data_type&quot;: &quot;warm&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"搭建一个简单的 ElasticSearch 集群","abbrlink":"da97202b","date":"2020-12-28T04:06:46.000Z","_content":"\n这里以docker的方式，搭建3个节点的最小集群，未涉及到生命周期，冷热数据等，elasticsearch 版本 7.4.2。\n\n<!-- more -->\n\n| 机器名称 | IP地址       |\n| -------- | ------------ |\n| node1    | 192.168.10.1 |\n| node2    | 192.168.10.2 |\n| node3    | 192.168.10.3 |\n\n#### 身份认证与鉴权\n\n为了保护 elasticsearch 的数据安全，需要配置 elasticsearch 的用户密码和角色权限；为了保护集群内部的通信安全，需要配置集群节点的数字证书。\n\n先启动一个 elasticsearch 节点，来创建用户密码和证书。\n\nelasticsearch.yml 初步配置\n\n```yaml\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.1\nnode.name: \"node1\"\ncluster.initial_master_nodes: [\"node1\"]\n```\n\n启动 elasticsearch，进入 elasticsearch目录。\n\n创建用户密码\n\n```shell\nbin/elasticsearch-setup-passwords interactive\n```\n\n创建一个证书颁发机构\n\n```\nbin/elasticsearch-certutil ca\n```\n\n默认情况下会在当前目录生成一个 elastic-stack-ca.p12 文件，然后使用这个文件创建一个私有证书。\n\n```\nbin/elasticsearch-certutil cert --ca elastic-stack-ca.p12\n```\n\n默认情况下会在当前目录生成一个 elastic-certificates.p12 的文件，将这两个文件拷贝出来，elastic-stack-ca.p12 文件妥善保管，\n\n而 elastic-certificates.p12 文件即为鉴权证书，如果节点没有此证书，则其不会加入集群。\n\n#### 节点1\n\n在 elasticsearch 的 config 目录下创建 cert 目录，然后将 elastic-certificates.p12 文件拷贝到 cert 目录中。\n\n修改 elasticsearch.yml，添加身份认证部分配置，重新启动 elasticsearch。\n\nelasticsearch.yml 配置文件：\n\n```yaml\n# node1 config\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.1\nnode.name: \"node1\"\ncluster.initial_master_nodes: [\"node1\"]\ndiscovery.seed_hosts: [\"192.168.10.1\", \"192.168.10.2\", \"192.168.10.3\"]\n\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: cert/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: cert/elastic-certificates.p12\n```\n\n*1.* cluster.initial_master_nodes 初始化 master 节点配置只能是一个 elasticsearch master 节点有此配置。\n\n*2.* network.publish_host 的默认值是 127.0.0.1，所以这里必须要配置 network.publish_host 为当前机器的主机IP，否则不会被其他节点发现。\n\n因为在三台机器上，所以三个 elasticsearch 的 docker-compose.yml 可以完全相同。\n\n```yaml\nversion: \"3.3\"\nservices: \n   elastic-node1:\n     image: elasticsearch:7.4.2\n     container_name: elastic-node1\n     privileged: true\n     restart: always\n     environment: \n       - \"ES_JAVA_OPTS=-Xms8g -Xmx8g\"\n       - bootstrap.memory_lock=true\n     ulimits:\n       memlock:\n         soft: -1\n         hard: -1\n     volumes:\n       - /etc/localtime:/etc/localtime\n       - ./config/cert:/usr/share/elasticsearch/config/cert\n       - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n       - /home/data/elastic/:/usr/share/elasticsearch/data\n       - /home/data/elastic/logs:/usr/share/elasticsearch/logs\n     logging:\n       driver: \"json-file\"\n       options:\n         max-size: \"10g\"\n     ports:\n       - 9200:9200\n       - 9300:9300\n     networks:\n       - cloud\nnetworks:\n  cloud:\n    external:\n      name: cloud\n```\n\n#### 节点2\n\nelasticsearch.yml\n\n```yaml\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.2\nnode.name: \"node2\"\nnode.master: false\ndiscovery.seed_hosts: [\"192.168.10.1:9300\", \"192.168.10.2:9300\", \"192.168.10.3:9300\"]\n\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: cert/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: cert/elastic-certificates.p12\n```\n\n#### 节点3\n\n```yaml\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.3\nnode.name: \"node3\"\ndiscovery.seed_hosts: [\"192.168.10.1\", \"192.168.10.2\", \"192.168.10.3\"]\n\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: cert/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: cert/elastic-certificates.p12\n```\n\n在三台机器的 elasticsearch 都启动之后，可以在浏览器中访问 http://192.168.10.1:9200/_cat/nodes 查询集群的节点情况，正常情况下会显示如下：\n\n```\n192.168.10.1 52 89 1 0.33 0.34 0.32 dilm * node1\n192.168.10.2 49 82 0 0.37 0.35 0.35 dil  - node2\n192.168.10.3 55 95 1 0.24 0.28 0.30 dilm - node3\n```\n\n如果显示的不是 3 行，那么集群就没有搭建成功。\n\n","source":"_posts/elasticsearch-cluster-lite-deploy.md","raw":"---\ntitle: 搭建一个简单的 ElasticSearch 集群\ntags:\n  - elasticsearch\n  - docker\nabbrlink: da97202b\ndate: 2020-12-28 12:06:46\n---\n\n这里以docker的方式，搭建3个节点的最小集群，未涉及到生命周期，冷热数据等，elasticsearch 版本 7.4.2。\n\n<!-- more -->\n\n| 机器名称 | IP地址       |\n| -------- | ------------ |\n| node1    | 192.168.10.1 |\n| node2    | 192.168.10.2 |\n| node3    | 192.168.10.3 |\n\n#### 身份认证与鉴权\n\n为了保护 elasticsearch 的数据安全，需要配置 elasticsearch 的用户密码和角色权限；为了保护集群内部的通信安全，需要配置集群节点的数字证书。\n\n先启动一个 elasticsearch 节点，来创建用户密码和证书。\n\nelasticsearch.yml 初步配置\n\n```yaml\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.1\nnode.name: \"node1\"\ncluster.initial_master_nodes: [\"node1\"]\n```\n\n启动 elasticsearch，进入 elasticsearch目录。\n\n创建用户密码\n\n```shell\nbin/elasticsearch-setup-passwords interactive\n```\n\n创建一个证书颁发机构\n\n```\nbin/elasticsearch-certutil ca\n```\n\n默认情况下会在当前目录生成一个 elastic-stack-ca.p12 文件，然后使用这个文件创建一个私有证书。\n\n```\nbin/elasticsearch-certutil cert --ca elastic-stack-ca.p12\n```\n\n默认情况下会在当前目录生成一个 elastic-certificates.p12 的文件，将这两个文件拷贝出来，elastic-stack-ca.p12 文件妥善保管，\n\n而 elastic-certificates.p12 文件即为鉴权证书，如果节点没有此证书，则其不会加入集群。\n\n#### 节点1\n\n在 elasticsearch 的 config 目录下创建 cert 目录，然后将 elastic-certificates.p12 文件拷贝到 cert 目录中。\n\n修改 elasticsearch.yml，添加身份认证部分配置，重新启动 elasticsearch。\n\nelasticsearch.yml 配置文件：\n\n```yaml\n# node1 config\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.1\nnode.name: \"node1\"\ncluster.initial_master_nodes: [\"node1\"]\ndiscovery.seed_hosts: [\"192.168.10.1\", \"192.168.10.2\", \"192.168.10.3\"]\n\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: cert/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: cert/elastic-certificates.p12\n```\n\n*1.* cluster.initial_master_nodes 初始化 master 节点配置只能是一个 elasticsearch master 节点有此配置。\n\n*2.* network.publish_host 的默认值是 127.0.0.1，所以这里必须要配置 network.publish_host 为当前机器的主机IP，否则不会被其他节点发现。\n\n因为在三台机器上，所以三个 elasticsearch 的 docker-compose.yml 可以完全相同。\n\n```yaml\nversion: \"3.3\"\nservices: \n   elastic-node1:\n     image: elasticsearch:7.4.2\n     container_name: elastic-node1\n     privileged: true\n     restart: always\n     environment: \n       - \"ES_JAVA_OPTS=-Xms8g -Xmx8g\"\n       - bootstrap.memory_lock=true\n     ulimits:\n       memlock:\n         soft: -1\n         hard: -1\n     volumes:\n       - /etc/localtime:/etc/localtime\n       - ./config/cert:/usr/share/elasticsearch/config/cert\n       - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml\n       - /home/data/elastic/:/usr/share/elasticsearch/data\n       - /home/data/elastic/logs:/usr/share/elasticsearch/logs\n     logging:\n       driver: \"json-file\"\n       options:\n         max-size: \"10g\"\n     ports:\n       - 9200:9200\n       - 9300:9300\n     networks:\n       - cloud\nnetworks:\n  cloud:\n    external:\n      name: cloud\n```\n\n#### 节点2\n\nelasticsearch.yml\n\n```yaml\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.2\nnode.name: \"node2\"\nnode.master: false\ndiscovery.seed_hosts: [\"192.168.10.1:9300\", \"192.168.10.2:9300\", \"192.168.10.3:9300\"]\n\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: cert/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: cert/elastic-certificates.p12\n```\n\n#### 节点3\n\n```yaml\ncluster.name: \"elastic\"\nnetwork.host: 0.0.0.0\nnetwork.publish_host: 192.168.10.3\nnode.name: \"node3\"\ndiscovery.seed_hosts: [\"192.168.10.1\", \"192.168.10.2\", \"192.168.10.3\"]\n\nxpack.security.enabled: true\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate\nxpack.security.transport.ssl.keystore.path: cert/elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: cert/elastic-certificates.p12\n```\n\n在三台机器的 elasticsearch 都启动之后，可以在浏览器中访问 http://192.168.10.1:9200/_cat/nodes 查询集群的节点情况，正常情况下会显示如下：\n\n```\n192.168.10.1 52 89 1 0.33 0.34 0.32 dilm * node1\n192.168.10.2 49 82 0 0.37 0.35 0.35 dil  - node2\n192.168.10.3 55 95 1 0.24 0.28 0.30 dilm - node3\n```\n\n如果显示的不是 3 行，那么集群就没有搭建成功。\n\n","slug":"elasticsearch-cluster-lite-deploy","published":1,"updated":"2020-12-28T15:46:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozs00066rxicro88anw","content":"<p>这里以docker的方式，搭建3个节点的最小集群，未涉及到生命周期，冷热数据等，elasticsearch 版本 7.4.2。</p>\n<span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th>机器名称</th>\n<th>IP地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>node1</td>\n<td>192.168.10.1</td>\n</tr>\n<tr>\n<td>node2</td>\n<td>192.168.10.2</td>\n</tr>\n<tr>\n<td>node3</td>\n<td>192.168.10.3</td>\n</tr>\n</tbody></table>\n<h4 id=\"身份认证与鉴权\"><a href=\"#身份认证与鉴权\" class=\"headerlink\" title=\"身份认证与鉴权\"></a>身份认证与鉴权</h4><p>为了保护 elasticsearch 的数据安全，需要配置 elasticsearch 的用户密码和角色权限；为了保护集群内部的通信安全，需要配置集群节点的数字证书。</p>\n<p>先启动一个 elasticsearch 节点，来创建用户密码和证书。</p>\n<p>elasticsearch.yml 初步配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;node1&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>启动 elasticsearch，进入 elasticsearch目录。</p>\n<p>创建用户密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<p>创建一个证书颁发机构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-certutil ca</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下会在当前目录生成一个 elastic-stack-ca.p12 文件，然后使用这个文件创建一个私有证书。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下会在当前目录生成一个 elastic-certificates.p12 的文件，将这两个文件拷贝出来，elastic-stack-ca.p12 文件妥善保管，</p>\n<p>而 elastic-certificates.p12 文件即为鉴权证书，如果节点没有此证书，则其不会加入集群。</p>\n<h4 id=\"节点1\"><a href=\"#节点1\" class=\"headerlink\" title=\"节点1\"></a>节点1</h4><p>在 elasticsearch 的 config 目录下创建 cert 目录，然后将 elastic-certificates.p12 文件拷贝到 cert 目录中。</p>\n<p>修改 elasticsearch.yml，添加身份认证部分配置，重新启动 elasticsearch。</p>\n<p>elasticsearch.yml 配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node1 config</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;node1&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.10.1&quot;</span>, <span class=\"string\">&quot;192.168.10.2&quot;</span>, <span class=\"string\">&quot;192.168.10.3&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<p><em>1.</em> cluster.initial_master_nodes 初始化 master 节点配置只能是一个 elasticsearch master 节点有此配置。</p>\n<p><em>2.</em> network.publish_host 的默认值是 127.0.0.1，所以这里必须要配置 network.publish_host 为当前机器的主机IP，否则不会被其他节点发现。</p>\n<p>因为在三台机器上，所以三个 elasticsearch 的 docker-compose.yml 可以完全相同。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span> </span><br><span class=\"line\">   <span class=\"attr\">elastic-node1:</span></span><br><span class=\"line\">     <span class=\"attr\">image:</span> <span class=\"string\">elasticsearch:7.4.2</span></span><br><span class=\"line\">     <span class=\"attr\">container_name:</span> <span class=\"string\">elastic-node1</span></span><br><span class=\"line\">     <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">     <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">     <span class=\"attr\">environment:</span> </span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms8g -Xmx8g&quot;</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\">     <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">       <span class=\"attr\">memlock:</span></span><br><span class=\"line\">         <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">         <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">     <span class=\"attr\">volumes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">./config/cert:/usr/share/elasticsearch/config/cert</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/home/data/elastic/:/usr/share/elasticsearch/data</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/home/data/elastic/logs:/usr/share/elasticsearch/logs</span></span><br><span class=\"line\">     <span class=\"attr\">logging:</span></span><br><span class=\"line\">       <span class=\"attr\">driver:</span> <span class=\"string\">&quot;json-file&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">options:</span></span><br><span class=\"line\">         <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;10g&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ports:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">     <span class=\"attr\">networks:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">cloud</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cloud</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点2\"><a href=\"#节点2\" class=\"headerlink\" title=\"节点2\"></a>节点2</h4><p>elasticsearch.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node2&quot;</span></span><br><span class=\"line\"><span class=\"attr\">node.master:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.10.1:9300&quot;</span>, <span class=\"string\">&quot;192.168.10.2:9300&quot;</span>, <span class=\"string\">&quot;192.168.10.3:9300&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点3\"><a href=\"#节点3\" class=\"headerlink\" title=\"节点3\"></a>节点3</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.10.1&quot;</span>, <span class=\"string\">&quot;192.168.10.2&quot;</span>, <span class=\"string\">&quot;192.168.10.3&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<p>在三台机器的 elasticsearch 都启动之后，可以在浏览器中访问 <a href=\"http://192.168.10.1:9200/_cat/nodes\">http://192.168.10.1:9200/_cat/nodes</a> 查询集群的节点情况，正常情况下会显示如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.10.1 52 89 1 0.33 0.34 0.32 dilm * node1</span><br><span class=\"line\">192.168.10.2 49 82 0 0.37 0.35 0.35 dil  - node2</span><br><span class=\"line\">192.168.10.3 55 95 1 0.24 0.28 0.30 dilm - node3</span><br></pre></td></tr></table></figure>\n\n<p>如果显示的不是 3 行，那么集群就没有搭建成功。</p>\n","site":{"data":{}},"excerpt":"<p>这里以docker的方式，搭建3个节点的最小集群，未涉及到生命周期，冷热数据等，elasticsearch 版本 7.4.2。</p>","more":"<table>\n<thead>\n<tr>\n<th>机器名称</th>\n<th>IP地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>node1</td>\n<td>192.168.10.1</td>\n</tr>\n<tr>\n<td>node2</td>\n<td>192.168.10.2</td>\n</tr>\n<tr>\n<td>node3</td>\n<td>192.168.10.3</td>\n</tr>\n</tbody></table>\n<h4 id=\"身份认证与鉴权\"><a href=\"#身份认证与鉴权\" class=\"headerlink\" title=\"身份认证与鉴权\"></a>身份认证与鉴权</h4><p>为了保护 elasticsearch 的数据安全，需要配置 elasticsearch 的用户密码和角色权限；为了保护集群内部的通信安全，需要配置集群节点的数字证书。</p>\n<p>先启动一个 elasticsearch 节点，来创建用户密码和证书。</p>\n<p>elasticsearch.yml 初步配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;node1&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>启动 elasticsearch，进入 elasticsearch目录。</p>\n<p>创建用户密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>\n\n<p>创建一个证书颁发机构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-certutil ca</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下会在当前目录生成一个 elastic-stack-ca.p12 文件，然后使用这个文件创建一个私有证书。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下会在当前目录生成一个 elastic-certificates.p12 的文件，将这两个文件拷贝出来，elastic-stack-ca.p12 文件妥善保管，</p>\n<p>而 elastic-certificates.p12 文件即为鉴权证书，如果节点没有此证书，则其不会加入集群。</p>\n<h4 id=\"节点1\"><a href=\"#节点1\" class=\"headerlink\" title=\"节点1\"></a>节点1</h4><p>在 elasticsearch 的 config 目录下创建 cert 目录，然后将 elastic-certificates.p12 文件拷贝到 cert 目录中。</p>\n<p>修改 elasticsearch.yml，添加身份认证部分配置，重新启动 elasticsearch。</p>\n<p>elasticsearch.yml 配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node1 config</span></span><br><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">cluster.initial_master_nodes:</span> [<span class=\"string\">&quot;node1&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.10.1&quot;</span>, <span class=\"string\">&quot;192.168.10.2&quot;</span>, <span class=\"string\">&quot;192.168.10.3&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<p><em>1.</em> cluster.initial_master_nodes 初始化 master 节点配置只能是一个 elasticsearch master 节点有此配置。</p>\n<p><em>2.</em> network.publish_host 的默认值是 127.0.0.1，所以这里必须要配置 network.publish_host 为当前机器的主机IP，否则不会被其他节点发现。</p>\n<p>因为在三台机器上，所以三个 elasticsearch 的 docker-compose.yml 可以完全相同。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span> </span><br><span class=\"line\">   <span class=\"attr\">elastic-node1:</span></span><br><span class=\"line\">     <span class=\"attr\">image:</span> <span class=\"string\">elasticsearch:7.4.2</span></span><br><span class=\"line\">     <span class=\"attr\">container_name:</span> <span class=\"string\">elastic-node1</span></span><br><span class=\"line\">     <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">     <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">     <span class=\"attr\">environment:</span> </span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms8g -Xmx8g&quot;</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\">     <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">       <span class=\"attr\">memlock:</span></span><br><span class=\"line\">         <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">         <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">     <span class=\"attr\">volumes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">./config/cert:/usr/share/elasticsearch/config/cert</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/home/data/elastic/:/usr/share/elasticsearch/data</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">/home/data/elastic/logs:/usr/share/elasticsearch/logs</span></span><br><span class=\"line\">     <span class=\"attr\">logging:</span></span><br><span class=\"line\">       <span class=\"attr\">driver:</span> <span class=\"string\">&quot;json-file&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">options:</span></span><br><span class=\"line\">         <span class=\"attr\">max-size:</span> <span class=\"string\">&quot;10g&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">ports:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">     <span class=\"attr\">networks:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">cloud</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cloud</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点2\"><a href=\"#节点2\" class=\"headerlink\" title=\"节点2\"></a>节点2</h4><p>elasticsearch.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node2&quot;</span></span><br><span class=\"line\"><span class=\"attr\">node.master:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.10.1:9300&quot;</span>, <span class=\"string\">&quot;192.168.10.2:9300&quot;</span>, <span class=\"string\">&quot;192.168.10.3:9300&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"节点3\"><a href=\"#节点3\" class=\"headerlink\" title=\"节点3\"></a>节点3</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cluster.name:</span> <span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"><span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">network.publish_host:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.3</span></span><br><span class=\"line\"><span class=\"attr\">node.name:</span> <span class=\"string\">&quot;node3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;192.168.10.1&quot;</span>, <span class=\"string\">&quot;192.168.10.2&quot;</span>, <span class=\"string\">&quot;192.168.10.3&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.verification_mode:</span> <span class=\"string\">certificate</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.keystore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br><span class=\"line\"><span class=\"attr\">xpack.security.transport.ssl.truststore.path:</span> <span class=\"string\">cert/elastic-certificates.p12</span></span><br></pre></td></tr></table></figure>\n\n<p>在三台机器的 elasticsearch 都启动之后，可以在浏览器中访问 <a href=\"http://192.168.10.1:9200/_cat/nodes\">http://192.168.10.1:9200/_cat/nodes</a> 查询集群的节点情况，正常情况下会显示如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.10.1 52 89 1 0.33 0.34 0.32 dilm * node1</span><br><span class=\"line\">192.168.10.2 49 82 0 0.37 0.35 0.35 dil  - node2</span><br><span class=\"line\">192.168.10.3 55 95 1 0.24 0.28 0.30 dilm - node3</span><br></pre></td></tr></table></figure>\n\n<p>如果显示的不是 3 行，那么集群就没有搭建成功。</p>"},{"title":"Elasticsearch URI 搜索","abbrlink":"c2dd96fc","date":"2020-12-29T07:59:46.000Z","_content":"\nURI搜索将搜索词放在q参数上，通过一个URL，即可进行elasticsearch数据搜索。效果和body的query_string方法相同。不过如果搜索中有特殊字符，需要通过quote转换。\n\n参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html\n\n\n<!-- more -->\n\n\n#### 格式 GET /index/_search?q=parameter\n\n比如我们在es数据库中存储了一批ip数据，格式如下：\n\n```\n{\n  \"ip\": \"59.110.12.72\",\n  \"port\": 80,\n  \"title\": \"我的博客\",\n  \"timestamp\": \"2019-12-12 01:02:03\"\n}\n```\n\n它的搜索语法是这样的：\n\n#### 简单搜索\n\n搜索开放 80 端口的数据\n\n```\nGET /my_index/_search?q=port:80\n```\n\n搜索标题为 404 Not found 的数据\n\n```\nGET /my_index/_search?q=title:\"404 Not found\"\n```\n\n#### OR 操作符 (||)\n\n搜索开放 80 或 81 端口的数据\n\n```\nport: (\"80\", \"81\") 或 port: (\"80\" OR \"81\") 或 port: (80 || 81)\n```\n\n#### AND 操作符 (&&)\n\n搜索开放 80 端口且标题为微信的数据\n\n```\nport: 80 AND title:微信 或 port: 80 && title:微信\n```\n\n#### NOT 操作符 (!)\n\n搜索开放 5432 端口但是不包含 PostgreSQL 词的内容的数据\n\n```\nport:5432 NOT PostgreSQL 或 port:5432 !PostgreSQL 或 port:5432 -PostgreSQL\n```\n\n#### 范围搜索\n\n开区间：搜索开放端口 8080 到 9090 之间的数据\n\n```\nport:[8080 TO 9090]\n```\n\n闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 8080 和 9090\n\n```\nport:{8080 TO 9090}\n```\n\n半开半闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 9090\n\n```\nport:[8080 TO 9090}\n```\n\n搜索开放端口不大于 8080 的数据\n\n```\nport: {8080 TO *] 或 port:>=8080\n```\n\n搜索开放端口小于 8080 的数据\n\n```\nport: [* TO 8080} 或 port:<8080\n```\n\n搜索2019/11/1日到2019/11/20之间的数据\n\n```\ntimestamp:[2019-11-01 TO 2019-11-20]\n```\n\n**注意，范围搜索还有另外一种写法，这种写法不能在符号和值之间添加空格，否则会分词或者语法错误**\n\n搜索开放端口 8080 到 9090 之间的数据\n\n```\nport:(>=8080 AND <=9090) 或 port:(+>=8080 +<=9090)\n```\n\n搜索开放端口小于50 或 大于 50000 的数据\n\n```\nport: (<50 OR >50000)\n```\n\n搜索2019/11/20日之后的数据\n\n```\ntimestamp:>=2019-11-20\n```\n\n#### 特殊情况搜索\n\n搜索包含title字段的数据\n\n```\n_exists_: title 或 title:*\n```\n\n不支持空字符串和空值搜索，以下语句不支持\n\n```\ntitle: \"\"\n```\n\nnull 值会处理成 \"null\" 字符串\n\n```\ntitle: null 等同于 title: \"null\"\n```\n\n","source":"_posts/elasticsearch-uri-search.md","raw":"---\ntitle: Elasticsearch URI 搜索\ntags:\n  - elasticsearch\nabbrlink: c2dd96fc\ndate: 2020-12-29 15:59:46\n---\n\nURI搜索将搜索词放在q参数上，通过一个URL，即可进行elasticsearch数据搜索。效果和body的query_string方法相同。不过如果搜索中有特殊字符，需要通过quote转换。\n\n参考：https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html\n\n\n<!-- more -->\n\n\n#### 格式 GET /index/_search?q=parameter\n\n比如我们在es数据库中存储了一批ip数据，格式如下：\n\n```\n{\n  \"ip\": \"59.110.12.72\",\n  \"port\": 80,\n  \"title\": \"我的博客\",\n  \"timestamp\": \"2019-12-12 01:02:03\"\n}\n```\n\n它的搜索语法是这样的：\n\n#### 简单搜索\n\n搜索开放 80 端口的数据\n\n```\nGET /my_index/_search?q=port:80\n```\n\n搜索标题为 404 Not found 的数据\n\n```\nGET /my_index/_search?q=title:\"404 Not found\"\n```\n\n#### OR 操作符 (||)\n\n搜索开放 80 或 81 端口的数据\n\n```\nport: (\"80\", \"81\") 或 port: (\"80\" OR \"81\") 或 port: (80 || 81)\n```\n\n#### AND 操作符 (&&)\n\n搜索开放 80 端口且标题为微信的数据\n\n```\nport: 80 AND title:微信 或 port: 80 && title:微信\n```\n\n#### NOT 操作符 (!)\n\n搜索开放 5432 端口但是不包含 PostgreSQL 词的内容的数据\n\n```\nport:5432 NOT PostgreSQL 或 port:5432 !PostgreSQL 或 port:5432 -PostgreSQL\n```\n\n#### 范围搜索\n\n开区间：搜索开放端口 8080 到 9090 之间的数据\n\n```\nport:[8080 TO 9090]\n```\n\n闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 8080 和 9090\n\n```\nport:{8080 TO 9090}\n```\n\n半开半闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 9090\n\n```\nport:[8080 TO 9090}\n```\n\n搜索开放端口不大于 8080 的数据\n\n```\nport: {8080 TO *] 或 port:>=8080\n```\n\n搜索开放端口小于 8080 的数据\n\n```\nport: [* TO 8080} 或 port:<8080\n```\n\n搜索2019/11/1日到2019/11/20之间的数据\n\n```\ntimestamp:[2019-11-01 TO 2019-11-20]\n```\n\n**注意，范围搜索还有另外一种写法，这种写法不能在符号和值之间添加空格，否则会分词或者语法错误**\n\n搜索开放端口 8080 到 9090 之间的数据\n\n```\nport:(>=8080 AND <=9090) 或 port:(+>=8080 +<=9090)\n```\n\n搜索开放端口小于50 或 大于 50000 的数据\n\n```\nport: (<50 OR >50000)\n```\n\n搜索2019/11/20日之后的数据\n\n```\ntimestamp:>=2019-11-20\n```\n\n#### 特殊情况搜索\n\n搜索包含title字段的数据\n\n```\n_exists_: title 或 title:*\n```\n\n不支持空字符串和空值搜索，以下语句不支持\n\n```\ntitle: \"\"\n```\n\nnull 值会处理成 \"null\" 字符串\n\n```\ntitle: null 等同于 title: \"null\"\n```\n\n","slug":"elasticsearch-uri-search","published":1,"updated":"2020-12-29T08:13:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozt00076rxi6hbcgz1g","content":"<p>URI搜索将搜索词放在q参数上，通过一个URL，即可进行elasticsearch数据搜索。效果和body的query_string方法相同。不过如果搜索中有特殊字符，需要通过quote转换。</p>\n<p>参考：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html\">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html</a></p>\n<span id=\"more\"></span>\n\n\n<h4 id=\"格式-GET-x2F-index-x2F-search-q-x3D-parameter\"><a href=\"#格式-GET-x2F-index-x2F-search-q-x3D-parameter\" class=\"headerlink\" title=\"格式 GET &#x2F;index&#x2F;_search?q&#x3D;parameter\"></a>格式 GET &#x2F;index&#x2F;_search?q&#x3D;parameter</h4><p>比如我们在es数据库中存储了一批ip数据，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;ip&quot;: &quot;59.110.12.72&quot;,</span><br><span class=\"line\">  &quot;port&quot;: 80,</span><br><span class=\"line\">  &quot;title&quot;: &quot;我的博客&quot;,</span><br><span class=\"line\">  &quot;timestamp&quot;: &quot;2019-12-12 01:02:03&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的搜索语法是这样的：</p>\n<h4 id=\"简单搜索\"><a href=\"#简单搜索\" class=\"headerlink\" title=\"简单搜索\"></a>简单搜索</h4><p>搜索开放 80 端口的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /my_index/_search?q=port:80</span><br></pre></td></tr></table></figure>\n\n<p>搜索标题为 404 Not found 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /my_index/_search?q=title:&quot;404 Not found&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OR-操作符\"><a href=\"#OR-操作符\" class=\"headerlink\" title=\"OR 操作符 (||)\"></a>OR 操作符 (||)</h4><p>搜索开放 80 或 81 端口的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: (&quot;80&quot;, &quot;81&quot;) 或 port: (&quot;80&quot; OR &quot;81&quot;) 或 port: (80 || 81)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AND-操作符-amp-amp\"><a href=\"#AND-操作符-amp-amp\" class=\"headerlink\" title=\"AND 操作符 (&amp;&amp;)\"></a>AND 操作符 (&amp;&amp;)</h4><p>搜索开放 80 端口且标题为微信的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: 80 AND title:微信 或 port: 80 &amp;&amp; title:微信</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NOT-操作符\"><a href=\"#NOT-操作符\" class=\"headerlink\" title=\"NOT 操作符 (!)\"></a>NOT 操作符 (!)</h4><p>搜索开放 5432 端口但是不包含 PostgreSQL 词的内容的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:5432 NOT PostgreSQL 或 port:5432 !PostgreSQL 或 port:5432 -PostgreSQL</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"范围搜索\"><a href=\"#范围搜索\" class=\"headerlink\" title=\"范围搜索\"></a>范围搜索</h4><p>开区间：搜索开放端口 8080 到 9090 之间的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:[8080 TO 9090]</span><br></pre></td></tr></table></figure>\n\n<p>闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 8080 和 9090</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:&#123;8080 TO 9090&#125;</span><br></pre></td></tr></table></figure>\n\n<p>半开半闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 9090</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:[8080 TO 9090&#125;</span><br></pre></td></tr></table></figure>\n\n<p>搜索开放端口不大于 8080 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: &#123;8080 TO *] 或 port:&gt;=8080</span><br></pre></td></tr></table></figure>\n\n<p>搜索开放端口小于 8080 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: [* TO 8080&#125; 或 port:&lt;8080</span><br></pre></td></tr></table></figure>\n\n<p>搜索2019&#x2F;11&#x2F;1日到2019&#x2F;11&#x2F;20之间的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timestamp:[2019-11-01 TO 2019-11-20]</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意，范围搜索还有另外一种写法，这种写法不能在符号和值之间添加空格，否则会分词或者语法错误</strong></p>\n<p>搜索开放端口 8080 到 9090 之间的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:(&gt;=8080 AND &lt;=9090) 或 port:(+&gt;=8080 +&lt;=9090)</span><br></pre></td></tr></table></figure>\n\n<p>搜索开放端口小于50 或 大于 50000 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: (&lt;50 OR &gt;50000)</span><br></pre></td></tr></table></figure>\n\n<p>搜索2019&#x2F;11&#x2F;20日之后的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timestamp:&gt;=2019-11-20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特殊情况搜索\"><a href=\"#特殊情况搜索\" class=\"headerlink\" title=\"特殊情况搜索\"></a>特殊情况搜索</h4><p>搜索包含title字段的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_exists_: title 或 title:*</span><br></pre></td></tr></table></figure>\n\n<p>不支持空字符串和空值搜索，以下语句不支持</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>null 值会处理成 “null” 字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: null 等同于 title: &quot;null&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>URI搜索将搜索词放在q参数上，通过一个URL，即可进行elasticsearch数据搜索。效果和body的query_string方法相同。不过如果搜索中有特殊字符，需要通过quote转换。</p>\n<p>参考：<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html\">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html</a></p>","more":"<h4 id=\"格式-GET-x2F-index-x2F-search-q-x3D-parameter\"><a href=\"#格式-GET-x2F-index-x2F-search-q-x3D-parameter\" class=\"headerlink\" title=\"格式 GET &#x2F;index&#x2F;_search?q&#x3D;parameter\"></a>格式 GET &#x2F;index&#x2F;_search?q&#x3D;parameter</h4><p>比如我们在es数据库中存储了一批ip数据，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;ip&quot;: &quot;59.110.12.72&quot;,</span><br><span class=\"line\">  &quot;port&quot;: 80,</span><br><span class=\"line\">  &quot;title&quot;: &quot;我的博客&quot;,</span><br><span class=\"line\">  &quot;timestamp&quot;: &quot;2019-12-12 01:02:03&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的搜索语法是这样的：</p>\n<h4 id=\"简单搜索\"><a href=\"#简单搜索\" class=\"headerlink\" title=\"简单搜索\"></a>简单搜索</h4><p>搜索开放 80 端口的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /my_index/_search?q=port:80</span><br></pre></td></tr></table></figure>\n\n<p>搜索标题为 404 Not found 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /my_index/_search?q=title:&quot;404 Not found&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OR-操作符\"><a href=\"#OR-操作符\" class=\"headerlink\" title=\"OR 操作符 (||)\"></a>OR 操作符 (||)</h4><p>搜索开放 80 或 81 端口的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: (&quot;80&quot;, &quot;81&quot;) 或 port: (&quot;80&quot; OR &quot;81&quot;) 或 port: (80 || 81)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AND-操作符-amp-amp\"><a href=\"#AND-操作符-amp-amp\" class=\"headerlink\" title=\"AND 操作符 (&amp;&amp;)\"></a>AND 操作符 (&amp;&amp;)</h4><p>搜索开放 80 端口且标题为微信的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: 80 AND title:微信 或 port: 80 &amp;&amp; title:微信</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NOT-操作符\"><a href=\"#NOT-操作符\" class=\"headerlink\" title=\"NOT 操作符 (!)\"></a>NOT 操作符 (!)</h4><p>搜索开放 5432 端口但是不包含 PostgreSQL 词的内容的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:5432 NOT PostgreSQL 或 port:5432 !PostgreSQL 或 port:5432 -PostgreSQL</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"范围搜索\"><a href=\"#范围搜索\" class=\"headerlink\" title=\"范围搜索\"></a>范围搜索</h4><p>开区间：搜索开放端口 8080 到 9090 之间的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:[8080 TO 9090]</span><br></pre></td></tr></table></figure>\n\n<p>闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 8080 和 9090</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:&#123;8080 TO 9090&#125;</span><br></pre></td></tr></table></figure>\n\n<p>半开半闭区间：搜索开放端口 8080 到 9090 之间的数据，但是不包括 9090</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:[8080 TO 9090&#125;</span><br></pre></td></tr></table></figure>\n\n<p>搜索开放端口不大于 8080 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: &#123;8080 TO *] 或 port:&gt;=8080</span><br></pre></td></tr></table></figure>\n\n<p>搜索开放端口小于 8080 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: [* TO 8080&#125; 或 port:&lt;8080</span><br></pre></td></tr></table></figure>\n\n<p>搜索2019&#x2F;11&#x2F;1日到2019&#x2F;11&#x2F;20之间的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timestamp:[2019-11-01 TO 2019-11-20]</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意，范围搜索还有另外一种写法，这种写法不能在符号和值之间添加空格，否则会分词或者语法错误</strong></p>\n<p>搜索开放端口 8080 到 9090 之间的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:(&gt;=8080 AND &lt;=9090) 或 port:(+&gt;=8080 +&lt;=9090)</span><br></pre></td></tr></table></figure>\n\n<p>搜索开放端口小于50 或 大于 50000 的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port: (&lt;50 OR &gt;50000)</span><br></pre></td></tr></table></figure>\n\n<p>搜索2019&#x2F;11&#x2F;20日之后的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timestamp:&gt;=2019-11-20</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"特殊情况搜索\"><a href=\"#特殊情况搜索\" class=\"headerlink\" title=\"特殊情况搜索\"></a>特殊情况搜索</h4><p>搜索包含title字段的数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_exists_: title 或 title:*</span><br></pre></td></tr></table></figure>\n\n<p>不支持空字符串和空值搜索，以下语句不支持</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>null 值会处理成 “null” 字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: null 等同于 title: &quot;null&quot;</span><br></pre></td></tr></table></figure>"},{"title":"【算法基础】斐波拉契数列","abbrlink":"5d612136","date":"2020-12-26T18:06:46.000Z","_content":"\n经典的斐波拉契数列，衍生出来很多问题，比如爬楼梯问题，走格子问题。\n\n\n<!-- more -->\n\n\n#### 1. 递归加记忆化搜索\n\n```python\n# 使用字典做缓存\nfibonacci = {0: 0, 1: 1}\n\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    if n in fibonacci:\n        return fibonacci[n]\n    value = fib(n-1) + fib(n-2)\n    fibonacci[n] = value\n    return value\n\n# 使用 lru_cache 缓存\nfrom functools import lru_cache\n\n@lru_cache\ndef fib(self, n: int) -> int:\n    value = n if n <= 1 else fib(n-1) + fib(n-2)\n    return value\n```\n\n#### 2. 动态规划\n\n```python\ndef fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    fib_list = [0] * (n+1)\n    fib_list[0] = 0\n    fib_list[1] = 1\n    for i in range(2, n + 1):\n        fib_list[i] = fib_list[i-1] + fib_list[i-2]\n    return fib_list[n]\n\n# 第二种写法\ndef fib(n: int) -> int:\n    if n == 0:\n        return 0\n    a, b = 0, 1\n    while n > 1:\n        a, b = b, a + b\n        n -= 1\n    return b\n```\n\n#### 3. 通向公式\n\n![斐波拉契数列通项公式](/images/20210105095453467.png)\n\n```python\ndef fib(n: int) -> int:\n   sqrt5 = 5**0.5\n   fibn = (((1 + sqrt5) / 2) ** n - ((1 - sqrt5) / 2) ** n) / sqrt5\n   return round(fibn)\n```\n\n*leetcode链接*: https://leetcode-cn.com/problems/fibonacci-number/ \n","source":"_posts/fibonacci-for-python.md","raw":"---\ntitle: 【算法基础】斐波拉契数列\ntags:\n  - python\n  - leetcode\nabbrlink: 5d612136\ndate: 2020-12-27 02:06:46\n---\n\n经典的斐波拉契数列，衍生出来很多问题，比如爬楼梯问题，走格子问题。\n\n\n<!-- more -->\n\n\n#### 1. 递归加记忆化搜索\n\n```python\n# 使用字典做缓存\nfibonacci = {0: 0, 1: 1}\n\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    if n in fibonacci:\n        return fibonacci[n]\n    value = fib(n-1) + fib(n-2)\n    fibonacci[n] = value\n    return value\n\n# 使用 lru_cache 缓存\nfrom functools import lru_cache\n\n@lru_cache\ndef fib(self, n: int) -> int:\n    value = n if n <= 1 else fib(n-1) + fib(n-2)\n    return value\n```\n\n#### 2. 动态规划\n\n```python\ndef fib(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    fib_list = [0] * (n+1)\n    fib_list[0] = 0\n    fib_list[1] = 1\n    for i in range(2, n + 1):\n        fib_list[i] = fib_list[i-1] + fib_list[i-2]\n    return fib_list[n]\n\n# 第二种写法\ndef fib(n: int) -> int:\n    if n == 0:\n        return 0\n    a, b = 0, 1\n    while n > 1:\n        a, b = b, a + b\n        n -= 1\n    return b\n```\n\n#### 3. 通向公式\n\n![斐波拉契数列通项公式](/images/20210105095453467.png)\n\n```python\ndef fib(n: int) -> int:\n   sqrt5 = 5**0.5\n   fibn = (((1 + sqrt5) / 2) ** n - ((1 - sqrt5) / 2) ** n) / sqrt5\n   return round(fibn)\n```\n\n*leetcode链接*: https://leetcode-cn.com/problems/fibonacci-number/ \n","slug":"fibonacci-for-python","published":1,"updated":"2021-01-17T09:36:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtozu00086rxifep2btw8","content":"<p>经典的斐波拉契数列，衍生出来很多问题，比如爬楼梯问题，走格子问题。</p>\n<span id=\"more\"></span>\n\n\n<h4 id=\"1-递归加记忆化搜索\"><a href=\"#1-递归加记忆化搜索\" class=\"headerlink\" title=\"1. 递归加记忆化搜索\"></a>1. 递归加记忆化搜索</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用字典做缓存</span></span><br><span class=\"line\">fibonacci = &#123;<span class=\"number\">0</span>: <span class=\"number\">0</span>, <span class=\"number\">1</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> fibonacci:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci[n]</span><br><span class=\"line\">    value = fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\">    fibonacci[n] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 lru_cache 缓存</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@lru_cache</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    value = n <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span> <span class=\"keyword\">else</span> fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2. 动态规划\"></a>2. 动态规划</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    fib_list = [<span class=\"number\">0</span>] * (n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    fib_list[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    fib_list[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">        fib_list[i] = fib_list[i-<span class=\"number\">1</span>] + fib_list[i-<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib_list[n]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二种写法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    a, b = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        n -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-通向公式\"><a href=\"#3-通向公式\" class=\"headerlink\" title=\"3. 通向公式\"></a>3. 通向公式</h4><p><img src=\"/images/20210105095453467.png\" alt=\"斐波拉契数列通项公式\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">   sqrt5 = <span class=\"number\">5</span>**<span class=\"number\">0.5</span></span><br><span class=\"line\">   fibn = (((<span class=\"number\">1</span> + sqrt5) / <span class=\"number\">2</span>) ** n - ((<span class=\"number\">1</span> - sqrt5) / <span class=\"number\">2</span>) ** n) / sqrt5</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">round</span>(fibn)</span><br></pre></td></tr></table></figure>\n\n<p><em>leetcode链接</em>: <a href=\"https://leetcode-cn.com/problems/fibonacci-number/\">https://leetcode-cn.com/problems/fibonacci-number/</a> </p>\n","site":{"data":{}},"excerpt":"<p>经典的斐波拉契数列，衍生出来很多问题，比如爬楼梯问题，走格子问题。</p>","more":"<h4 id=\"1-递归加记忆化搜索\"><a href=\"#1-递归加记忆化搜索\" class=\"headerlink\" title=\"1. 递归加记忆化搜索\"></a>1. 递归加记忆化搜索</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用字典做缓存</span></span><br><span class=\"line\">fibonacci = &#123;<span class=\"number\">0</span>: <span class=\"number\">0</span>, <span class=\"number\">1</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> fibonacci:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci[n]</span><br><span class=\"line\">    value = fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\">    fibonacci[n] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 lru_cache 缓存</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@lru_cache</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    value = n <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span> <span class=\"keyword\">else</span> fib(n-<span class=\"number\">1</span>) + fib(n-<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2. 动态规划\"></a>2. 动态规划</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    fib_list = [<span class=\"number\">0</span>] * (n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    fib_list[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    fib_list[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">        fib_list[i] = fib_list[i-<span class=\"number\">1</span>] + fib_list[i-<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib_list[n]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二种写法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    a, b = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        n -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-通向公式\"><a href=\"#3-通向公式\" class=\"headerlink\" title=\"3. 通向公式\"></a>3. 通向公式</h4><p><img src=\"/images/20210105095453467.png\" alt=\"斐波拉契数列通项公式\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fib</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">   sqrt5 = <span class=\"number\">5</span>**<span class=\"number\">0.5</span></span><br><span class=\"line\">   fibn = (((<span class=\"number\">1</span> + sqrt5) / <span class=\"number\">2</span>) ** n - ((<span class=\"number\">1</span> - sqrt5) / <span class=\"number\">2</span>) ** n) / sqrt5</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">round</span>(fibn)</span><br></pre></td></tr></table></figure>\n\n<p><em>leetcode链接</em>: <a href=\"https://leetcode-cn.com/problems/fibonacci-number/\">https://leetcode-cn.com/problems/fibonacci-number/</a> </p>"},{"title":"Flask docker初探","abbrlink":"92640653","date":"2020-12-27T18:06:58.000Z","description":null,"_content":"\n\nDocker: 18.06.1-ce, build e68fc7a\nFlask: 1.0.2\nTornado: 5.1.1\nTepository: python:2.7.15-alpine3.7\n\n\n<!-- more -->\n\n\n#### 安装基础镜像\n\ndocker pull python:2.7.15-alpine3.7\n\n#### Dockerfile\n\n```\nFROM python:2.7.15-alpine3.7\nLABEL author=\"limu\"\n\nWORKDIR /home/app/liteweb\n\nADD ./ ./\n\nRUN pip install flask\nRUN pip install flask_script\nRUN pip install tornado\n\nCMD [\"python\", \"liteweb.py\"]\n```\n\n\n注意：ADD这一句，直接将目录中的内容添加到容器中，ADD后面直接跟目录，如果采用*ADD ./* ./会打乱目录，COPY命令也是一样。\n\n#### 创建镜像\n\ndocker build -t liteweb:flask ./\n\n此命令会执行Dockerfile文件，根据Dockerfile内容创建镜像，后面的路径为Dockerfile文件所在目录。\n\n命令成功后执行 docker images可以查看镜像。\n\n```\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nliteweb             flask               faf4f55bd3d5        2 hours ago         78.3MB\npython              2.7.15-alpine3.7    20a59ebdfcae        6 days ago          58.5MB\n```\n\n#### 运行镜像\n\n1. 打开终端进入容器查看\n\n   docker run -it faf4f55bd3d5 /bin/sh\n\n2. 添加映射端口，将容器内的80端口映射到宿主机的81端口。\n   docker run -it -p 81:80 faf4f55bd3d5 /bin/sh\n\n3. 后台方式运行\n\n   docker run -d liteweb:flask\n\n4. 自定义容器名称\n    docker run -d --name tornado liteweb:flask\n\n5. 挂载目录，可将宿主机的目录挂载到容器中，方便查看日志。\n\n   docker run -d -v /home/app/logs:/home/app/liteweb/app/log liteweb:flask\n\n6. 完整的命令\n    docker run -d --name tornado -p 80:80 -v /home/app/logs:/home/app/liteweb/app/log liteweb:flask\n#### 修改镜像\n\n1. 有时候想要修改镜像，但是又不想重新build，可以进入容器修改内容，然后根据容器提交镜像。\n\n    docker commit -a \"limu\" -m \"add gevent\" a404c6c174a2  python:flask-web\n\n2. 修改镜像标签\n\n    docker tag faf4f55bd3d5 liteweb:flask1.0\n    \n#### 保存镜像\n\n1. 直接保存为tar包\n\n   docker save liteweb:flask -o liteweb-flask.tar 或\n\n   docker save liteweb:flask > liteweb-flask.tar\n\n2. 压缩后保存\n    docker save liteweb:flask | gzip > liteweb-flask.tgz\n\n#### 加载镜像\n\n1. 加载tar包\n    docker load -i liteweb-flask.tar\n\n2. 加载tgz包\n    gunzip -c liteweb-flask.tgz | docker load\n\n#### gcc问题\n   如果需要pycrypto，gevent这样的python包，需要在alpine中安装gcc编译器，可以在Dockerfile文件中添加一条命令\n\nRUN apk add gcc g++ make libffi-dev openssl-dev\n\n但是这样依赖，镜像就变大了很多。\n","source":"_posts/flask-docker-have-a-try.md","raw":"---\ntitle: Flask docker初探\ntags:\n  - python\n  - flask\n  - gevent\n  - docker\nabbrlink: '92640653'\ndate: 2020-12-28 02:06:58\ndescription:\n---\n\n\nDocker: 18.06.1-ce, build e68fc7a\nFlask: 1.0.2\nTornado: 5.1.1\nTepository: python:2.7.15-alpine3.7\n\n\n<!-- more -->\n\n\n#### 安装基础镜像\n\ndocker pull python:2.7.15-alpine3.7\n\n#### Dockerfile\n\n```\nFROM python:2.7.15-alpine3.7\nLABEL author=\"limu\"\n\nWORKDIR /home/app/liteweb\n\nADD ./ ./\n\nRUN pip install flask\nRUN pip install flask_script\nRUN pip install tornado\n\nCMD [\"python\", \"liteweb.py\"]\n```\n\n\n注意：ADD这一句，直接将目录中的内容添加到容器中，ADD后面直接跟目录，如果采用*ADD ./* ./会打乱目录，COPY命令也是一样。\n\n#### 创建镜像\n\ndocker build -t liteweb:flask ./\n\n此命令会执行Dockerfile文件，根据Dockerfile内容创建镜像，后面的路径为Dockerfile文件所在目录。\n\n命令成功后执行 docker images可以查看镜像。\n\n```\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nliteweb             flask               faf4f55bd3d5        2 hours ago         78.3MB\npython              2.7.15-alpine3.7    20a59ebdfcae        6 days ago          58.5MB\n```\n\n#### 运行镜像\n\n1. 打开终端进入容器查看\n\n   docker run -it faf4f55bd3d5 /bin/sh\n\n2. 添加映射端口，将容器内的80端口映射到宿主机的81端口。\n   docker run -it -p 81:80 faf4f55bd3d5 /bin/sh\n\n3. 后台方式运行\n\n   docker run -d liteweb:flask\n\n4. 自定义容器名称\n    docker run -d --name tornado liteweb:flask\n\n5. 挂载目录，可将宿主机的目录挂载到容器中，方便查看日志。\n\n   docker run -d -v /home/app/logs:/home/app/liteweb/app/log liteweb:flask\n\n6. 完整的命令\n    docker run -d --name tornado -p 80:80 -v /home/app/logs:/home/app/liteweb/app/log liteweb:flask\n#### 修改镜像\n\n1. 有时候想要修改镜像，但是又不想重新build，可以进入容器修改内容，然后根据容器提交镜像。\n\n    docker commit -a \"limu\" -m \"add gevent\" a404c6c174a2  python:flask-web\n\n2. 修改镜像标签\n\n    docker tag faf4f55bd3d5 liteweb:flask1.0\n    \n#### 保存镜像\n\n1. 直接保存为tar包\n\n   docker save liteweb:flask -o liteweb-flask.tar 或\n\n   docker save liteweb:flask > liteweb-flask.tar\n\n2. 压缩后保存\n    docker save liteweb:flask | gzip > liteweb-flask.tgz\n\n#### 加载镜像\n\n1. 加载tar包\n    docker load -i liteweb-flask.tar\n\n2. 加载tgz包\n    gunzip -c liteweb-flask.tgz | docker load\n\n#### gcc问题\n   如果需要pycrypto，gevent这样的python包，需要在alpine中安装gcc编译器，可以在Dockerfile文件中添加一条命令\n\nRUN apk add gcc g++ make libffi-dev openssl-dev\n\n但是这样依赖，镜像就变大了很多。\n","slug":"flask-docker-have-a-try","published":1,"updated":"2020-12-27T18:08:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp04000a6rxi8ymnecc7","content":"<p>Docker: 18.06.1-ce, build e68fc7a<br>Flask: 1.0.2<br>Tornado: 5.1.1<br>Tepository: python:2.7.15-alpine3.7</p>\n<span id=\"more\"></span>\n\n\n<h4 id=\"安装基础镜像\"><a href=\"#安装基础镜像\" class=\"headerlink\" title=\"安装基础镜像\"></a>安装基础镜像</h4><p>docker pull python:2.7.15-alpine3.7</p>\n<h4 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:2.7.15-alpine3.7</span><br><span class=\"line\">LABEL author=&quot;limu&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /home/app/liteweb</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./ ./</span><br><span class=\"line\"></span><br><span class=\"line\">RUN pip install flask</span><br><span class=\"line\">RUN pip install flask_script</span><br><span class=\"line\">RUN pip install tornado</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;python&quot;, &quot;liteweb.py&quot;]</span><br></pre></td></tr></table></figure>\n\n\n<p>注意：ADD这一句，直接将目录中的内容添加到容器中，ADD后面直接跟目录，如果采用<em>ADD .&#x2F;</em> .&#x2F;会打乱目录，COPY命令也是一样。</p>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><p>docker build -t liteweb:flask .&#x2F;</p>\n<p>此命令会执行Dockerfile文件，根据Dockerfile内容创建镜像，后面的路径为Dockerfile文件所在目录。</p>\n<p>命令成功后执行 docker images可以查看镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">liteweb             flask               faf4f55bd3d5        2 hours ago         78.3MB</span><br><span class=\"line\">python              2.7.15-alpine3.7    20a59ebdfcae        6 days ago          58.5MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h4><ol>\n<li><p>打开终端进入容器查看</p>\n<p>docker run -it faf4f55bd3d5 &#x2F;bin&#x2F;sh</p>\n</li>\n<li><p>添加映射端口，将容器内的80端口映射到宿主机的81端口。<br>docker run -it -p 81:80 faf4f55bd3d5 &#x2F;bin&#x2F;sh</p>\n</li>\n<li><p>后台方式运行</p>\n<p>docker run -d liteweb:flask</p>\n</li>\n<li><p>自定义容器名称<br> docker run -d –name tornado liteweb:flask</p>\n</li>\n<li><p>挂载目录，可将宿主机的目录挂载到容器中，方便查看日志。</p>\n<p>docker run -d -v &#x2F;home&#x2F;app&#x2F;logs:&#x2F;home&#x2F;app&#x2F;liteweb&#x2F;app&#x2F;log liteweb:flask</p>\n</li>\n<li><p>完整的命令<br> docker run -d –name tornado -p 80:80 -v &#x2F;home&#x2F;app&#x2F;logs:&#x2F;home&#x2F;app&#x2F;liteweb&#x2F;app&#x2F;log liteweb:flask</p>\n<h4 id=\"修改镜像\"><a href=\"#修改镜像\" class=\"headerlink\" title=\"修改镜像\"></a>修改镜像</h4></li>\n<li><p>有时候想要修改镜像，但是又不想重新build，可以进入容器修改内容，然后根据容器提交镜像。</p>\n<p> docker commit -a “limu” -m “add gevent” a404c6c174a2  python:flask-web</p>\n</li>\n<li><p>修改镜像标签</p>\n<p> docker tag faf4f55bd3d5 liteweb:flask1.0</p>\n</li>\n</ol>\n<h4 id=\"保存镜像\"><a href=\"#保存镜像\" class=\"headerlink\" title=\"保存镜像\"></a>保存镜像</h4><ol>\n<li><p>直接保存为tar包</p>\n<p>docker save liteweb:flask -o liteweb-flask.tar 或</p>\n<p>docker save liteweb:flask &gt; liteweb-flask.tar</p>\n</li>\n<li><p>压缩后保存<br> docker save liteweb:flask | gzip &gt; liteweb-flask.tgz</p>\n</li>\n</ol>\n<h4 id=\"加载镜像\"><a href=\"#加载镜像\" class=\"headerlink\" title=\"加载镜像\"></a>加载镜像</h4><ol>\n<li><p>加载tar包<br> docker load -i liteweb-flask.tar</p>\n</li>\n<li><p>加载tgz包<br> gunzip -c liteweb-flask.tgz | docker load</p>\n</li>\n</ol>\n<h4 id=\"gcc问题\"><a href=\"#gcc问题\" class=\"headerlink\" title=\"gcc问题\"></a>gcc问题</h4><p>   如果需要pycrypto，gevent这样的python包，需要在alpine中安装gcc编译器，可以在Dockerfile文件中添加一条命令</p>\n<p>RUN apk add gcc g++ make libffi-dev openssl-dev</p>\n<p>但是这样依赖，镜像就变大了很多。</p>\n","site":{"data":{}},"excerpt":"<p>Docker: 18.06.1-ce, build e68fc7a<br>Flask: 1.0.2<br>Tornado: 5.1.1<br>Tepository: python:2.7.15-alpine3.7</p>","more":"<h4 id=\"安装基础镜像\"><a href=\"#安装基础镜像\" class=\"headerlink\" title=\"安装基础镜像\"></a>安装基础镜像</h4><p>docker pull python:2.7.15-alpine3.7</p>\n<h4 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM python:2.7.15-alpine3.7</span><br><span class=\"line\">LABEL author=&quot;limu&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /home/app/liteweb</span><br><span class=\"line\"></span><br><span class=\"line\">ADD ./ ./</span><br><span class=\"line\"></span><br><span class=\"line\">RUN pip install flask</span><br><span class=\"line\">RUN pip install flask_script</span><br><span class=\"line\">RUN pip install tornado</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;python&quot;, &quot;liteweb.py&quot;]</span><br></pre></td></tr></table></figure>\n\n\n<p>注意：ADD这一句，直接将目录中的内容添加到容器中，ADD后面直接跟目录，如果采用<em>ADD .&#x2F;</em> .&#x2F;会打乱目录，COPY命令也是一样。</p>\n<h4 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h4><p>docker build -t liteweb:flask .&#x2F;</p>\n<p>此命令会执行Dockerfile文件，根据Dockerfile内容创建镜像，后面的路径为Dockerfile文件所在目录。</p>\n<p>命令成功后执行 docker images可以查看镜像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">liteweb             flask               faf4f55bd3d5        2 hours ago         78.3MB</span><br><span class=\"line\">python              2.7.15-alpine3.7    20a59ebdfcae        6 days ago          58.5MB</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h4><ol>\n<li><p>打开终端进入容器查看</p>\n<p>docker run -it faf4f55bd3d5 &#x2F;bin&#x2F;sh</p>\n</li>\n<li><p>添加映射端口，将容器内的80端口映射到宿主机的81端口。<br>docker run -it -p 81:80 faf4f55bd3d5 &#x2F;bin&#x2F;sh</p>\n</li>\n<li><p>后台方式运行</p>\n<p>docker run -d liteweb:flask</p>\n</li>\n<li><p>自定义容器名称<br> docker run -d –name tornado liteweb:flask</p>\n</li>\n<li><p>挂载目录，可将宿主机的目录挂载到容器中，方便查看日志。</p>\n<p>docker run -d -v &#x2F;home&#x2F;app&#x2F;logs:&#x2F;home&#x2F;app&#x2F;liteweb&#x2F;app&#x2F;log liteweb:flask</p>\n</li>\n<li><p>完整的命令<br> docker run -d –name tornado -p 80:80 -v &#x2F;home&#x2F;app&#x2F;logs:&#x2F;home&#x2F;app&#x2F;liteweb&#x2F;app&#x2F;log liteweb:flask</p>\n<h4 id=\"修改镜像\"><a href=\"#修改镜像\" class=\"headerlink\" title=\"修改镜像\"></a>修改镜像</h4></li>\n<li><p>有时候想要修改镜像，但是又不想重新build，可以进入容器修改内容，然后根据容器提交镜像。</p>\n<p> docker commit -a “limu” -m “add gevent” a404c6c174a2  python:flask-web</p>\n</li>\n<li><p>修改镜像标签</p>\n<p> docker tag faf4f55bd3d5 liteweb:flask1.0</p>\n</li>\n</ol>\n<h4 id=\"保存镜像\"><a href=\"#保存镜像\" class=\"headerlink\" title=\"保存镜像\"></a>保存镜像</h4><ol>\n<li><p>直接保存为tar包</p>\n<p>docker save liteweb:flask -o liteweb-flask.tar 或</p>\n<p>docker save liteweb:flask &gt; liteweb-flask.tar</p>\n</li>\n<li><p>压缩后保存<br> docker save liteweb:flask | gzip &gt; liteweb-flask.tgz</p>\n</li>\n</ol>\n<h4 id=\"加载镜像\"><a href=\"#加载镜像\" class=\"headerlink\" title=\"加载镜像\"></a>加载镜像</h4><ol>\n<li><p>加载tar包<br> docker load -i liteweb-flask.tar</p>\n</li>\n<li><p>加载tgz包<br> gunzip -c liteweb-flask.tgz | docker load</p>\n</li>\n</ol>\n<h4 id=\"gcc问题\"><a href=\"#gcc问题\" class=\"headerlink\" title=\"gcc问题\"></a>gcc问题</h4><p>   如果需要pycrypto，gevent这样的python包，需要在alpine中安装gcc编译器，可以在Dockerfile文件中添加一条命令</p>\n<p>RUN apk add gcc g++ make libffi-dev openssl-dev</p>\n<p>但是这样依赖，镜像就变大了很多。</p>"},{"title":"Hexo的一些配置","abbrlink":"7629139c","date":"2020-12-28T04:31:46.000Z","_content":"\n我的Blog使用的是默认主题，也就是 landscape。这里主要介绍了显示摘要，修改路径，配置证书等问题。\n\n\n<!-- more -->\n\n\n#### 1. 文章只显示摘要\n\nhexo默认文章全文显示，很不方便，可以通过 <!-- more --> 语句实现阅读全文效果。\n\n注意：\n1. 在 <!-- more --> 语句前面，不能存在 markdown 语句；\n2. 修改 node_modules/hexo-theme-landscape/_config.yml 文件中的 excerpt_link 值，可以自定义 Read More 文字。\n\n#### 2. 给网站添加 favicon.ico\n\n修改 node_modules/hexo-theme-landscape/_config.yml 配置文件。\n\n```\nfavicon: favicon.ico\n```\n\n然后将 favicon.ico 文件放在 node_modules/hexo-theme-landscape/source/css/images 目录中。\n\n#### 3. 添加备案信息\n\n修改 themes/landscape/layout/_partial/footer.ejs 文件，添加备案信息。\n\n```javascript\n<footer id=\"footer\">\n  <% if (theme.sidebar === 'bottom'){ %>\n    <%- partial('_partial/sidebar') %>\n  <% } %>\n  <div class=\"outer\">\n    <div id=\"footer-info\" class=\"inner\">\n      &copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %><br>\n      <%= __('powered_by') %> <a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>\n      <div>\n        <a href=\"https://beian.miit.gov.cn/\" target=\"_blank\">备案信息：xxxxx</a>\n      </div>\n    </div>\n  </div>\n</footer>\n```\n\n#### 4. 设置Blog的语言\n\n以中文为例，修改 _config.yml 配置文件。\n\n```\nlanguage: zh-CN\n```\n如果想要中英混搭，可以修改语言配置文件，文件为yml格式，放在node_modules/hexo-theme-landscape/languages 目录。\n\n#### 5. URL路径不使用文件名\n\nhexo的URL默认使用文件名作为路径，对于中文文件名，很不美观，可以使用 hexo-abbrlink 插件来生产唯一链接。\n\n```shell\n安装 hexo-abbrlink\n\nnpm install hexo-abbrlink --save\n\n# 修改 修改 _config.yml\n# 这里 paper 是路由，可以自定义\n\npermalink: paper/:abbrlink.html\nabbrlink:\n  alg: crc32\n  rep: hex\n```\n\n#### 6. 添加RSS订阅\n\n安装 hexo-generator-feed\n\n```\nnpm install hexo-generator-feed\n```\n\n在 _config.yml 中添加配置项\n\n```\n# RSS订阅\nplugin:\n  - hexo-generator-feed\n# Feed Atom\nfeed:\n  type: atom\npath: atom.xml\nlimit: 10\n```\n\n在主题的 _config.yml 在添加菜单 rss: /atom.xml。\n\n\n#### 7. 在文章中引用图片\n\n在 source 目录下创建一个 images 文件夹，然后将图片放在此处，在 markdown 中，使用相对路径引用即可，比如：\n\n```\n[示例图片](/images/demp.png)\n```\n\n注意：是在 source 目录下，不是public，如果创建在public目录下，那么在需要清理数据，执行```hexo clean```命令的时候会被删除。\n\n#### 8. apple-touch-icon\n\n使用iPhone访问网站的时候，发现access.log报了几条日志。\n\n```\n404 GET /apple-touch-icon-120x120.png\n404 GET /apple-touch-icon.png\n404 GET /apple-touch-icon-120x120-precomposed.png\n```\n\n搜索了一下，原来是添加这个图片之后，在Safari浏览器的收藏夹里会显示大图标，ding到桌面之后也会显示一个图标，如果不设置，只会显示域名的首字母。\n\n制作两张png图片，命名为 apple-touch-icon.png 和 apple-touch-icon-precomposed.png，放在source目录下即可。\n\n#### 9. 添加数字证书\n\n建议在 nginx 里面配置数字证书, 修改 /etc/nginx/nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。\n\n```\nlisten       443 ssl http2 default_server;\nlisten       [::]:443 ssl http2 default_server;\nserver_name  _;\nroot         /usr/share/nginx/html;\n\nssl_certificate \"/etc/pki/nginx/server.crt\";\nssl_certificate_key \"/etc/pki/nginx/private/server.key\";\nssl_session_cache shared:SSL:1m;\nssl_session_timeout  10m;\nssl_ciphers HIGH:!aNULL:!MD5;\nssl_prefer_server_ciphers on;\n\n# Load configuration files for the default server block.\ninclude /etc/nginx/default.d/*.conf;\n\nlocation / {\nproxy_pass http://localhost:4000;\n}\n```\n更多 nginx 的配置可以点击[这里](https://mastersword.cn/paper/5daddb41.html)，查看另一篇文章。\n\n\n*参考*\nhttps://hexo.io/zh-cn/docs/configuration.html\n","source":"_posts/hexo-some-config.md","raw":"---\ntitle: Hexo的一些配置\ntags:\n  - hexo\n  - landscape\nabbrlink: 7629139c\ndate: 2020-12-28 12:31:46\n---\n\n我的Blog使用的是默认主题，也就是 landscape。这里主要介绍了显示摘要，修改路径，配置证书等问题。\n\n\n<!-- more -->\n\n\n#### 1. 文章只显示摘要\n\nhexo默认文章全文显示，很不方便，可以通过 <!-- more --> 语句实现阅读全文效果。\n\n注意：\n1. 在 <!-- more --> 语句前面，不能存在 markdown 语句；\n2. 修改 node_modules/hexo-theme-landscape/_config.yml 文件中的 excerpt_link 值，可以自定义 Read More 文字。\n\n#### 2. 给网站添加 favicon.ico\n\n修改 node_modules/hexo-theme-landscape/_config.yml 配置文件。\n\n```\nfavicon: favicon.ico\n```\n\n然后将 favicon.ico 文件放在 node_modules/hexo-theme-landscape/source/css/images 目录中。\n\n#### 3. 添加备案信息\n\n修改 themes/landscape/layout/_partial/footer.ejs 文件，添加备案信息。\n\n```javascript\n<footer id=\"footer\">\n  <% if (theme.sidebar === 'bottom'){ %>\n    <%- partial('_partial/sidebar') %>\n  <% } %>\n  <div class=\"outer\">\n    <div id=\"footer-info\" class=\"inner\">\n      &copy; <%= date(new Date(), 'YYYY') %> <%= config.author || config.title %><br>\n      <%= __('powered_by') %> <a href=\"http://hexo.io/\" target=\"_blank\">Hexo</a>\n      <div>\n        <a href=\"https://beian.miit.gov.cn/\" target=\"_blank\">备案信息：xxxxx</a>\n      </div>\n    </div>\n  </div>\n</footer>\n```\n\n#### 4. 设置Blog的语言\n\n以中文为例，修改 _config.yml 配置文件。\n\n```\nlanguage: zh-CN\n```\n如果想要中英混搭，可以修改语言配置文件，文件为yml格式，放在node_modules/hexo-theme-landscape/languages 目录。\n\n#### 5. URL路径不使用文件名\n\nhexo的URL默认使用文件名作为路径，对于中文文件名，很不美观，可以使用 hexo-abbrlink 插件来生产唯一链接。\n\n```shell\n安装 hexo-abbrlink\n\nnpm install hexo-abbrlink --save\n\n# 修改 修改 _config.yml\n# 这里 paper 是路由，可以自定义\n\npermalink: paper/:abbrlink.html\nabbrlink:\n  alg: crc32\n  rep: hex\n```\n\n#### 6. 添加RSS订阅\n\n安装 hexo-generator-feed\n\n```\nnpm install hexo-generator-feed\n```\n\n在 _config.yml 中添加配置项\n\n```\n# RSS订阅\nplugin:\n  - hexo-generator-feed\n# Feed Atom\nfeed:\n  type: atom\npath: atom.xml\nlimit: 10\n```\n\n在主题的 _config.yml 在添加菜单 rss: /atom.xml。\n\n\n#### 7. 在文章中引用图片\n\n在 source 目录下创建一个 images 文件夹，然后将图片放在此处，在 markdown 中，使用相对路径引用即可，比如：\n\n```\n[示例图片](/images/demp.png)\n```\n\n注意：是在 source 目录下，不是public，如果创建在public目录下，那么在需要清理数据，执行```hexo clean```命令的时候会被删除。\n\n#### 8. apple-touch-icon\n\n使用iPhone访问网站的时候，发现access.log报了几条日志。\n\n```\n404 GET /apple-touch-icon-120x120.png\n404 GET /apple-touch-icon.png\n404 GET /apple-touch-icon-120x120-precomposed.png\n```\n\n搜索了一下，原来是添加这个图片之后，在Safari浏览器的收藏夹里会显示大图标，ding到桌面之后也会显示一个图标，如果不设置，只会显示域名的首字母。\n\n制作两张png图片，命名为 apple-touch-icon.png 和 apple-touch-icon-precomposed.png，放在source目录下即可。\n\n#### 9. 添加数字证书\n\n建议在 nginx 里面配置数字证书, 修改 /etc/nginx/nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。\n\n```\nlisten       443 ssl http2 default_server;\nlisten       [::]:443 ssl http2 default_server;\nserver_name  _;\nroot         /usr/share/nginx/html;\n\nssl_certificate \"/etc/pki/nginx/server.crt\";\nssl_certificate_key \"/etc/pki/nginx/private/server.key\";\nssl_session_cache shared:SSL:1m;\nssl_session_timeout  10m;\nssl_ciphers HIGH:!aNULL:!MD5;\nssl_prefer_server_ciphers on;\n\n# Load configuration files for the default server block.\ninclude /etc/nginx/default.d/*.conf;\n\nlocation / {\nproxy_pass http://localhost:4000;\n}\n```\n更多 nginx 的配置可以点击[这里](https://mastersword.cn/paper/5daddb41.html)，查看另一篇文章。\n\n\n*参考*\nhttps://hexo.io/zh-cn/docs/configuration.html\n","slug":"hexo-some-config","published":1,"updated":"2022-04-07T02:06:02.000Z","_id":"cl1nbtp05000b6rxiaxaoeohu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我的Blog使用的是默认主题，也就是 landscape。这里主要介绍了显示摘要，修改路径，配置证书等问题。</p>\n<span id=\"more\"></span>\n\n\n<h4 id=\"1-文章只显示摘要\"><a href=\"#1-文章只显示摘要\" class=\"headerlink\" title=\"1. 文章只显示摘要\"></a>1. 文章只显示摘要</h4><p>hexo默认文章全文显示，很不方便，可以通过 <!-- more --> 语句实现阅读全文效果。</p>\n<p>注意：</p>\n<ol>\n<li>在 <!-- more --> 语句前面，不能存在 markdown 语句；</li>\n<li>修改 node_modules&#x2F;hexo-theme-landscape&#x2F;_config.yml 文件中的 excerpt_link 值，可以自定义 Read More 文字。</li>\n</ol>\n<h4 id=\"2-给网站添加-favicon-ico\"><a href=\"#2-给网站添加-favicon-ico\" class=\"headerlink\" title=\"2. 给网站添加 favicon.ico\"></a>2. 给网站添加 favicon.ico</h4><p>修改 node_modules&#x2F;hexo-theme-landscape&#x2F;_config.yml 配置文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon: favicon.ico</span><br></pre></td></tr></table></figure>\n\n<p>然后将 favicon.ico 文件放在 node_modules&#x2F;hexo-theme-landscape&#x2F;source&#x2F;css&#x2F;images 目录中。</p>\n<h4 id=\"3-添加备案信息\"><a href=\"#3-添加备案信息\" class=\"headerlink\" title=\"3. 添加备案信息\"></a>3. 添加备案信息</h4><p>修改 themes&#x2F;landscape&#x2F;layout&#x2F;_partial&#x2F;footer.ejs 文件，添加备案信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer id=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><br><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (theme.<span class=\"property\">sidebar</span> === <span class=\"string\">&#x27;bottom&#x27;</span>)&#123; %&gt;</span><br><span class=\"line\">    &lt;%- <span class=\"title function_\">partial</span>(<span class=\"string\">&#x27;_partial/sidebar&#x27;</span>) %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;footer-info&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"symbol\">&amp;copy;</span> &lt;%= date(new Date(), &#x27;YYYY&#x27;) %&gt; &lt;%= config.author || config.title %&gt;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;%= __(&#x27;powered_by&#x27;) %&gt; <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://hexo.io/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>Hexo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://beian.miit.gov.cn/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>备案信息：xxxxx<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-设置Blog的语言\"><a href=\"#4-设置Blog的语言\" class=\"headerlink\" title=\"4. 设置Blog的语言\"></a>4. 设置Blog的语言</h4><p>以中文为例，修改 _config.yml 配置文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure>\n<p>如果想要中英混搭，可以修改语言配置文件，文件为yml格式，放在node_modules&#x2F;hexo-theme-landscape&#x2F;languages 目录。</p>\n<h4 id=\"5-URL路径不使用文件名\"><a href=\"#5-URL路径不使用文件名\" class=\"headerlink\" title=\"5. URL路径不使用文件名\"></a>5. URL路径不使用文件名</h4><p>hexo的URL默认使用文件名作为路径，对于中文文件名，很不美观，可以使用 hexo-abbrlink 插件来生产唯一链接。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装 hexo-abbrlink</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-abbrlink --save</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 修改 _config.yml</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里 paper 是路由，可以自定义</span></span><br><span class=\"line\"></span><br><span class=\"line\">permalink: paper/:abbrlink.html</span><br><span class=\"line\">abbrlink:</span><br><span class=\"line\">  alg: crc32</span><br><span class=\"line\">  rep: hex</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-添加RSS订阅\"><a href=\"#6-添加RSS订阅\" class=\"headerlink\" title=\"6. 添加RSS订阅\"></a>6. 添加RSS订阅</h4><p>安装 hexo-generator-feed</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>在 _config.yml 中添加配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># RSS订阅</span><br><span class=\"line\">plugin:</span><br><span class=\"line\">  - hexo-generator-feed</span><br><span class=\"line\"># Feed Atom</span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">path: atom.xml</span><br><span class=\"line\">limit: 10</span><br></pre></td></tr></table></figure>\n\n<p>在主题的 _config.yml 在添加菜单 rss: &#x2F;atom.xml。</p>\n<h4 id=\"7-在文章中引用图片\"><a href=\"#7-在文章中引用图片\" class=\"headerlink\" title=\"7. 在文章中引用图片\"></a>7. 在文章中引用图片</h4><p>在 source 目录下创建一个 images 文件夹，然后将图片放在此处，在 markdown 中，使用相对路径引用即可，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[示例图片](/images/demp.png)</span><br></pre></td></tr></table></figure>\n\n<p>注意：是在 source 目录下，不是public，如果创建在public目录下，那么在需要清理数据，执行<code>hexo clean</code>命令的时候会被删除。</p>\n<h4 id=\"8-apple-touch-icon\"><a href=\"#8-apple-touch-icon\" class=\"headerlink\" title=\"8. apple-touch-icon\"></a>8. apple-touch-icon</h4><p>使用iPhone访问网站的时候，发现access.log报了几条日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">404 GET /apple-touch-icon-120x120.png</span><br><span class=\"line\">404 GET /apple-touch-icon.png</span><br><span class=\"line\">404 GET /apple-touch-icon-120x120-precomposed.png</span><br></pre></td></tr></table></figure>\n\n<p>搜索了一下，原来是添加这个图片之后，在Safari浏览器的收藏夹里会显示大图标，ding到桌面之后也会显示一个图标，如果不设置，只会显示域名的首字母。</p>\n<p>制作两张png图片，命名为 apple-touch-icon.png 和 apple-touch-icon-precomposed.png，放在source目录下即可。</p>\n<h4 id=\"9-添加数字证书\"><a href=\"#9-添加数字证书\" class=\"headerlink\" title=\"9. 添加数字证书\"></a>9. 添加数字证书</h4><p>建议在 nginx 里面配置数字证书, 修改 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen       443 ssl http2 default_server;</span><br><span class=\"line\">listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">server_name  _;</span><br><span class=\"line\">root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">ssl_session_timeout  10m;</span><br><span class=\"line\">ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load configuration files for the default server block.</span><br><span class=\"line\">include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">proxy_pass http://localhost:4000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多 nginx 的配置可以点击<a href=\"https://mastersword.cn/paper/5daddb41.html\">这里</a>，查看另一篇文章。</p>\n<p><em>参考</em><br><a href=\"https://hexo.io/zh-cn/docs/configuration.html\">https://hexo.io/zh-cn/docs/configuration.html</a></p>\n","site":{"data":{}},"excerpt":"<p>我的Blog使用的是默认主题，也就是 landscape。这里主要介绍了显示摘要，修改路径，配置证书等问题。</p>","more":"<h4 id=\"1-文章只显示摘要\"><a href=\"#1-文章只显示摘要\" class=\"headerlink\" title=\"1. 文章只显示摘要\"></a>1. 文章只显示摘要</h4><p>hexo默认文章全文显示，很不方便，可以通过 <!-- more --> 语句实现阅读全文效果。</p>\n<p>注意：</p>\n<ol>\n<li>在 <!-- more --> 语句前面，不能存在 markdown 语句；</li>\n<li>修改 node_modules&#x2F;hexo-theme-landscape&#x2F;_config.yml 文件中的 excerpt_link 值，可以自定义 Read More 文字。</li>\n</ol>\n<h4 id=\"2-给网站添加-favicon-ico\"><a href=\"#2-给网站添加-favicon-ico\" class=\"headerlink\" title=\"2. 给网站添加 favicon.ico\"></a>2. 给网站添加 favicon.ico</h4><p>修改 node_modules&#x2F;hexo-theme-landscape&#x2F;_config.yml 配置文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon: favicon.ico</span><br></pre></td></tr></table></figure>\n\n<p>然后将 favicon.ico 文件放在 node_modules&#x2F;hexo-theme-landscape&#x2F;source&#x2F;css&#x2F;images 目录中。</p>\n<h4 id=\"3-添加备案信息\"><a href=\"#3-添加备案信息\" class=\"headerlink\" title=\"3. 添加备案信息\"></a>3. 添加备案信息</h4><p>修改 themes&#x2F;landscape&#x2F;layout&#x2F;_partial&#x2F;footer.ejs 文件，添加备案信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;footer id=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><br><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (theme.<span class=\"property\">sidebar</span> === <span class=\"string\">&#x27;bottom&#x27;</span>)&#123; %&gt;</span><br><span class=\"line\">    &lt;%- <span class=\"title function_\">partial</span>(<span class=\"string\">&#x27;_partial/sidebar&#x27;</span>) %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;footer-info&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"symbol\">&amp;copy;</span> &lt;%= date(new Date(), &#x27;YYYY&#x27;) %&gt; &lt;%= config.author || config.title %&gt;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;%= __(&#x27;powered_by&#x27;) %&gt; <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://hexo.io/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>Hexo<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://beian.miit.gov.cn/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>备案信息：xxxxx<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-设置Blog的语言\"><a href=\"#4-设置Blog的语言\" class=\"headerlink\" title=\"4. 设置Blog的语言\"></a>4. 设置Blog的语言</h4><p>以中文为例，修改 _config.yml 配置文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: zh-CN</span><br></pre></td></tr></table></figure>\n<p>如果想要中英混搭，可以修改语言配置文件，文件为yml格式，放在node_modules&#x2F;hexo-theme-landscape&#x2F;languages 目录。</p>\n<h4 id=\"5-URL路径不使用文件名\"><a href=\"#5-URL路径不使用文件名\" class=\"headerlink\" title=\"5. URL路径不使用文件名\"></a>5. URL路径不使用文件名</h4><p>hexo的URL默认使用文件名作为路径，对于中文文件名，很不美观，可以使用 hexo-abbrlink 插件来生产唯一链接。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装 hexo-abbrlink</span><br><span class=\"line\"></span><br><span class=\"line\">npm install hexo-abbrlink --save</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改 修改 _config.yml</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里 paper 是路由，可以自定义</span></span><br><span class=\"line\"></span><br><span class=\"line\">permalink: paper/:abbrlink.html</span><br><span class=\"line\">abbrlink:</span><br><span class=\"line\">  alg: crc32</span><br><span class=\"line\">  rep: hex</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-添加RSS订阅\"><a href=\"#6-添加RSS订阅\" class=\"headerlink\" title=\"6. 添加RSS订阅\"></a>6. 添加RSS订阅</h4><p>安装 hexo-generator-feed</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>\n\n<p>在 _config.yml 中添加配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># RSS订阅</span><br><span class=\"line\">plugin:</span><br><span class=\"line\">  - hexo-generator-feed</span><br><span class=\"line\"># Feed Atom</span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">path: atom.xml</span><br><span class=\"line\">limit: 10</span><br></pre></td></tr></table></figure>\n\n<p>在主题的 _config.yml 在添加菜单 rss: &#x2F;atom.xml。</p>\n<h4 id=\"7-在文章中引用图片\"><a href=\"#7-在文章中引用图片\" class=\"headerlink\" title=\"7. 在文章中引用图片\"></a>7. 在文章中引用图片</h4><p>在 source 目录下创建一个 images 文件夹，然后将图片放在此处，在 markdown 中，使用相对路径引用即可，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[示例图片](/images/demp.png)</span><br></pre></td></tr></table></figure>\n\n<p>注意：是在 source 目录下，不是public，如果创建在public目录下，那么在需要清理数据，执行<code>hexo clean</code>命令的时候会被删除。</p>\n<h4 id=\"8-apple-touch-icon\"><a href=\"#8-apple-touch-icon\" class=\"headerlink\" title=\"8. apple-touch-icon\"></a>8. apple-touch-icon</h4><p>使用iPhone访问网站的时候，发现access.log报了几条日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">404 GET /apple-touch-icon-120x120.png</span><br><span class=\"line\">404 GET /apple-touch-icon.png</span><br><span class=\"line\">404 GET /apple-touch-icon-120x120-precomposed.png</span><br></pre></td></tr></table></figure>\n\n<p>搜索了一下，原来是添加这个图片之后，在Safari浏览器的收藏夹里会显示大图标，ding到桌面之后也会显示一个图标，如果不设置，只会显示域名的首字母。</p>\n<p>制作两张png图片，命名为 apple-touch-icon.png 和 apple-touch-icon-precomposed.png，放在source目录下即可。</p>\n<h4 id=\"9-添加数字证书\"><a href=\"#9-添加数字证书\" class=\"headerlink\" title=\"9. 添加数字证书\"></a>9. 添加数字证书</h4><p>建议在 nginx 里面配置数字证书, 修改 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen       443 ssl http2 default_server;</span><br><span class=\"line\">listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">server_name  _;</span><br><span class=\"line\">root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">ssl_session_timeout  10m;</span><br><span class=\"line\">ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load configuration files for the default server block.</span><br><span class=\"line\">include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">proxy_pass http://localhost:4000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多 nginx 的配置可以点击<a href=\"https://mastersword.cn/paper/5daddb41.html\">这里</a>，查看另一篇文章。</p>\n<p><em>参考</em><br><a href=\"https://hexo.io/zh-cn/docs/configuration.html\">https://hexo.io/zh-cn/docs/configuration.html</a></p>"},{"title":"【算法基础】Leetcode中的位运算题目","date":"2021-01-17T09:32:00.000Z","abbrlink":"bfde335e","_content":"\n191. 位1的个数; 231. 2的幂; 190. 颠倒二进制位。\n\n<!-- more -->\n\n#### 题目191. 位1的个数\n\n[描述](https://leetcode-cn.com/problems/number-of-1-bits/)：编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。\n\n解法1：简单的按位与和移位操作\n\n```python\ndef hammingWeight(self, n: int) -> int:\n    count = 0\n    while n != 0:\n        count += n & 1\n        n >> 1\n    return count\n```\n\n解法2：利用位运算公式，```n & (n - 1)```可以打掉最低位的1\n\n```python\ndef hammingWeight(self, n: int) -> int:\n    count = 0\n    while n != 0:\n        count += 1\n        n = n & (n -1)\n    return count\n```\n\n#### 题目231. 2的幂\n\n[给定一个整数，编写一个函数来判断它是否是 2 的幂次方。](https://leetcode-cn.com/problems/power-of-two/)\n\n题解：2的幂，也就是二进制数只有一个1，那么继续使用去掉最低位的1的公式\n\n```python\ndef isPowerOfTwo(self, n: int) -> bool:\n        return n != 0 and n & (n - 1) == 0\n```\n\n#### 题目190. 颠倒二进制位\n\n[颠倒给定的 32 位无符号整数的二进制位。](https://leetcode-cn.com/problems/reverse-bits/)\n\n这个题目就是简单的移位操作\n\n```python\ndef reverseBits(self, n: int) -> int:\n    value = 0\n    bits = 31\n    while n:\n        value += (n & 1) << bits\n        n = n >> 1\n        bits -= 1\n    return value\n```\n\n","source":"_posts/leetcode-bitwise-operation.md","raw":"---\ntitle: 【算法基础】Leetcode中的位运算题目\ndate: 2021-01-17 17:32:00\ntags:\n  - leetcode\nabbrlink: bfde335e\n---\n\n191. 位1的个数; 231. 2的幂; 190. 颠倒二进制位。\n\n<!-- more -->\n\n#### 题目191. 位1的个数\n\n[描述](https://leetcode-cn.com/problems/number-of-1-bits/)：编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。\n\n解法1：简单的按位与和移位操作\n\n```python\ndef hammingWeight(self, n: int) -> int:\n    count = 0\n    while n != 0:\n        count += n & 1\n        n >> 1\n    return count\n```\n\n解法2：利用位运算公式，```n & (n - 1)```可以打掉最低位的1\n\n```python\ndef hammingWeight(self, n: int) -> int:\n    count = 0\n    while n != 0:\n        count += 1\n        n = n & (n -1)\n    return count\n```\n\n#### 题目231. 2的幂\n\n[给定一个整数，编写一个函数来判断它是否是 2 的幂次方。](https://leetcode-cn.com/problems/power-of-two/)\n\n题解：2的幂，也就是二进制数只有一个1，那么继续使用去掉最低位的1的公式\n\n```python\ndef isPowerOfTwo(self, n: int) -> bool:\n        return n != 0 and n & (n - 1) == 0\n```\n\n#### 题目190. 颠倒二进制位\n\n[颠倒给定的 32 位无符号整数的二进制位。](https://leetcode-cn.com/problems/reverse-bits/)\n\n这个题目就是简单的移位操作\n\n```python\ndef reverseBits(self, n: int) -> int:\n    value = 0\n    bits = 31\n    while n:\n        value += (n & 1) << bits\n        n = n >> 1\n        bits -= 1\n    return value\n```\n\n","slug":"leetcode-bitwise-operation","published":1,"updated":"2021-01-17T09:34:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp07000d6rxigelhhk3p","content":"<ol start=\"191\">\n<li>位1的个数; 231. 2的幂; 190. 颠倒二进制位。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h4 id=\"题目191-位1的个数\"><a href=\"#题目191-位1的个数\" class=\"headerlink\" title=\"题目191. 位1的个数\"></a>题目191. 位1的个数</h4><p><a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\">描述</a>：编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>\n<p>解法1：简单的按位与和移位操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hammingWeight</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n != <span class=\"number\">0</span>:</span><br><span class=\"line\">        count += n &amp; <span class=\"number\">1</span></span><br><span class=\"line\">        n &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure>\n\n<p>解法2：利用位运算公式，<code>n &amp; (n - 1)</code>可以打掉最低位的1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hammingWeight</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n != <span class=\"number\">0</span>:</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        n = n &amp; (n -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题目231-2的幂\"><a href=\"#题目231-2的幂\" class=\"headerlink\" title=\"题目231. 2的幂\"></a>题目231. 2的幂</h4><p><a href=\"https://leetcode-cn.com/problems/power-of-two/\">给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</a></p>\n<p>题解：2的幂，也就是二进制数只有一个1，那么继续使用去掉最低位的1的公式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isPowerOfTwo</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n != <span class=\"number\">0</span> <span class=\"keyword\">and</span> n &amp; (n - <span class=\"number\">1</span>) == <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题目190-颠倒二进制位\"><a href=\"#题目190-颠倒二进制位\" class=\"headerlink\" title=\"题目190. 颠倒二进制位\"></a>题目190. 颠倒二进制位</h4><p><a href=\"https://leetcode-cn.com/problems/reverse-bits/\">颠倒给定的 32 位无符号整数的二进制位。</a></p>\n<p>这个题目就是简单的移位操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">reverseBits</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    value = <span class=\"number\">0</span></span><br><span class=\"line\">    bits = <span class=\"number\">31</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n:</span><br><span class=\"line\">        value += (n &amp; <span class=\"number\">1</span>) &lt;&lt; bits</span><br><span class=\"line\">        n = n &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        bits -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<ol start=\"191\">\n<li>位1的个数; 231. 2的幂; 190. 颠倒二进制位。</li>\n</ol>","more":"<h4 id=\"题目191-位1的个数\"><a href=\"#题目191-位1的个数\" class=\"headerlink\" title=\"题目191. 位1的个数\"></a>题目191. 位1的个数</h4><p><a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\">描述</a>：编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p>\n<p>解法1：简单的按位与和移位操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hammingWeight</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n != <span class=\"number\">0</span>:</span><br><span class=\"line\">        count += n &amp; <span class=\"number\">1</span></span><br><span class=\"line\">        n &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure>\n\n<p>解法2：利用位运算公式，<code>n &amp; (n - 1)</code>可以打掉最低位的1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hammingWeight</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n != <span class=\"number\">0</span>:</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        n = n &amp; (n -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题目231-2的幂\"><a href=\"#题目231-2的幂\" class=\"headerlink\" title=\"题目231. 2的幂\"></a>题目231. 2的幂</h4><p><a href=\"https://leetcode-cn.com/problems/power-of-two/\">给定一个整数，编写一个函数来判断它是否是 2 的幂次方。</a></p>\n<p>题解：2的幂，也就是二进制数只有一个1，那么继续使用去掉最低位的1的公式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isPowerOfTwo</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n != <span class=\"number\">0</span> <span class=\"keyword\">and</span> n &amp; (n - <span class=\"number\">1</span>) == <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题目190-颠倒二进制位\"><a href=\"#题目190-颠倒二进制位\" class=\"headerlink\" title=\"题目190. 颠倒二进制位\"></a>题目190. 颠倒二进制位</h4><p><a href=\"https://leetcode-cn.com/problems/reverse-bits/\">颠倒给定的 32 位无符号整数的二进制位。</a></p>\n<p>这个题目就是简单的移位操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">reverseBits</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    value = <span class=\"number\">0</span></span><br><span class=\"line\">    bits = <span class=\"number\">31</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n:</span><br><span class=\"line\">        value += (n &amp; <span class=\"number\">1</span>) &lt;&lt; bits</span><br><span class=\"line\">        n = n &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        bits -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure>"},{"title":"logstash mongodb elastic，从死磕到放弃","abbrlink":"46bbb70a","date":"2021-01-13T13:31:46.000Z","_content":"\n有一个小需求，从 mongodb 里面同步数据到 elasticsearch，尝试了 jdbc 插件和 logstash-output-mongodb，logstash-input-mongodb，最后无奈放弃，还是写个脚本定时同步吧。\n\n<!-- more -->\n\n---\n\n#### 拉取 logstash 镜像\n\n```\ndocker pull logstash:7.10.1\n```\n\n#### 安装两个mongodb插件\n\n```\nlogstash-output-mongodb\nlogstash-input-mongodb\n```\n\n#### 修改两个配置文件\n\n```\n# 修改 logstash.yml \nhttp.host: \"0.0.0.0\"\nxpack.monitoring.enabled: true\nxpack.monitoring.elasticsearch.username: username\nxpack.monitoring.elasticsearch.password: password\nxpack.monitoring.elasticsearch.hosts: [ \"127.0.0.1:9200\" ]\n\n# 修改 logstash.conf\ninput {\n  mongodb {\n    uri => \"mongodb://username:password@127.0.0.1/db_name\"\n    placeholder_db_dir => \"/opt/logstash/tools\"  #1\n    placeholder_db_name => \"search_mongo.db\"  #2\n    collection => \"my_table\"\n    parse_method => \"simple\"  #3\n  }\n}\n\nfilter {\n  mutate {\n    remove_field => [ \"_id\", \"log_entry\" ]\n    }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"127.0.0.1:9200\"]\n    index => \"my-index\"\n    user => \"username\"\n    password => \"password\"\n  }\n  stdout { codec => rubydebug }\n}\n```\n\n注释说明：\n\n1. placeholder_db_dir为占位目录，需要用户自己创建，因为是 docker 环境，容器内是 logstash 用户，root 用户组，所以这里把这个路径设在了已经存在的目录 /opt/logstash/tools 里；\n2. placeholder_db_name同上；\n3. parse_method为处理 json 数据的格式，默认是 flatten，会将镶嵌的 json 提升到顶层，也就是 {\"a\": {\"b\": \"c\"}} 转为 {\"a_b\": \"c\"}。还可以设置为simple，设置成simple后，{\"a\": {\"b\": \"c\"}} 会转为 {\"a\": \"\"\"{\"b\": \"c\"}\"\"\"}；\n\n#### docker-compose 文件\n\n```yaml\nversion: \"3.3\"\nservices:\n  logstash:\n    image: logstash:7.10.1\n    container_name: logstash\n    privileged: true\n    restart: always\n    environment:\n      - SERVER_NAME=logstash\n    volumes:\n      - /etc/localtime:/etc/localtime\n      - ./logstash.yml:/usr/share/logstash/config/logstash.yml\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n```\n\njdbc更不行\n\n---\n\n*参考*\n\nhttps://www.cnblogs.com/zjdeblog/p/11183865.html\nhttps://github.com/phutchins/logstash-input-mongodb\nhttps://stackoverflow.com/questions/60864512/syncing-the-data-from-mongodb-to-elasticsearch-using-logstash\n\n","source":"_posts/logstash-mongo-elastic.md","raw":"---\ntitle: logstash mongodb elastic，从死磕到放弃\ntags:\n  - logstash\n  - elasticsearch\nabbrlink: 46bbb70a\ndate: 2021-01-13 21:31:46\n---\n\n有一个小需求，从 mongodb 里面同步数据到 elasticsearch，尝试了 jdbc 插件和 logstash-output-mongodb，logstash-input-mongodb，最后无奈放弃，还是写个脚本定时同步吧。\n\n<!-- more -->\n\n---\n\n#### 拉取 logstash 镜像\n\n```\ndocker pull logstash:7.10.1\n```\n\n#### 安装两个mongodb插件\n\n```\nlogstash-output-mongodb\nlogstash-input-mongodb\n```\n\n#### 修改两个配置文件\n\n```\n# 修改 logstash.yml \nhttp.host: \"0.0.0.0\"\nxpack.monitoring.enabled: true\nxpack.monitoring.elasticsearch.username: username\nxpack.monitoring.elasticsearch.password: password\nxpack.monitoring.elasticsearch.hosts: [ \"127.0.0.1:9200\" ]\n\n# 修改 logstash.conf\ninput {\n  mongodb {\n    uri => \"mongodb://username:password@127.0.0.1/db_name\"\n    placeholder_db_dir => \"/opt/logstash/tools\"  #1\n    placeholder_db_name => \"search_mongo.db\"  #2\n    collection => \"my_table\"\n    parse_method => \"simple\"  #3\n  }\n}\n\nfilter {\n  mutate {\n    remove_field => [ \"_id\", \"log_entry\" ]\n    }\n}\n\noutput {\n  elasticsearch {\n    hosts => [\"127.0.0.1:9200\"]\n    index => \"my-index\"\n    user => \"username\"\n    password => \"password\"\n  }\n  stdout { codec => rubydebug }\n}\n```\n\n注释说明：\n\n1. placeholder_db_dir为占位目录，需要用户自己创建，因为是 docker 环境，容器内是 logstash 用户，root 用户组，所以这里把这个路径设在了已经存在的目录 /opt/logstash/tools 里；\n2. placeholder_db_name同上；\n3. parse_method为处理 json 数据的格式，默认是 flatten，会将镶嵌的 json 提升到顶层，也就是 {\"a\": {\"b\": \"c\"}} 转为 {\"a_b\": \"c\"}。还可以设置为simple，设置成simple后，{\"a\": {\"b\": \"c\"}} 会转为 {\"a\": \"\"\"{\"b\": \"c\"}\"\"\"}；\n\n#### docker-compose 文件\n\n```yaml\nversion: \"3.3\"\nservices:\n  logstash:\n    image: logstash:7.10.1\n    container_name: logstash\n    privileged: true\n    restart: always\n    environment:\n      - SERVER_NAME=logstash\n    volumes:\n      - /etc/localtime:/etc/localtime\n      - ./logstash.yml:/usr/share/logstash/config/logstash.yml\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n```\n\njdbc更不行\n\n---\n\n*参考*\n\nhttps://www.cnblogs.com/zjdeblog/p/11183865.html\nhttps://github.com/phutchins/logstash-input-mongodb\nhttps://stackoverflow.com/questions/60864512/syncing-the-data-from-mongodb-to-elasticsearch-using-logstash\n\n","slug":"logstash-mongo-elastic","published":1,"updated":"2021-01-15T09:07:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp09000f6rxica4bg0vf","content":"<p>有一个小需求，从 mongodb 里面同步数据到 elasticsearch，尝试了 jdbc 插件和 logstash-output-mongodb，logstash-input-mongodb，最后无奈放弃，还是写个脚本定时同步吧。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h4 id=\"拉取-logstash-镜像\"><a href=\"#拉取-logstash-镜像\" class=\"headerlink\" title=\"拉取 logstash 镜像\"></a>拉取 logstash 镜像</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull logstash:7.10.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装两个mongodb插件\"><a href=\"#安装两个mongodb插件\" class=\"headerlink\" title=\"安装两个mongodb插件\"></a>安装两个mongodb插件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logstash-output-mongodb</span><br><span class=\"line\">logstash-input-mongodb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改两个配置文件\"><a href=\"#修改两个配置文件\" class=\"headerlink\" title=\"修改两个配置文件\"></a>修改两个配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 logstash.yml </span><br><span class=\"line\">http.host: &quot;0.0.0.0&quot;</span><br><span class=\"line\">xpack.monitoring.enabled: true</span><br><span class=\"line\">xpack.monitoring.elasticsearch.username: username</span><br><span class=\"line\">xpack.monitoring.elasticsearch.password: password</span><br><span class=\"line\">xpack.monitoring.elasticsearch.hosts: [ &quot;127.0.0.1:9200&quot; ]</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改 logstash.conf</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  mongodb &#123;</span><br><span class=\"line\">    uri =&gt; &quot;mongodb://username:password@127.0.0.1/db_name&quot;</span><br><span class=\"line\">    placeholder_db_dir =&gt; &quot;/opt/logstash/tools&quot;  #1</span><br><span class=\"line\">    placeholder_db_name =&gt; &quot;search_mongo.db&quot;  #2</span><br><span class=\"line\">    collection =&gt; &quot;my_table&quot;</span><br><span class=\"line\">    parse_method =&gt; &quot;simple&quot;  #3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  mutate &#123;</span><br><span class=\"line\">    remove_field =&gt; [ &quot;_id&quot;, &quot;log_entry&quot; ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class=\"line\">    index =&gt; &quot;my-index&quot;</span><br><span class=\"line\">    user =&gt; &quot;username&quot;</span><br><span class=\"line\">    password =&gt; &quot;password&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释说明：</p>\n<ol>\n<li>placeholder_db_dir为占位目录，需要用户自己创建，因为是 docker 环境，容器内是 logstash 用户，root 用户组，所以这里把这个路径设在了已经存在的目录 &#x2F;opt&#x2F;logstash&#x2F;tools 里；</li>\n<li>placeholder_db_name同上；</li>\n<li>parse_method为处理 json 数据的格式，默认是 flatten，会将镶嵌的 json 提升到顶层，也就是 {“a”: {“b”: “c”}} 转为 {“a_b”: “c”}。还可以设置为simple，设置成simple后，{“a”: {“b”: “c”}} 会转为 {“a”: “””{“b”: “c”}”””}；</li>\n</ol>\n<h4 id=\"docker-compose-文件\"><a href=\"#docker-compose-文件\" class=\"headerlink\" title=\"docker-compose 文件\"></a>docker-compose 文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">logstash:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">logstash:7.10.1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">logstash</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SERVER_NAME=logstash</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>jdbc更不行</p>\n<hr>\n<p><em>参考</em></p>\n<p><a href=\"https://www.cnblogs.com/zjdeblog/p/11183865.html\">https://www.cnblogs.com/zjdeblog/p/11183865.html</a><br><a href=\"https://github.com/phutchins/logstash-input-mongodb\">https://github.com/phutchins/logstash-input-mongodb</a><br><a href=\"https://stackoverflow.com/questions/60864512/syncing-the-data-from-mongodb-to-elasticsearch-using-logstash\">https://stackoverflow.com/questions/60864512/syncing-the-data-from-mongodb-to-elasticsearch-using-logstash</a></p>\n","site":{"data":{}},"excerpt":"<p>有一个小需求，从 mongodb 里面同步数据到 elasticsearch，尝试了 jdbc 插件和 logstash-output-mongodb，logstash-input-mongodb，最后无奈放弃，还是写个脚本定时同步吧。</p>","more":"<hr>\n<h4 id=\"拉取-logstash-镜像\"><a href=\"#拉取-logstash-镜像\" class=\"headerlink\" title=\"拉取 logstash 镜像\"></a>拉取 logstash 镜像</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull logstash:7.10.1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装两个mongodb插件\"><a href=\"#安装两个mongodb插件\" class=\"headerlink\" title=\"安装两个mongodb插件\"></a>安装两个mongodb插件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logstash-output-mongodb</span><br><span class=\"line\">logstash-input-mongodb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改两个配置文件\"><a href=\"#修改两个配置文件\" class=\"headerlink\" title=\"修改两个配置文件\"></a>修改两个配置文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改 logstash.yml </span><br><span class=\"line\">http.host: &quot;0.0.0.0&quot;</span><br><span class=\"line\">xpack.monitoring.enabled: true</span><br><span class=\"line\">xpack.monitoring.elasticsearch.username: username</span><br><span class=\"line\">xpack.monitoring.elasticsearch.password: password</span><br><span class=\"line\">xpack.monitoring.elasticsearch.hosts: [ &quot;127.0.0.1:9200&quot; ]</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改 logstash.conf</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  mongodb &#123;</span><br><span class=\"line\">    uri =&gt; &quot;mongodb://username:password@127.0.0.1/db_name&quot;</span><br><span class=\"line\">    placeholder_db_dir =&gt; &quot;/opt/logstash/tools&quot;  #1</span><br><span class=\"line\">    placeholder_db_name =&gt; &quot;search_mongo.db&quot;  #2</span><br><span class=\"line\">    collection =&gt; &quot;my_table&quot;</span><br><span class=\"line\">    parse_method =&gt; &quot;simple&quot;  #3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  mutate &#123;</span><br><span class=\"line\">    remove_field =&gt; [ &quot;_id&quot;, &quot;log_entry&quot; ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;127.0.0.1:9200&quot;]</span><br><span class=\"line\">    index =&gt; &quot;my-index&quot;</span><br><span class=\"line\">    user =&gt; &quot;username&quot;</span><br><span class=\"line\">    password =&gt; &quot;password&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注释说明：</p>\n<ol>\n<li>placeholder_db_dir为占位目录，需要用户自己创建，因为是 docker 环境，容器内是 logstash 用户，root 用户组，所以这里把这个路径设在了已经存在的目录 &#x2F;opt&#x2F;logstash&#x2F;tools 里；</li>\n<li>placeholder_db_name同上；</li>\n<li>parse_method为处理 json 数据的格式，默认是 flatten，会将镶嵌的 json 提升到顶层，也就是 {“a”: {“b”: “c”}} 转为 {“a_b”: “c”}。还可以设置为simple，设置成simple后，{“a”: {“b”: “c”}} 会转为 {“a”: “””{“b”: “c”}”””}；</li>\n</ol>\n<h4 id=\"docker-compose-文件\"><a href=\"#docker-compose-文件\" class=\"headerlink\" title=\"docker-compose 文件\"></a>docker-compose 文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">logstash:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">logstash:7.10.1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">logstash</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SERVER_NAME=logstash</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/etc/localtime:/etc/localtime</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./logstash.yml:/usr/share/logstash/config/logstash.yml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>jdbc更不行</p>\n<hr>\n<p><em>参考</em></p>\n<p><a href=\"https://www.cnblogs.com/zjdeblog/p/11183865.html\">https://www.cnblogs.com/zjdeblog/p/11183865.html</a><br><a href=\"https://github.com/phutchins/logstash-input-mongodb\">https://github.com/phutchins/logstash-input-mongodb</a><br><a href=\"https://stackoverflow.com/questions/60864512/syncing-the-data-from-mongodb-to-elasticsearch-using-logstash\">https://stackoverflow.com/questions/60864512/syncing-the-data-from-mongodb-to-elasticsearch-using-logstash</a></p>"},{"title":"【算法基础】Leetcode题目：最大子序列和","abbrlink":"cf78f348","date":"2021-01-03T15:06:46.000Z","_content":"\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n<!-- more -->\n\n#### 示例:\n\n输入: [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n\n#### 进阶:\n\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n\n#### 动态规划\n\n方法1：用两个变量，一个记录最大的和，一个记录当前的和。时间复杂度 O(n^2)。\n\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_value = nums[0]  # 最大的和\n        max_sub = nums[0]  # 子最大的和\n        n = len(nums)\n        for i in range(1, n):\n            # 如果当前值为非负数，累加继续\n            if nums[i] >= 0:\n                max_sub += nums[i]\n            else:\n                # 如果当前值为负数，那么重新开始\n                max_sub = nums[i]\n            max_value = max(max_value, max_sub)\n                \n        return max_value\n```\n\n方法2：这个解法巧妙很多，也难以理解很多。\n\n- 分治（子问题），如果第 i 个元素被累加，那么它满足 max_sum(i) = max(max_sum(i-1), 0) + nums[i] ;\n- DP方程：max_sum[i] = max(max_sum[i-1], 0) + nums[i] ;\n- 找到数组 max_sum 的最大值，即是我们要找的值，max_sum 可以直接服用 nums ;\n\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        for i, v in enumerate(nums):\n            numus[i] = max(0, numus[i-1]) + nums[i]\n        return max(numus)\n    \n# 便于理解的写法\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        dp = numus\n        for i, v in enumerate(nums):\n            dp[i] = max(0, dp[i-1]) + nums[i]\n        return max(dp)\n```\n\n\n\n*原题*：https://leetcode-cn.com/problems/maximum-subarray/\n","source":"_posts/maximum-subarray.md","raw":"---\ntitle: 【算法基础】Leetcode题目：最大子序列和\ntags:\n  - leetcode\nabbrlink: cf78f348\ndate: 2021-01-03 23:06:46\n---\n\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n<!-- more -->\n\n#### 示例:\n\n输入: [-2,1,-3,4,-1,2,1,-5,4]\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n\n#### 进阶:\n\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n\n#### 动态规划\n\n方法1：用两个变量，一个记录最大的和，一个记录当前的和。时间复杂度 O(n^2)。\n\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        max_value = nums[0]  # 最大的和\n        max_sub = nums[0]  # 子最大的和\n        n = len(nums)\n        for i in range(1, n):\n            # 如果当前值为非负数，累加继续\n            if nums[i] >= 0:\n                max_sub += nums[i]\n            else:\n                # 如果当前值为负数，那么重新开始\n                max_sub = nums[i]\n            max_value = max(max_value, max_sub)\n                \n        return max_value\n```\n\n方法2：这个解法巧妙很多，也难以理解很多。\n\n- 分治（子问题），如果第 i 个元素被累加，那么它满足 max_sum(i) = max(max_sum(i-1), 0) + nums[i] ;\n- DP方程：max_sum[i] = max(max_sum[i-1], 0) + nums[i] ;\n- 找到数组 max_sum 的最大值，即是我们要找的值，max_sum 可以直接服用 nums ;\n\n```python\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        for i, v in enumerate(nums):\n            numus[i] = max(0, numus[i-1]) + nums[i]\n        return max(numus)\n    \n# 便于理解的写法\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        dp = numus\n        for i, v in enumerate(nums):\n            dp[i] = max(0, dp[i-1]) + nums[i]\n        return max(dp)\n```\n\n\n\n*原题*：https://leetcode-cn.com/problems/maximum-subarray/\n","slug":"maximum-subarray","published":1,"updated":"2021-01-17T09:37:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp0f000i6rxiek400w95","content":"<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例:\"></a>示例:</h4><p>输入: [-2,1,-3,4,-1,2,1,-5,4]<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶:\"></a>进阶:</h4><p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>\n<h4 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h4><p>方法1：用两个变量，一个记录最大的和，一个记录当前的和。时间复杂度 O(n^2)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        max_value = nums[<span class=\"number\">0</span>]  <span class=\"comment\"># 最大的和</span></span><br><span class=\"line\">        max_sub = nums[<span class=\"number\">0</span>]  <span class=\"comment\"># 子最大的和</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"comment\"># 如果当前值为非负数，累加继续</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                max_sub += nums[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 如果当前值为负数，那么重新开始</span></span><br><span class=\"line\">                max_sub = nums[i]</span><br><span class=\"line\">            max_value = <span class=\"built_in\">max</span>(max_value, max_sub)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_value</span><br></pre></td></tr></table></figure>\n\n<p>方法2：这个解法巧妙很多，也难以理解很多。</p>\n<ul>\n<li>分治（子问题），如果第 i 个元素被累加，那么它满足 max_sum(i) &#x3D; max(max_sum(i-1), 0) + nums[i] ;</li>\n<li>DP方程：max_sum[i] &#x3D; max(max_sum[i-1], 0) + nums[i] ;</li>\n<li>找到数组 max_sum 的最大值，即是我们要找的值，max_sum 可以直接服用 nums ;</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            numus[i] = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, numus[i-<span class=\"number\">1</span>]) + nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(numus)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 便于理解的写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        dp = numus</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            dp[i] = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, dp[i-<span class=\"number\">1</span>]) + nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><em>原题</em>：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\">https://leetcode-cn.com/problems/maximum-subarray/</a></p>\n","site":{"data":{}},"excerpt":"<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>","more":"<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例:\"></a>示例:</h4><p>输入: [-2,1,-3,4,-1,2,1,-5,4]<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>\n<h4 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶:\"></a>进阶:</h4><p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p>\n<h4 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h4><p>方法1：用两个变量，一个记录最大的和，一个记录当前的和。时间复杂度 O(n^2)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        max_value = nums[<span class=\"number\">0</span>]  <span class=\"comment\"># 最大的和</span></span><br><span class=\"line\">        max_sub = nums[<span class=\"number\">0</span>]  <span class=\"comment\"># 子最大的和</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"comment\"># 如果当前值为非负数，累加继续</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                max_sub += nums[i]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 如果当前值为负数，那么重新开始</span></span><br><span class=\"line\">                max_sub = nums[i]</span><br><span class=\"line\">            max_value = <span class=\"built_in\">max</span>(max_value, max_sub)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_value</span><br></pre></td></tr></table></figure>\n\n<p>方法2：这个解法巧妙很多，也难以理解很多。</p>\n<ul>\n<li>分治（子问题），如果第 i 个元素被累加，那么它满足 max_sum(i) &#x3D; max(max_sum(i-1), 0) + nums[i] ;</li>\n<li>DP方程：max_sum[i] &#x3D; max(max_sum[i-1], 0) + nums[i] ;</li>\n<li>找到数组 max_sum 的最大值，即是我们要找的值，max_sum 可以直接服用 nums ;</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            numus[i] = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, numus[i-<span class=\"number\">1</span>]) + nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(numus)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 便于理解的写法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        dp = numus</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            dp[i] = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, dp[i-<span class=\"number\">1</span>]) + nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(dp)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><em>原题</em>：<a href=\"https://leetcode-cn.com/problems/maximum-subarray/\">https://leetcode-cn.com/problems/maximum-subarray/</a></p>"},{"title":"Nginx的一些配置","date":"2021-01-10T16:11:46.000Z","abbrlink":"5daddb41","_content":"\n网站启用https，就需要配置数字证书。不想被探测器扫描，就禁止通过IP访问。\n\n\n<!-- more -->\n\n#### 1. 安装，启动，停止，加载\n\n以 centos7 为例\n```\n# 安装\nyum install nginx\n\n# 启动 \nnginx\n\n# 停止\nnginx -s stop\n\n# 加载配置文件\nnginx -s reload\n```\n\n#### 2. 修改默认显示内容\n\nnginx默认的首页，404，500等页面的显示内容太多了，容易暴露服务器信息，可以将 index.html, 404x.html, 500x.html 替换成自定义的文件，默认目录为 /usr/share/nginx/html。\n\n#### 3. 添加数字证书\n\n修改 /etc/nginx/nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。\n\n```\nlisten       443 ssl http2 default_server;\nlisten       [::]:443 ssl http2 default_server;\nserver_name  _;\nroot         /usr/share/nginx/html;\n\nssl_certificate \"/etc/pki/nginx/server.crt\";\nssl_certificate_key \"/etc/pki/nginx/private/server.key\";\nssl_session_cache shared:SSL:1m;\nssl_session_timeout  10m;\nssl_ciphers HIGH:!aNULL:!MD5;\nssl_prefer_server_ciphers on;\n\n# Load configuration files for the default server block.\ninclude /etc/nginx/default.d/*.conf;\n\nlocation / {\nproxy_pass http://localhost:4000;\n}\n```\n\n#### 4. 禁止通过ip直接访问网站\n\n如果不想服务器被扫描器探测，可以禁止通过IP访问网站。\n修改 nginx.conf 文件，添加一个 server，注意不是修改原 server。\n\n新增一个server配置，这里将 80 和 443 写在了一起，也可以分开写。\n\n```\n# forbidden ip:port access\nserver {\n    listen 80 default; \n    listen 443 ssl http2 default_server;\n    ssl_certificate \"/etc/pki/nginx/server.crt\";\n    ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout  10m;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n    server_name _;\n    return 403;\n}\n```\n\n修改原server，将 server_name _ 更改为 server_name yourdomain.com;\n\n```\n# 修改原server\nserver {\n    listen       443; # 只保留443, 去掉 ssl http2 default_server;\n    listen       [::]:443 ssl http2 default_server;\n    server_name  yourdomain.com;\n```\n\n然后执行 nginx -s reload 重新加载配置即可。\n\n#### 5. http跳转到https\n\n鉴于http越来越不安全，可以添加http跳转，在用户通过http访问的时候，自动跳转到 https。\n\n这里采用 return 301 重定来实现。\n\n```\nserver {\n    listen 80;\n    server_name yourdomain.com;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n网络上还有 rewrite 和 error_page 的方法，rewrite已不推荐，而 error_page 方法我测试并未生效，详情可参考[这篇文章](https://cloud.tencent.com/developer/article/1504193)。\n\n#### 6. no-www与www\n\n是用户访问网站的时候，有 www 和没有 www 都显示一样的效果。\n\n因为我的域名比较长，这里以有 www 跳转到 无 www 为例。\n\n在配置中新增一个server，可以把80和443配置在一起，当然也可以分开，更详细内容可参考[这篇文章](https://www.jianshu.com/p/cec753473ec9)。\n\n```\n# www.example.com redirect example.com\nserver {\n    listen 80;\n    listen 443 ssl;\n    ssl_certificate \"/etc/pki/nginx/server.crt\";\n    ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout  10m;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n    server_name www.yourdomain.com;\n    return 301 https://yourdomain.com$request_uri;\n}\n\n```\n\n#### 7. 去掉 nginx 的版本号\n\n在响应数据的header中会显示nginx的版本号，如果不想显示，可以在配置文件中添加 server_tokens 配置。\n\n```\n# /etc/nginx/nginx.conf\n\nhttp {\n        server_tokens off;\n```\n\n加在 http 下面会全部隐藏，如果你想80端口隐藏，443端口不隐藏，那么把这个配置添加在 server 下面。\n\n#### 8. 调整日志格式\n\n修改 nginx.conf 中的 log_format，即可对 nginx 日志进行格式调整。\n\n默认格式\n\n```json\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\naccess_log  /var/log/nginx/access.log  main;\n```\n\n调整后\n\n```json\nlog_format  main  '{\"time\": \"$time_local\", \"status\": $status, \"remote_addr\": \"$remote_addr\", '\n                  '\"request\": \"$request\", \"body_bytes_sent\": $body_bytes_sent, '\n                  '\"request_time\": $request_time, \"http_referer\": \"$http_referer\", '\n                  '\"user_agent\": \"$http_user_agent\"}';\n\naccess_log  /var/log/nginx/access.log  main;\n```\n\n有些不可见字符，在 json 里面显示不友好，可以再调整一下\n\n```json\nlog_format  main  '$time_local | $status | $remote_addr | \"$request\" | '\n                      '\"$http_referer\" | \"$http_user_agent\" | '\n                      '$body_bytes_sent | $request_time';\n```\n\n","source":"_posts/nginx-some-config.md","raw":"---\ntitle: Nginx的一些配置\ntags:\n  - nginx\ndate: 2021-1-11 00:11:46\nabbrlink: 5daddb41\n---\n\n网站启用https，就需要配置数字证书。不想被探测器扫描，就禁止通过IP访问。\n\n\n<!-- more -->\n\n#### 1. 安装，启动，停止，加载\n\n以 centos7 为例\n```\n# 安装\nyum install nginx\n\n# 启动 \nnginx\n\n# 停止\nnginx -s stop\n\n# 加载配置文件\nnginx -s reload\n```\n\n#### 2. 修改默认显示内容\n\nnginx默认的首页，404，500等页面的显示内容太多了，容易暴露服务器信息，可以将 index.html, 404x.html, 500x.html 替换成自定义的文件，默认目录为 /usr/share/nginx/html。\n\n#### 3. 添加数字证书\n\n修改 /etc/nginx/nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。\n\n```\nlisten       443 ssl http2 default_server;\nlisten       [::]:443 ssl http2 default_server;\nserver_name  _;\nroot         /usr/share/nginx/html;\n\nssl_certificate \"/etc/pki/nginx/server.crt\";\nssl_certificate_key \"/etc/pki/nginx/private/server.key\";\nssl_session_cache shared:SSL:1m;\nssl_session_timeout  10m;\nssl_ciphers HIGH:!aNULL:!MD5;\nssl_prefer_server_ciphers on;\n\n# Load configuration files for the default server block.\ninclude /etc/nginx/default.d/*.conf;\n\nlocation / {\nproxy_pass http://localhost:4000;\n}\n```\n\n#### 4. 禁止通过ip直接访问网站\n\n如果不想服务器被扫描器探测，可以禁止通过IP访问网站。\n修改 nginx.conf 文件，添加一个 server，注意不是修改原 server。\n\n新增一个server配置，这里将 80 和 443 写在了一起，也可以分开写。\n\n```\n# forbidden ip:port access\nserver {\n    listen 80 default; \n    listen 443 ssl http2 default_server;\n    ssl_certificate \"/etc/pki/nginx/server.crt\";\n    ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout  10m;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n    server_name _;\n    return 403;\n}\n```\n\n修改原server，将 server_name _ 更改为 server_name yourdomain.com;\n\n```\n# 修改原server\nserver {\n    listen       443; # 只保留443, 去掉 ssl http2 default_server;\n    listen       [::]:443 ssl http2 default_server;\n    server_name  yourdomain.com;\n```\n\n然后执行 nginx -s reload 重新加载配置即可。\n\n#### 5. http跳转到https\n\n鉴于http越来越不安全，可以添加http跳转，在用户通过http访问的时候，自动跳转到 https。\n\n这里采用 return 301 重定来实现。\n\n```\nserver {\n    listen 80;\n    server_name yourdomain.com;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n网络上还有 rewrite 和 error_page 的方法，rewrite已不推荐，而 error_page 方法我测试并未生效，详情可参考[这篇文章](https://cloud.tencent.com/developer/article/1504193)。\n\n#### 6. no-www与www\n\n是用户访问网站的时候，有 www 和没有 www 都显示一样的效果。\n\n因为我的域名比较长，这里以有 www 跳转到 无 www 为例。\n\n在配置中新增一个server，可以把80和443配置在一起，当然也可以分开，更详细内容可参考[这篇文章](https://www.jianshu.com/p/cec753473ec9)。\n\n```\n# www.example.com redirect example.com\nserver {\n    listen 80;\n    listen 443 ssl;\n    ssl_certificate \"/etc/pki/nginx/server.crt\";\n    ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout  10m;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n    server_name www.yourdomain.com;\n    return 301 https://yourdomain.com$request_uri;\n}\n\n```\n\n#### 7. 去掉 nginx 的版本号\n\n在响应数据的header中会显示nginx的版本号，如果不想显示，可以在配置文件中添加 server_tokens 配置。\n\n```\n# /etc/nginx/nginx.conf\n\nhttp {\n        server_tokens off;\n```\n\n加在 http 下面会全部隐藏，如果你想80端口隐藏，443端口不隐藏，那么把这个配置添加在 server 下面。\n\n#### 8. 调整日志格式\n\n修改 nginx.conf 中的 log_format，即可对 nginx 日志进行格式调整。\n\n默认格式\n\n```json\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\naccess_log  /var/log/nginx/access.log  main;\n```\n\n调整后\n\n```json\nlog_format  main  '{\"time\": \"$time_local\", \"status\": $status, \"remote_addr\": \"$remote_addr\", '\n                  '\"request\": \"$request\", \"body_bytes_sent\": $body_bytes_sent, '\n                  '\"request_time\": $request_time, \"http_referer\": \"$http_referer\", '\n                  '\"user_agent\": \"$http_user_agent\"}';\n\naccess_log  /var/log/nginx/access.log  main;\n```\n\n有些不可见字符，在 json 里面显示不友好，可以再调整一下\n\n```json\nlog_format  main  '$time_local | $status | $remote_addr | \"$request\" | '\n                      '\"$http_referer\" | \"$http_user_agent\" | '\n                      '$body_bytes_sent | $request_time';\n```\n\n","slug":"nginx-some-config","published":1,"updated":"2021-01-15T15:19:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp1o000j6rxicby93sm5","content":"<p>网站启用https，就需要配置数字证书。不想被探测器扫描，就禁止通过IP访问。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"1-安装，启动，停止，加载\"><a href=\"#1-安装，启动，停止，加载\" class=\"headerlink\" title=\"1. 安装，启动，停止，加载\"></a>1. 安装，启动，停止，加载</h4><p>以 centos7 为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动 </span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止</span><br><span class=\"line\">nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\"># 加载配置文件</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-修改默认显示内容\"><a href=\"#2-修改默认显示内容\" class=\"headerlink\" title=\"2. 修改默认显示内容\"></a>2. 修改默认显示内容</h4><p>nginx默认的首页，404，500等页面的显示内容太多了，容易暴露服务器信息，可以将 index.html, 404x.html, 500x.html 替换成自定义的文件，默认目录为 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html。</p>\n<h4 id=\"3-添加数字证书\"><a href=\"#3-添加数字证书\" class=\"headerlink\" title=\"3. 添加数字证书\"></a>3. 添加数字证书</h4><p>修改 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen       443 ssl http2 default_server;</span><br><span class=\"line\">listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">server_name  _;</span><br><span class=\"line\">root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">ssl_session_timeout  10m;</span><br><span class=\"line\">ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load configuration files for the default server block.</span><br><span class=\"line\">include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">proxy_pass http://localhost:4000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-禁止通过ip直接访问网站\"><a href=\"#4-禁止通过ip直接访问网站\" class=\"headerlink\" title=\"4. 禁止通过ip直接访问网站\"></a>4. 禁止通过ip直接访问网站</h4><p>如果不想服务器被扫描器探测，可以禁止通过IP访问网站。<br>修改 nginx.conf 文件，添加一个 server，注意不是修改原 server。</p>\n<p>新增一个server配置，这里将 80 和 443 写在了一起，也可以分开写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># forbidden ip:port access</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default; </span><br><span class=\"line\">    listen 443 ssl http2 default_server;</span><br><span class=\"line\">    ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    return 403;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改原server，将 server_name _ 更改为 server_name yourdomain.com;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改原server</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443; # 只保留443, 去掉 ssl http2 default_server;</span><br><span class=\"line\">    listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">    server_name  yourdomain.com;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 nginx -s reload 重新加载配置即可。</p>\n<h4 id=\"5-http跳转到https\"><a href=\"#5-http跳转到https\" class=\"headerlink\" title=\"5. http跳转到https\"></a>5. http跳转到https</h4><p>鉴于http越来越不安全，可以添加http跳转，在用户通过http访问的时候，自动跳转到 https。</p>\n<p>这里采用 return 301 重定来实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name yourdomain.com;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>网络上还有 rewrite 和 error_page 的方法，rewrite已不推荐，而 error_page 方法我测试并未生效，详情可参考<a href=\"https://cloud.tencent.com/developer/article/1504193\">这篇文章</a>。</p>\n<h4 id=\"6-no-www与www\"><a href=\"#6-no-www与www\" class=\"headerlink\" title=\"6. no-www与www\"></a>6. no-www与www</h4><p>是用户访问网站的时候，有 www 和没有 www 都显示一样的效果。</p>\n<p>因为我的域名比较长，这里以有 www 跳转到 无 www 为例。</p>\n<p>在配置中新增一个server，可以把80和443配置在一起，当然也可以分开，更详细内容可参考<a href=\"https://www.jianshu.com/p/cec753473ec9\">这篇文章</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># www.example.com redirect example.com</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    server_name www.yourdomain.com;</span><br><span class=\"line\">    return 301 https://yourdomain.com$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-去掉-nginx-的版本号\"><a href=\"#7-去掉-nginx-的版本号\" class=\"headerlink\" title=\"7. 去掉 nginx 的版本号\"></a>7. 去掉 nginx 的版本号</h4><p>在响应数据的header中会显示nginx的版本号，如果不想显示，可以在配置文件中添加 server_tokens 配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">        server_tokens off;</span><br></pre></td></tr></table></figure>\n\n<p>加在 http 下面会全部隐藏，如果你想80端口隐藏，443端口不隐藏，那么把这个配置添加在 server 下面。</p>\n<h4 id=\"8-调整日志格式\"><a href=\"#8-调整日志格式\" class=\"headerlink\" title=\"8. 调整日志格式\"></a>8. 调整日志格式</h4><p>修改 nginx.conf 中的 log_format，即可对 nginx 日志进行格式调整。</p>\n<p>默认格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &#x27;$remote_addr - $remote_user <span class=\"punctuation\">[</span>$time_local<span class=\"punctuation\">]</span> <span class=\"string\">&quot;$request&quot;</span> &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent <span class=\"string\">&quot;$http_referer&quot;</span> &#x27;</span><br><span class=\"line\">                      &#x27;<span class=\"string\">&quot;$http_user_agent&quot;</span> <span class=\"string\">&quot;$http_x_forwarded_for&quot;</span>&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure>\n\n<p>调整后</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &#x27;<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;time&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$time_local&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> $status<span class=\"punctuation\">,</span> <span class=\"attr\">&quot;remote_addr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$remote_addr&quot;</span><span class=\"punctuation\">,</span> &#x27;</span><br><span class=\"line\">                  &#x27;<span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$request&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;body_bytes_sent&quot;</span><span class=\"punctuation\">:</span> $body_bytes_sent<span class=\"punctuation\">,</span> &#x27;</span><br><span class=\"line\">                  &#x27;<span class=\"attr\">&quot;request_time&quot;</span><span class=\"punctuation\">:</span> $request_time<span class=\"punctuation\">,</span> <span class=\"attr\">&quot;http_referer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$http_referer&quot;</span><span class=\"punctuation\">,</span> &#x27;</span><br><span class=\"line\">                  &#x27;<span class=\"attr\">&quot;user_agent&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$http_user_agent&quot;</span><span class=\"punctuation\">&#125;</span>&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure>\n\n<p>有些不可见字符，在 json 里面显示不友好，可以再调整一下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &#x27;$time_local | $status | $remote_addr | <span class=\"string\">&quot;$request&quot;</span> | &#x27;</span><br><span class=\"line\">                      &#x27;<span class=\"string\">&quot;$http_referer&quot;</span> | <span class=\"string\">&quot;$http_user_agent&quot;</span> | &#x27;</span><br><span class=\"line\">                      &#x27;$body_bytes_sent | $request_time&#x27;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>网站启用https，就需要配置数字证书。不想被探测器扫描，就禁止通过IP访问。</p>","more":"<h4 id=\"1-安装，启动，停止，加载\"><a href=\"#1-安装，启动，停止，加载\" class=\"headerlink\" title=\"1. 安装，启动，停止，加载\"></a>1. 安装，启动，停止，加载</h4><p>以 centos7 为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动 </span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止</span><br><span class=\"line\">nginx -s stop</span><br><span class=\"line\"></span><br><span class=\"line\"># 加载配置文件</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-修改默认显示内容\"><a href=\"#2-修改默认显示内容\" class=\"headerlink\" title=\"2. 修改默认显示内容\"></a>2. 修改默认显示内容</h4><p>nginx默认的首页，404，500等页面的显示内容太多了，容易暴露服务器信息，可以将 index.html, 404x.html, 500x.html 替换成自定义的文件，默认目录为 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html。</p>\n<h4 id=\"3-添加数字证书\"><a href=\"#3-添加数字证书\" class=\"headerlink\" title=\"3. 添加数字证书\"></a>3. 添加数字证书</h4><p>修改 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf文件，然后将443端口的证书配置注释去掉，再将证书文件拷贝到相应目录，然后执行 nginx -s reload 即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen       443 ssl http2 default_server;</span><br><span class=\"line\">listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">server_name  _;</span><br><span class=\"line\">root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">ssl_session_timeout  10m;</span><br><span class=\"line\">ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"># Load configuration files for the default server block.</span><br><span class=\"line\">include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">proxy_pass http://localhost:4000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-禁止通过ip直接访问网站\"><a href=\"#4-禁止通过ip直接访问网站\" class=\"headerlink\" title=\"4. 禁止通过ip直接访问网站\"></a>4. 禁止通过ip直接访问网站</h4><p>如果不想服务器被扫描器探测，可以禁止通过IP访问网站。<br>修改 nginx.conf 文件，添加一个 server，注意不是修改原 server。</p>\n<p>新增一个server配置，这里将 80 和 443 写在了一起，也可以分开写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># forbidden ip:port access</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default; </span><br><span class=\"line\">    listen 443 ssl http2 default_server;</span><br><span class=\"line\">    ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    return 403;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改原server，将 server_name _ 更改为 server_name yourdomain.com;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改原server</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443; # 只保留443, 去掉 ssl http2 default_server;</span><br><span class=\"line\">    listen       [::]:443 ssl http2 default_server;</span><br><span class=\"line\">    server_name  yourdomain.com;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 nginx -s reload 重新加载配置即可。</p>\n<h4 id=\"5-http跳转到https\"><a href=\"#5-http跳转到https\" class=\"headerlink\" title=\"5. http跳转到https\"></a>5. http跳转到https</h4><p>鉴于http越来越不安全，可以添加http跳转，在用户通过http访问的时候，自动跳转到 https。</p>\n<p>这里采用 return 301 重定来实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name yourdomain.com;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>网络上还有 rewrite 和 error_page 的方法，rewrite已不推荐，而 error_page 方法我测试并未生效，详情可参考<a href=\"https://cloud.tencent.com/developer/article/1504193\">这篇文章</a>。</p>\n<h4 id=\"6-no-www与www\"><a href=\"#6-no-www与www\" class=\"headerlink\" title=\"6. no-www与www\"></a>6. no-www与www</h4><p>是用户访问网站的时候，有 www 和没有 www 都显示一样的效果。</p>\n<p>因为我的域名比较长，这里以有 www 跳转到 无 www 为例。</p>\n<p>在配置中新增一个server，可以把80和443配置在一起，当然也可以分开，更详细内容可参考<a href=\"https://www.jianshu.com/p/cec753473ec9\">这篇文章</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># www.example.com redirect example.com</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span><br><span class=\"line\">    ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">    ssl_session_timeout  10m;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    server_name www.yourdomain.com;</span><br><span class=\"line\">    return 301 https://yourdomain.com$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-去掉-nginx-的版本号\"><a href=\"#7-去掉-nginx-的版本号\" class=\"headerlink\" title=\"7. 去掉 nginx 的版本号\"></a>7. 去掉 nginx 的版本号</h4><p>在响应数据的header中会显示nginx的版本号，如果不想显示，可以在配置文件中添加 server_tokens 配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">        server_tokens off;</span><br></pre></td></tr></table></figure>\n\n<p>加在 http 下面会全部隐藏，如果你想80端口隐藏，443端口不隐藏，那么把这个配置添加在 server 下面。</p>\n<h4 id=\"8-调整日志格式\"><a href=\"#8-调整日志格式\" class=\"headerlink\" title=\"8. 调整日志格式\"></a>8. 调整日志格式</h4><p>修改 nginx.conf 中的 log_format，即可对 nginx 日志进行格式调整。</p>\n<p>默认格式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &#x27;$remote_addr - $remote_user <span class=\"punctuation\">[</span>$time_local<span class=\"punctuation\">]</span> <span class=\"string\">&quot;$request&quot;</span> &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent <span class=\"string\">&quot;$http_referer&quot;</span> &#x27;</span><br><span class=\"line\">                      &#x27;<span class=\"string\">&quot;$http_user_agent&quot;</span> <span class=\"string\">&quot;$http_x_forwarded_for&quot;</span>&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure>\n\n<p>调整后</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &#x27;<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;time&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$time_local&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> $status<span class=\"punctuation\">,</span> <span class=\"attr\">&quot;remote_addr&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$remote_addr&quot;</span><span class=\"punctuation\">,</span> &#x27;</span><br><span class=\"line\">                  &#x27;<span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$request&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;body_bytes_sent&quot;</span><span class=\"punctuation\">:</span> $body_bytes_sent<span class=\"punctuation\">,</span> &#x27;</span><br><span class=\"line\">                  &#x27;<span class=\"attr\">&quot;request_time&quot;</span><span class=\"punctuation\">:</span> $request_time<span class=\"punctuation\">,</span> <span class=\"attr\">&quot;http_referer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$http_referer&quot;</span><span class=\"punctuation\">,</span> &#x27;</span><br><span class=\"line\">                  &#x27;<span class=\"attr\">&quot;user_agent&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$http_user_agent&quot;</span><span class=\"punctuation\">&#125;</span>&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">access_log  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure>\n\n<p>有些不可见字符，在 json 里面显示不友好，可以再调整一下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format  main  &#x27;$time_local | $status | $remote_addr | <span class=\"string\">&quot;$request&quot;</span> | &#x27;</span><br><span class=\"line\">                      &#x27;<span class=\"string\">&quot;$http_referer&quot;</span> | <span class=\"string\">&quot;$http_user_agent&quot;</span> | &#x27;</span><br><span class=\"line\">                      &#x27;$body_bytes_sent | $request_time&#x27;;</span><br></pre></td></tr></table></figure>"},{"title":"supervisor 简单使用","abbrlink":"32dc2f8e","_content":"\nSupervisor是一个进程控制软件，它使用 Python 编写，可用来控制，守护 Linux 系统上的进程，它还提供了 http, rpc 服务接口，比 pm2 使用起来更舒服。\n\n\n<!-- more -->\n\n#### supervisor 安装\n\n推荐使用`pip`来安装 supervisor，这样安装的就是最新版本，当然，也可以使用`yum`或`apt`来安装。\n\n```shell\npip3 install supervisor\n```\n\n安装完成后，会在`/usr/local/bin`目录下生成三个可执行文件，分别为`supervisord`，`supervisorctl`和`echo_supervisord_conf`，执行`supervisord -v`查看是否安装成功。\n\n```shell\nsupervisord -v\n4.2.2\n```\n\n这 3 个文件，通过文件名，对其功能，就能猜个八九不离十了吧，这里就不再赘述了。\n\n#### 创建配置文件\n\n和使用 yum 安装 supervisor 不同，使用 pip 安装 supervisor  之后，并不会生成配置文件，需要自己手动生成。执行 `echo_supervisord_conf`命令，生成配置文件。\n\n```shell\necho_supervisord_conf > /etc/supervisord.conf \n```\n\n简单使用只需要修改几个选项即可，详细配置可以参考[官方文档](http://supervisord.org/configuration.html)。\n\n**1. 开启 HTTP 服务**\n\n```ini\n;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n;修改为, 如果需要用户名密码，可以开启用户名和密码\n[inet_http_server]          ; inet (TCP) server disabled by default\nport=*:9001                 ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n```\n\n**2.指定守护进程配置文件目录**\n\n```ini\n;[include]\n;files = relative/directory/*.ini\n\n;修改为\n[include]\nfiles = supervisord.d/*.ini\n```\n\nsupervisord.d 目录为相对目录，需要和 supervisord.conf 文件同级，需要手动创建。\n\n```shell\nmkdir -p /etc/supervisord.d\n```\n\n#### 启动 supervisord\n\n配置文件设置完成后，执行一条简单的命令，即可启动 supervisord 服务。\n\n```shell\nsupervisord -c /etc/supervisord.conf\n```\n\n然后通过`ps -ef | grep supervisord`或`supervisorctl status`查看 supervisord 是否启动成功。\n\n#### 守护进行配置文件\n\nsupervisord 启动成功之后，接下来就该让他发挥作用，来守护我们的进程了。\n\n在 /etc/supervisord.d 目录下创建对应配置文件，下面以 flask 为例，详细说明配置项。\n\nsupermonitor.ini\n\n```ini\n[program:flask-app]\ndirectory = /home/flask-app\ncommand = python3 /home/flask-app/app.py\nautostart = true\nautorestart = true\nstartsecs = 2\nuser = root\nstderr_logfile = /home/flask-app/log/error.log\nstdout_logfile = /home/flask-app/log/output.log\nredirect_stderr = false\nstdout_logfile_maxbytes = 20MB\nstdout_logfile_backups = 10\n```\n\n- autostart，自动启动，执行 supervisorctl 命令后，自动启动\n- command 可以是相对目录，也可以为绝对目录\n- user 指定以什么用户来执行\n- stderr_logfile 和 stdout_logfile 必须为绝对目录，如果不想打印 log，可以将其设为 NONE\n\n#### supervisorctl 一些常用命令\n\n| 命令    | 含义             |\n| ------- | ---------------- |\n| status  | 查看所有进程状态 |\n| stop    | 停止某个进程     |\n| start   | 启动某个进程     |\n| restart | 重启某个进程     |\n| update  | 更新配置文件     |\n| reload  | 重启所有进程     |\n\n#### HTTP服务\n\n在配置文件 (supervisord.conf) 中开启 inet_http_server 选项之后，可以通过 http 来管理进程。\n\n![WEB界面](/images/image-20210916182124338.png)\n\n---\n\n参考: http://supervisord.org/","source":"_posts/supervisor-usage.md","raw":"---\ntitle: supervisor 简单使用\ntags:\n  - python\n  - supervisor\nabbrlink: 32dc2f8e\n---\n\nSupervisor是一个进程控制软件，它使用 Python 编写，可用来控制，守护 Linux 系统上的进程，它还提供了 http, rpc 服务接口，比 pm2 使用起来更舒服。\n\n\n<!-- more -->\n\n#### supervisor 安装\n\n推荐使用`pip`来安装 supervisor，这样安装的就是最新版本，当然，也可以使用`yum`或`apt`来安装。\n\n```shell\npip3 install supervisor\n```\n\n安装完成后，会在`/usr/local/bin`目录下生成三个可执行文件，分别为`supervisord`，`supervisorctl`和`echo_supervisord_conf`，执行`supervisord -v`查看是否安装成功。\n\n```shell\nsupervisord -v\n4.2.2\n```\n\n这 3 个文件，通过文件名，对其功能，就能猜个八九不离十了吧，这里就不再赘述了。\n\n#### 创建配置文件\n\n和使用 yum 安装 supervisor 不同，使用 pip 安装 supervisor  之后，并不会生成配置文件，需要自己手动生成。执行 `echo_supervisord_conf`命令，生成配置文件。\n\n```shell\necho_supervisord_conf > /etc/supervisord.conf \n```\n\n简单使用只需要修改几个选项即可，详细配置可以参考[官方文档](http://supervisord.org/configuration.html)。\n\n**1. 开启 HTTP 服务**\n\n```ini\n;[inet_http_server]         ; inet (TCP) server disabled by default\n;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n\n;修改为, 如果需要用户名密码，可以开启用户名和密码\n[inet_http_server]          ; inet (TCP) server disabled by default\nport=*:9001                 ; ip_address:port specifier, *:port for all iface\n;username=user              ; default is no username (open server)\n;password=123               ; default is no password (open server)\n```\n\n**2.指定守护进程配置文件目录**\n\n```ini\n;[include]\n;files = relative/directory/*.ini\n\n;修改为\n[include]\nfiles = supervisord.d/*.ini\n```\n\nsupervisord.d 目录为相对目录，需要和 supervisord.conf 文件同级，需要手动创建。\n\n```shell\nmkdir -p /etc/supervisord.d\n```\n\n#### 启动 supervisord\n\n配置文件设置完成后，执行一条简单的命令，即可启动 supervisord 服务。\n\n```shell\nsupervisord -c /etc/supervisord.conf\n```\n\n然后通过`ps -ef | grep supervisord`或`supervisorctl status`查看 supervisord 是否启动成功。\n\n#### 守护进行配置文件\n\nsupervisord 启动成功之后，接下来就该让他发挥作用，来守护我们的进程了。\n\n在 /etc/supervisord.d 目录下创建对应配置文件，下面以 flask 为例，详细说明配置项。\n\nsupermonitor.ini\n\n```ini\n[program:flask-app]\ndirectory = /home/flask-app\ncommand = python3 /home/flask-app/app.py\nautostart = true\nautorestart = true\nstartsecs = 2\nuser = root\nstderr_logfile = /home/flask-app/log/error.log\nstdout_logfile = /home/flask-app/log/output.log\nredirect_stderr = false\nstdout_logfile_maxbytes = 20MB\nstdout_logfile_backups = 10\n```\n\n- autostart，自动启动，执行 supervisorctl 命令后，自动启动\n- command 可以是相对目录，也可以为绝对目录\n- user 指定以什么用户来执行\n- stderr_logfile 和 stdout_logfile 必须为绝对目录，如果不想打印 log，可以将其设为 NONE\n\n#### supervisorctl 一些常用命令\n\n| 命令    | 含义             |\n| ------- | ---------------- |\n| status  | 查看所有进程状态 |\n| stop    | 停止某个进程     |\n| start   | 启动某个进程     |\n| restart | 重启某个进程     |\n| update  | 更新配置文件     |\n| reload  | 重启所有进程     |\n\n#### HTTP服务\n\n在配置文件 (supervisord.conf) 中开启 inet_http_server 选项之后，可以通过 http 来管理进程。\n\n![WEB界面](/images/image-20210916182124338.png)\n\n---\n\n参考: http://supervisord.org/","slug":"supervisor-usage","published":1,"date":"2022-04-06T07:48:55.661Z","updated":"2021-09-16T10:36:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp1p000l6rxi5wk62mpy","content":"<p>Supervisor是一个进程控制软件，它使用 Python 编写，可用来控制，守护 Linux 系统上的进程，它还提供了 http, rpc 服务接口，比 pm2 使用起来更舒服。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"supervisor-安装\"><a href=\"#supervisor-安装\" class=\"headerlink\" title=\"supervisor 安装\"></a>supervisor 安装</h4><p>推荐使用<code>pip</code>来安装 supervisor，这样安装的就是最新版本，当然，也可以使用<code>yum</code>或<code>apt</code>来安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install supervisor</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，会在<code>/usr/local/bin</code>目录下生成三个可执行文件，分别为<code>supervisord</code>，<code>supervisorctl</code>和<code>echo_supervisord_conf</code>，执行<code>supervisord -v</code>查看是否安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -v</span><br><span class=\"line\">4.2.2</span><br></pre></td></tr></table></figure>\n\n<p>这 3 个文件，通过文件名，对其功能，就能猜个八九不离十了吧，这里就不再赘述了。</p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>和使用 yum 安装 supervisor 不同，使用 pip 安装 supervisor  之后，并不会生成配置文件，需要自己手动生成。执行 <code>echo_supervisord_conf</code>命令，生成配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf </span><br></pre></td></tr></table></figure>\n\n<p>简单使用只需要修改几个选项即可，详细配置可以参考<a href=\"http://supervisord.org/configuration.html\">官方文档</a>。</p>\n<p><strong>1. 开启 HTTP 服务</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">;[inet_http_server]         ; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"comment\">;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"comment\">;username=user              ; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"comment\">;password=123               ; default is no password (open server)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;修改为, 如果需要用户名密码，可以开启用户名和密码</span></span><br><span class=\"line\"><span class=\"section\">[inet_http_server]</span>          <span class=\"comment\">; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=*:<span class=\"number\">9001</span>                 <span class=\"comment\">; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"comment\">;username=user              ; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"comment\">;password=123               ; default is no password (open server)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.指定守护进程配置文件目录</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">;[include]</span></span><br><span class=\"line\"><span class=\"comment\">;files = relative/directory/*.ini</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;修改为</span></span><br><span class=\"line\"><span class=\"section\">[include]</span></span><br><span class=\"line\"><span class=\"attr\">files</span> = supervisord.d/*.ini</span><br></pre></td></tr></table></figure>\n\n<p>supervisord.d 目录为相对目录，需要和 supervisord.conf 文件同级，需要手动创建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/supervisord.d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-supervisord\"><a href=\"#启动-supervisord\" class=\"headerlink\" title=\"启动 supervisord\"></a>启动 supervisord</h4><p>配置文件设置完成后，执行一条简单的命令，即可启动 supervisord 服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>ps -ef | grep supervisord</code>或<code>supervisorctl status</code>查看 supervisord 是否启动成功。</p>\n<h4 id=\"守护进行配置文件\"><a href=\"#守护进行配置文件\" class=\"headerlink\" title=\"守护进行配置文件\"></a>守护进行配置文件</h4><p>supervisord 启动成功之后，接下来就该让他发挥作用，来守护我们的进程了。</p>\n<p>在 &#x2F;etc&#x2F;supervisord.d 目录下创建对应配置文件，下面以 flask 为例，详细说明配置项。</p>\n<p>supermonitor.ini</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:flask-app]</span></span><br><span class=\"line\"><span class=\"attr\">directory</span> = /home/flask-app</span><br><span class=\"line\"><span class=\"attr\">command</span> = python3 /home/flask-app/app.py</span><br><span class=\"line\"><span class=\"attr\">autostart</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">user</span> = root</span><br><span class=\"line\"><span class=\"attr\">stderr_logfile</span> = /home/flask-app/log/error.log</span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span> = /home/flask-app/log/output.log</span><br><span class=\"line\"><span class=\"attr\">redirect_stderr</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span> = <span class=\"number\">20</span>MB</span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span> = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>autostart，自动启动，执行 supervisorctl 命令后，自动启动</li>\n<li>command 可以是相对目录，也可以为绝对目录</li>\n<li>user 指定以什么用户来执行</li>\n<li>stderr_logfile 和 stdout_logfile 必须为绝对目录，如果不想打印 log，可以将其设为 NONE</li>\n</ul>\n<h4 id=\"supervisorctl-一些常用命令\"><a href=\"#supervisorctl-一些常用命令\" class=\"headerlink\" title=\"supervisorctl 一些常用命令\"></a>supervisorctl 一些常用命令</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>status</td>\n<td>查看所有进程状态</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>停止某个进程</td>\n</tr>\n<tr>\n<td>start</td>\n<td>启动某个进程</td>\n</tr>\n<tr>\n<td>restart</td>\n<td>重启某个进程</td>\n</tr>\n<tr>\n<td>update</td>\n<td>更新配置文件</td>\n</tr>\n<tr>\n<td>reload</td>\n<td>重启所有进程</td>\n</tr>\n</tbody></table>\n<h4 id=\"HTTP服务\"><a href=\"#HTTP服务\" class=\"headerlink\" title=\"HTTP服务\"></a>HTTP服务</h4><p>在配置文件 (supervisord.conf) 中开启 inet_http_server 选项之后，可以通过 http 来管理进程。</p>\n<p><img src=\"/images/image-20210916182124338.png\" alt=\"WEB界面\"></p>\n<hr>\n<p>参考: <a href=\"http://supervisord.org/\">http://supervisord.org/</a></p>\n","site":{"data":{}},"excerpt":"<p>Supervisor是一个进程控制软件，它使用 Python 编写，可用来控制，守护 Linux 系统上的进程，它还提供了 http, rpc 服务接口，比 pm2 使用起来更舒服。</p>","more":"<h4 id=\"supervisor-安装\"><a href=\"#supervisor-安装\" class=\"headerlink\" title=\"supervisor 安装\"></a>supervisor 安装</h4><p>推荐使用<code>pip</code>来安装 supervisor，这样安装的就是最新版本，当然，也可以使用<code>yum</code>或<code>apt</code>来安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install supervisor</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，会在<code>/usr/local/bin</code>目录下生成三个可执行文件，分别为<code>supervisord</code>，<code>supervisorctl</code>和<code>echo_supervisord_conf</code>，执行<code>supervisord -v</code>查看是否安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -v</span><br><span class=\"line\">4.2.2</span><br></pre></td></tr></table></figure>\n\n<p>这 3 个文件，通过文件名，对其功能，就能猜个八九不离十了吧，这里就不再赘述了。</p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>和使用 yum 安装 supervisor 不同，使用 pip 安装 supervisor  之后，并不会生成配置文件，需要自己手动生成。执行 <code>echo_supervisord_conf</code>命令，生成配置文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo_supervisord_conf &gt; /etc/supervisord.conf </span><br></pre></td></tr></table></figure>\n\n<p>简单使用只需要修改几个选项即可，详细配置可以参考<a href=\"http://supervisord.org/configuration.html\">官方文档</a>。</p>\n<p><strong>1. 开启 HTTP 服务</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">;[inet_http_server]         ; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"comment\">;port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"comment\">;username=user              ; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"comment\">;password=123               ; default is no password (open server)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;修改为, 如果需要用户名密码，可以开启用户名和密码</span></span><br><span class=\"line\"><span class=\"section\">[inet_http_server]</span>          <span class=\"comment\">; inet (TCP) server disabled by default</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=*:<span class=\"number\">9001</span>                 <span class=\"comment\">; ip_address:port specifier, *:port for all iface</span></span><br><span class=\"line\"><span class=\"comment\">;username=user              ; default is no username (open server)</span></span><br><span class=\"line\"><span class=\"comment\">;password=123               ; default is no password (open server)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2.指定守护进程配置文件目录</strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">;[include]</span></span><br><span class=\"line\"><span class=\"comment\">;files = relative/directory/*.ini</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;修改为</span></span><br><span class=\"line\"><span class=\"section\">[include]</span></span><br><span class=\"line\"><span class=\"attr\">files</span> = supervisord.d/*.ini</span><br></pre></td></tr></table></figure>\n\n<p>supervisord.d 目录为相对目录，需要和 supervisord.conf 文件同级，需要手动创建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/supervisord.d</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-supervisord\"><a href=\"#启动-supervisord\" class=\"headerlink\" title=\"启动 supervisord\"></a>启动 supervisord</h4><p>配置文件设置完成后，执行一条简单的命令，即可启动 supervisord 服务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后通过<code>ps -ef | grep supervisord</code>或<code>supervisorctl status</code>查看 supervisord 是否启动成功。</p>\n<h4 id=\"守护进行配置文件\"><a href=\"#守护进行配置文件\" class=\"headerlink\" title=\"守护进行配置文件\"></a>守护进行配置文件</h4><p>supervisord 启动成功之后，接下来就该让他发挥作用，来守护我们的进程了。</p>\n<p>在 &#x2F;etc&#x2F;supervisord.d 目录下创建对应配置文件，下面以 flask 为例，详细说明配置项。</p>\n<p>supermonitor.ini</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:flask-app]</span></span><br><span class=\"line\"><span class=\"attr\">directory</span> = /home/flask-app</span><br><span class=\"line\"><span class=\"attr\">command</span> = python3 /home/flask-app/app.py</span><br><span class=\"line\"><span class=\"attr\">autostart</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">user</span> = root</span><br><span class=\"line\"><span class=\"attr\">stderr_logfile</span> = /home/flask-app/log/error.log</span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span> = /home/flask-app/log/output.log</span><br><span class=\"line\"><span class=\"attr\">redirect_stderr</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span> = <span class=\"number\">20</span>MB</span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span> = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>autostart，自动启动，执行 supervisorctl 命令后，自动启动</li>\n<li>command 可以是相对目录，也可以为绝对目录</li>\n<li>user 指定以什么用户来执行</li>\n<li>stderr_logfile 和 stdout_logfile 必须为绝对目录，如果不想打印 log，可以将其设为 NONE</li>\n</ul>\n<h4 id=\"supervisorctl-一些常用命令\"><a href=\"#supervisorctl-一些常用命令\" class=\"headerlink\" title=\"supervisorctl 一些常用命令\"></a>supervisorctl 一些常用命令</h4><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>status</td>\n<td>查看所有进程状态</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>停止某个进程</td>\n</tr>\n<tr>\n<td>start</td>\n<td>启动某个进程</td>\n</tr>\n<tr>\n<td>restart</td>\n<td>重启某个进程</td>\n</tr>\n<tr>\n<td>update</td>\n<td>更新配置文件</td>\n</tr>\n<tr>\n<td>reload</td>\n<td>重启所有进程</td>\n</tr>\n</tbody></table>\n<h4 id=\"HTTP服务\"><a href=\"#HTTP服务\" class=\"headerlink\" title=\"HTTP服务\"></a>HTTP服务</h4><p>在配置文件 (supervisord.conf) 中开启 inet_http_server 选项之后，可以通过 http 来管理进程。</p>\n<p><img src=\"/images/image-20210916182124338.png\" alt=\"WEB界面\"></p>\n<hr>\n<p>参考: <a href=\"http://supervisord.org/\">http://supervisord.org/</a></p>"},{"title":"【算法基础】字典树的基本特征","abbrlink":"d8052ccb","date":"2021-01-14T15:06:46.000Z","_content":"\n字典树，即 Trie树，又称单词查找树或键树，是一种树形结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。\n\n\n<!-- more -->\n\n#### 基本结构\n\n![结构示意](/images/image-20210110230804739.png)\n\n#### 基本特征\n\n1. 结点本身不存完整单词；\n2. 从根结点到某一结点，路径上经过的字符连接起来，为该结点对应的 字符串； \n3. 每个结点的所有子结点路径代表的字符都不相同；\n4. 节点可以存储额外信息，比如词频；\n\n\n#### 节点内部实现\n\n![节点内部实现](/images/image-20210110231246455.png)\n\nTrie 树的核心思想是空间换时间。 利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。\n\n#### Leetcode实战题目\n\n[208.实现Trie(前缀树)](https://leetcode-cn.com/problems/implement-trie-prefix-tree/)\n\n```python\nclass Trie:\n    def __init__(self):\n        self.root = {}\n        self.end_of_word = \"#\"\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            node = node.setdefault(char, {})\n        node[self.end_of_word] = self.end_of_word\n\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return self.end_of_word in node\n\n    def startsWith(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node:\n                return False\n            node = node[char]\n        return True\n```\n\n","source":"_posts/trie-prefix-tree.md","raw":"---\ntitle: 【算法基础】字典树的基本特征\ntags:\n  - leetcode\nabbrlink: d8052ccb\ndate: 2021-01-14 23:06:46\n---\n\n字典树，即 Trie树，又称单词查找树或键树，是一种树形结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。\n\n\n<!-- more -->\n\n#### 基本结构\n\n![结构示意](/images/image-20210110230804739.png)\n\n#### 基本特征\n\n1. 结点本身不存完整单词；\n2. 从根结点到某一结点，路径上经过的字符连接起来，为该结点对应的 字符串； \n3. 每个结点的所有子结点路径代表的字符都不相同；\n4. 节点可以存储额外信息，比如词频；\n\n\n#### 节点内部实现\n\n![节点内部实现](/images/image-20210110231246455.png)\n\nTrie 树的核心思想是空间换时间。 利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。\n\n#### Leetcode实战题目\n\n[208.实现Trie(前缀树)](https://leetcode-cn.com/problems/implement-trie-prefix-tree/)\n\n```python\nclass Trie:\n    def __init__(self):\n        self.root = {}\n        self.end_of_word = \"#\"\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            node = node.setdefault(char, {})\n        node[self.end_of_word] = self.end_of_word\n\n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return False\n            node = node[char]\n        return self.end_of_word in node\n\n    def startsWith(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node:\n                return False\n            node = node[char]\n        return True\n```\n\n","slug":"trie-prefix-tree","published":1,"updated":"2021-01-17T09:36:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp1p000n6rxi5g4y5ne3","content":"<p>字典树，即 Trie树，又称单词查找树或键树，是一种树形结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h4><p><img src=\"/images/image-20210110230804739.png\" alt=\"结构示意\"></p>\n<h4 id=\"基本特征\"><a href=\"#基本特征\" class=\"headerlink\" title=\"基本特征\"></a>基本特征</h4><ol>\n<li>结点本身不存完整单词；</li>\n<li>从根结点到某一结点，路径上经过的字符连接起来，为该结点对应的 字符串； </li>\n<li>每个结点的所有子结点路径代表的字符都不相同；</li>\n<li>节点可以存储额外信息，比如词频；</li>\n</ol>\n<h4 id=\"节点内部实现\"><a href=\"#节点内部实现\" class=\"headerlink\" title=\"节点内部实现\"></a>节点内部实现</h4><p><img src=\"/images/image-20210110231246455.png\" alt=\"节点内部实现\"></p>\n<p>Trie 树的核心思想是空间换时间。 利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p>\n<h4 id=\"Leetcode实战题目\"><a href=\"#Leetcode实战题目\" class=\"headerlink\" title=\"Leetcode实战题目\"></a>Leetcode实战题目</h4><p><a href=\"https://leetcode-cn.com/problems/implement-trie-prefix-tree/\">208.实现Trie(前缀树)</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.root = &#123;&#125;</span><br><span class=\"line\">        self.end_of_word = <span class=\"string\">&quot;#&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            node = node.setdefault(char, &#123;&#125;)</span><br><span class=\"line\">        node[self.end_of_word] = self.end_of_word</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.end_of_word <span class=\"keyword\">in</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">startsWith</span>(<span class=\"params\">self, prefix</span>):</span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>字典树，即 Trie树，又称单词查找树或键树，是一种树形结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。</p>","more":"<h4 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h4><p><img src=\"/images/image-20210110230804739.png\" alt=\"结构示意\"></p>\n<h4 id=\"基本特征\"><a href=\"#基本特征\" class=\"headerlink\" title=\"基本特征\"></a>基本特征</h4><ol>\n<li>结点本身不存完整单词；</li>\n<li>从根结点到某一结点，路径上经过的字符连接起来，为该结点对应的 字符串； </li>\n<li>每个结点的所有子结点路径代表的字符都不相同；</li>\n<li>节点可以存储额外信息，比如词频；</li>\n</ol>\n<h4 id=\"节点内部实现\"><a href=\"#节点内部实现\" class=\"headerlink\" title=\"节点内部实现\"></a>节点内部实现</h4><p><img src=\"/images/image-20210110231246455.png\" alt=\"节点内部实现\"></p>\n<p>Trie 树的核心思想是空间换时间。 利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p>\n<h4 id=\"Leetcode实战题目\"><a href=\"#Leetcode实战题目\" class=\"headerlink\" title=\"Leetcode实战题目\"></a>Leetcode实战题目</h4><p><a href=\"https://leetcode-cn.com/problems/implement-trie-prefix-tree/\">208.实现Trie(前缀树)</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Trie</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.root = &#123;&#125;</span><br><span class=\"line\">        self.end_of_word = <span class=\"string\">&quot;#&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">insert</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            node = node.setdefault(char, &#123;&#125;)</span><br><span class=\"line\">        node[self.end_of_word] = self.end_of_word</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, word</span>):</span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.end_of_word <span class=\"keyword\">in</span> node</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">startsWith</span>(<span class=\"params\">self, prefix</span>):</span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>"},{"title":"【算法基础】并查集","abbrlink":"85dc8b23","date":"2021-01-13T15:06:46.000Z","_content":"\n并查集实用于组团、配对问题。\n\n\n<!-- more -->\n\n#### 基本操作\n\n- makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合；\n- unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在 的集合不相交，如果相交则不合并；\n- find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元 素是否位于同一个集合，只要将它们各自的代表比较一下就可以了；\n\n#### 初始化\n\n![初始化](/images/image-20210110230804740.png)\n\n\n#### 查询与合并\n\n![查询与合并](/images/image-20210110230804741.png)\n\n#### 路径压缩\n\n![路径压缩](/images/image-20210110230804742.png)\n\n#### 代码模板\n\n```python\nclass DisjointSet:\n    \n    def init(self, n):\n        p = [i for i in range(n)]\n        return p\n\n    def union(self, p, i, j):\n        p1 = self.parent(p, i)\n        p2 = self.parent(p, j)\n        p[p1] = p2\n\n    def parent(self, p, i):\n        root = i\n        while p[root] != root:\n            root = p[root]\n\n        # 路径压缩\n        while p[i] != i:\n            i, p[i] = p[i], root\n        return root\n```\n\n","source":"_posts/union-find-sets.md","raw":"---\ntitle: 【算法基础】并查集\ntags:\n  - leetcode\nabbrlink: 85dc8b23\ndate: 2021-01-13 23:06:46\n---\n\n并查集实用于组团、配对问题。\n\n\n<!-- more -->\n\n#### 基本操作\n\n- makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合；\n- unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在 的集合不相交，如果相交则不合并；\n- find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元 素是否位于同一个集合，只要将它们各自的代表比较一下就可以了；\n\n#### 初始化\n\n![初始化](/images/image-20210110230804740.png)\n\n\n#### 查询与合并\n\n![查询与合并](/images/image-20210110230804741.png)\n\n#### 路径压缩\n\n![路径压缩](/images/image-20210110230804742.png)\n\n#### 代码模板\n\n```python\nclass DisjointSet:\n    \n    def init(self, n):\n        p = [i for i in range(n)]\n        return p\n\n    def union(self, p, i, j):\n        p1 = self.parent(p, i)\n        p2 = self.parent(p, j)\n        p[p1] = p2\n\n    def parent(self, p, i):\n        root = i\n        while p[root] != root:\n            root = p[root]\n\n        # 路径压缩\n        while p[i] != i:\n            i, p[i] = p[i], root\n        return root\n```\n\n","slug":"union-find-sets","published":1,"updated":"2021-01-17T09:36:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp1q000q6rxi1pqs2c8u","content":"<p>并查集实用于组团、配对问题。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><ul>\n<li>makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合；</li>\n<li>unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在 的集合不相交，如果相交则不合并；</li>\n<li>find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元 素是否位于同一个集合，只要将它们各自的代表比较一下就可以了；</li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p><img src=\"/images/image-20210110230804740.png\" alt=\"初始化\"></p>\n<h4 id=\"查询与合并\"><a href=\"#查询与合并\" class=\"headerlink\" title=\"查询与合并\"></a>查询与合并</h4><p><img src=\"/images/image-20210110230804741.png\" alt=\"查询与合并\"></p>\n<h4 id=\"路径压缩\"><a href=\"#路径压缩\" class=\"headerlink\" title=\"路径压缩\"></a>路径压缩</h4><p><img src=\"/images/image-20210110230804742.png\" alt=\"路径压缩\"></p>\n<h4 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DisjointSet</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">init</span>(<span class=\"params\">self, n</span>):</span><br><span class=\"line\">        p = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">union</span>(<span class=\"params\">self, p, i, j</span>):</span><br><span class=\"line\">        p1 = self.parent(p, i)</span><br><span class=\"line\">        p2 = self.parent(p, j)</span><br><span class=\"line\">        p[p1] = p2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parent</span>(<span class=\"params\">self, p, i</span>):</span><br><span class=\"line\">        root = i</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p[root] != root:</span><br><span class=\"line\">            root = p[root]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 路径压缩</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> p[i] != i:</span><br><span class=\"line\">            i, p[i] = p[i], root</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>并查集实用于组团、配对问题。</p>","more":"<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><ul>\n<li>makeSet(s)：建立一个新的并查集，其中包含 s 个单元素集合；</li>\n<li>unionSet(x, y)：把元素 x 和元素 y 所在的集合合并，要求 x 和 y 所在 的集合不相交，如果相交则不合并；</li>\n<li>find(x)：找到元素 x 所在的集合的代表，该操作也可以用于判断两个元 素是否位于同一个集合，只要将它们各自的代表比较一下就可以了；</li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p><img src=\"/images/image-20210110230804740.png\" alt=\"初始化\"></p>\n<h4 id=\"查询与合并\"><a href=\"#查询与合并\" class=\"headerlink\" title=\"查询与合并\"></a>查询与合并</h4><p><img src=\"/images/image-20210110230804741.png\" alt=\"查询与合并\"></p>\n<h4 id=\"路径压缩\"><a href=\"#路径压缩\" class=\"headerlink\" title=\"路径压缩\"></a>路径压缩</h4><p><img src=\"/images/image-20210110230804742.png\" alt=\"路径压缩\"></p>\n<h4 id=\"代码模板\"><a href=\"#代码模板\" class=\"headerlink\" title=\"代码模板\"></a>代码模板</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DisjointSet</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">init</span>(<span class=\"params\">self, n</span>):</span><br><span class=\"line\">        p = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">union</span>(<span class=\"params\">self, p, i, j</span>):</span><br><span class=\"line\">        p1 = self.parent(p, i)</span><br><span class=\"line\">        p2 = self.parent(p, j)</span><br><span class=\"line\">        p[p1] = p2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parent</span>(<span class=\"params\">self, p, i</span>):</span><br><span class=\"line\">        root = i</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p[root] != root:</span><br><span class=\"line\">            root = p[root]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 路径压缩</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> p[i] != i:</span><br><span class=\"line\">            i, p[i] = p[i], root</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>"},{"title":"在Centos7使用uWSGI部署Flask","abbrlink":"89e42a4b","_content":"\nFlask的部署方式有很多，常用的有Gunicorn、uWSGI、FastCGI、Gevent、Twisted和 tornado 等，这里简单介绍一下uWSGI，至于搭配 Nginx + uWSGI的部署方式，可以看另外一篇关于Nginx配置的文章。\n\n<!-- more -->\n\n---\n\n#### 环境\n\n操作系统：Centos 7\nuWSGI版本：2.0.18\nPython版本：3.6.8\n\n#### 安装\n\n```\nyum install uwsgi\nyum install uwsgi-plugin-python36\n```\n#### 启动\n\n可以通过命令行，也可以通过配置文件来启动 uwsgi。\n\n命令行方式启动\n```shell\nuwsgi --http-socket :5000 --plugins python36 --module myproject:app\n```\n\n注意 --plugins python36 参数必须在 --module myproject:app 参数前面。\n\n通过配置文件启动，这里以 ini 格式为例，当然也支持 json, xml, yml 等格式。\n\n```shell\n### 启动命令\nuwsgi --ini uwsgi.ini\n或\nuwsgi uwsgi.ini # 必须以 ini 作为后缀\n```\n\n#### 配置文件\n\n在网上随便搜索 flask+uwsgi，就会出现许多的文章，可能是版本问题，没有一个是成功的。\n\n比如这个，根本连不上：\n```ini\n[uwsgi]\nmaster = true\nhome = venv\nwsgi-file = manage.py\ncallable = app\nsocket = :5000\nprocesses = 4\nthreads = 2\nbuffer-size = 32768\n```\n\n经过不停的试错，得到了下面的这个最简单的配置，亲测有效。\n```ini\n[uwsgi]\nhttp-socket = 127.0.0.1:5000  #1\nplugins = python36  #2\nmodule = myapp:app  #3\n```\n\n1. 这里不是 socket, 也不是 http, 而是 http-socket。官网原话 (Do not use `--http` when you have a frontend webserver or you are doing some form of benchmark, use `--http-socket`. Continue reading the quickstart to understand why.)。\n2. 插件是一定要安装的，要不然会报错。\n3. myapp 为 ```flask``` 的主程序，里面要有 app 这个 flask 对象。\n\n#### 记录Log\n\nuwsgi 有很多的 log 插件，以那种方式记录log，就需要安装 对应的插件，然后在配置文件中，添加 logger 配置即可。它支持多种log记录方式，包括file、socket、syslog、redis、MongoDB、ZeroMq等等，还支持加密传输。\n在配置文件中，添加 logger 即可。\n\n安装日志插件\n\n```shell\n# file\nyum install uwsgi-logger-file\n# syslog\nyum install uwsgi-logger-syslog\n# redis\n# syslog\nyum install uwsgi-logger-redis\n```\n\n插件配置\n\n```ini\n[uwsgi]\n\n# 文件\nlogger = file:logfile=/var/log/uwsgi.log,maxsize=2000000\n\n# socket\nlogger = socket:/tmp/uwsgi.logsock\nlogger = socket:192.168.173.19:5050\n\n# syslog\nlogger = socket:syslog:uwsgi1234\nlogger = socket:syslog:uwsgi1234,local6\n\n# syslog\nlogger = socket:syslog:uwsgi1234\nlogger = socket:syslog:uwsgi1234,local6\n\n# remote syslog\nlogger = rsyslog:12.34.56.78:12345,uwsgi1234\n\n# redis\n# --logger redislog[:<host>,<command>,<prefix>]\nlogger = redislog:127.0.0.1:6379,publish uwsgi\nlogger = rredislog:/tmp/redis.sock,rpush foo,example.com\n\n# MongoDB\n# --logger mongodblog[:<host>,<collection>,<node>]\nlogger = mongodblog\nlogger = mongodblog:127.0.0.1:27017,uwsgi.logs\n\n# MongoDB\n# --logger mongodblog[:<host>,<collection>,<node>]\nlogger = mongodblog\nlogger = mongodblog:127.0.0.1:27017,uwsgi.logs\n\n# ZeroMQ\n# uwsgi --logger zeromq:tcp://192.168.173.18:9191 --socket :3031 --module werkzeug.testapp:test_app\n\n```\n\n完整的配置文件\n\n```ini\n[uwsgi]\n\nhttp-socket = 127.0.0.1:5000\nmodule = myproject:app\nplugins = python36,logfile\nlogger = file:/var/log/uwsgi.log,maxsize=2000000\n```\n\n#### 一些错误处理\n\n*1*. invalid request block size: 21573 (max 4096)...skip\n\n网上的解决方案是添加一个配置项 buffer-size = 32768 或者将 socket = :8000 改成 http = :8000，经过测试，如果直接添加 buffer-size = 32768，则访问无响应，如果改成 http = :8000，则 uwsgi 根本无法启动。\n\n解决方案：把 socket 改成 http-socket。\n\n*2*. no python application found\n\n安装 uwsgi-plugin-python  插件\n\n##### 题外话\n\n用 uwsgi 部署我在腾讯云上的 Flask 服务后，没几个请求，服务就被系统给 Killed 掉了，看来  uwsgi 对内存还是有一定要求的，对于只有 1G 内存的腾讯云，还是安心的使用 tornado 吧。\n\n---\n\n*参考*\n\nhttps://uwsgi-docs.readthedocs.io/en/latest/Configuration.html\nhttps://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi\nhttps://uwsgi-docs.readthedocs.io/en/latest/Logging.html","source":"_posts/uwsgi-for-flask.md","raw":"---\ntitle: 在Centos7使用uWSGI部署Flask\ntags:\n  - uwsgi\nabbrlink: 89e42a4b\n---\n\nFlask的部署方式有很多，常用的有Gunicorn、uWSGI、FastCGI、Gevent、Twisted和 tornado 等，这里简单介绍一下uWSGI，至于搭配 Nginx + uWSGI的部署方式，可以看另外一篇关于Nginx配置的文章。\n\n<!-- more -->\n\n---\n\n#### 环境\n\n操作系统：Centos 7\nuWSGI版本：2.0.18\nPython版本：3.6.8\n\n#### 安装\n\n```\nyum install uwsgi\nyum install uwsgi-plugin-python36\n```\n#### 启动\n\n可以通过命令行，也可以通过配置文件来启动 uwsgi。\n\n命令行方式启动\n```shell\nuwsgi --http-socket :5000 --plugins python36 --module myproject:app\n```\n\n注意 --plugins python36 参数必须在 --module myproject:app 参数前面。\n\n通过配置文件启动，这里以 ini 格式为例，当然也支持 json, xml, yml 等格式。\n\n```shell\n### 启动命令\nuwsgi --ini uwsgi.ini\n或\nuwsgi uwsgi.ini # 必须以 ini 作为后缀\n```\n\n#### 配置文件\n\n在网上随便搜索 flask+uwsgi，就会出现许多的文章，可能是版本问题，没有一个是成功的。\n\n比如这个，根本连不上：\n```ini\n[uwsgi]\nmaster = true\nhome = venv\nwsgi-file = manage.py\ncallable = app\nsocket = :5000\nprocesses = 4\nthreads = 2\nbuffer-size = 32768\n```\n\n经过不停的试错，得到了下面的这个最简单的配置，亲测有效。\n```ini\n[uwsgi]\nhttp-socket = 127.0.0.1:5000  #1\nplugins = python36  #2\nmodule = myapp:app  #3\n```\n\n1. 这里不是 socket, 也不是 http, 而是 http-socket。官网原话 (Do not use `--http` when you have a frontend webserver or you are doing some form of benchmark, use `--http-socket`. Continue reading the quickstart to understand why.)。\n2. 插件是一定要安装的，要不然会报错。\n3. myapp 为 ```flask``` 的主程序，里面要有 app 这个 flask 对象。\n\n#### 记录Log\n\nuwsgi 有很多的 log 插件，以那种方式记录log，就需要安装 对应的插件，然后在配置文件中，添加 logger 配置即可。它支持多种log记录方式，包括file、socket、syslog、redis、MongoDB、ZeroMq等等，还支持加密传输。\n在配置文件中，添加 logger 即可。\n\n安装日志插件\n\n```shell\n# file\nyum install uwsgi-logger-file\n# syslog\nyum install uwsgi-logger-syslog\n# redis\n# syslog\nyum install uwsgi-logger-redis\n```\n\n插件配置\n\n```ini\n[uwsgi]\n\n# 文件\nlogger = file:logfile=/var/log/uwsgi.log,maxsize=2000000\n\n# socket\nlogger = socket:/tmp/uwsgi.logsock\nlogger = socket:192.168.173.19:5050\n\n# syslog\nlogger = socket:syslog:uwsgi1234\nlogger = socket:syslog:uwsgi1234,local6\n\n# syslog\nlogger = socket:syslog:uwsgi1234\nlogger = socket:syslog:uwsgi1234,local6\n\n# remote syslog\nlogger = rsyslog:12.34.56.78:12345,uwsgi1234\n\n# redis\n# --logger redislog[:<host>,<command>,<prefix>]\nlogger = redislog:127.0.0.1:6379,publish uwsgi\nlogger = rredislog:/tmp/redis.sock,rpush foo,example.com\n\n# MongoDB\n# --logger mongodblog[:<host>,<collection>,<node>]\nlogger = mongodblog\nlogger = mongodblog:127.0.0.1:27017,uwsgi.logs\n\n# MongoDB\n# --logger mongodblog[:<host>,<collection>,<node>]\nlogger = mongodblog\nlogger = mongodblog:127.0.0.1:27017,uwsgi.logs\n\n# ZeroMQ\n# uwsgi --logger zeromq:tcp://192.168.173.18:9191 --socket :3031 --module werkzeug.testapp:test_app\n\n```\n\n完整的配置文件\n\n```ini\n[uwsgi]\n\nhttp-socket = 127.0.0.1:5000\nmodule = myproject:app\nplugins = python36,logfile\nlogger = file:/var/log/uwsgi.log,maxsize=2000000\n```\n\n#### 一些错误处理\n\n*1*. invalid request block size: 21573 (max 4096)...skip\n\n网上的解决方案是添加一个配置项 buffer-size = 32768 或者将 socket = :8000 改成 http = :8000，经过测试，如果直接添加 buffer-size = 32768，则访问无响应，如果改成 http = :8000，则 uwsgi 根本无法启动。\n\n解决方案：把 socket 改成 http-socket。\n\n*2*. no python application found\n\n安装 uwsgi-plugin-python  插件\n\n##### 题外话\n\n用 uwsgi 部署我在腾讯云上的 Flask 服务后，没几个请求，服务就被系统给 Killed 掉了，看来  uwsgi 对内存还是有一定要求的，对于只有 1G 内存的腾讯云，还是安心的使用 tornado 吧。\n\n---\n\n*参考*\n\nhttps://uwsgi-docs.readthedocs.io/en/latest/Configuration.html\nhttps://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi\nhttps://uwsgi-docs.readthedocs.io/en/latest/Logging.html","slug":"uwsgi-for-flask","published":1,"date":"2022-04-06T07:48:55.783Z","updated":"2021-01-15T13:47:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1nbtp1r000r6rxi6r74a33k","content":"<p>Flask的部署方式有很多，常用的有Gunicorn、uWSGI、FastCGI、Gevent、Twisted和 tornado 等，这里简单介绍一下uWSGI，至于搭配 Nginx + uWSGI的部署方式，可以看另外一篇关于Nginx配置的文章。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>操作系统：Centos 7<br>uWSGI版本：2.0.18<br>Python版本：3.6.8</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install uwsgi</span><br><span class=\"line\">yum install uwsgi-plugin-python36</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p>可以通过命令行，也可以通过配置文件来启动 uwsgi。</p>\n<p>命令行方式启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http-socket :5000 --plugins python36 --module myproject:app</span><br></pre></td></tr></table></figure>\n\n<p>注意 –plugins python36 参数必须在 –module myproject:app 参数前面。</p>\n<p>通过配置文件启动，这里以 ini 格式为例，当然也支持 json, xml, yml 等格式。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 启动命令</span></span></span><br><span class=\"line\">uwsgi --ini uwsgi.ini</span><br><span class=\"line\">或</span><br><span class=\"line\">uwsgi uwsgi.ini # 必须以 ini 作为后缀</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>在网上随便搜索 flask+uwsgi，就会出现许多的文章，可能是版本问题，没有一个是成功的。</p>\n<p>比如这个，根本连不上：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"attr\">master</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">home</span> = venv</span><br><span class=\"line\"><span class=\"attr\">wsgi-file</span> = manage.py</span><br><span class=\"line\"><span class=\"attr\">callable</span> = app</span><br><span class=\"line\"><span class=\"attr\">socket</span> = :<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">processes</span> = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">threads</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">buffer-size</span> = <span class=\"number\">32768</span></span><br></pre></td></tr></table></figure>\n\n<p>经过不停的试错，得到了下面的这个最简单的配置，亲测有效。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"attr\">http-socket</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5000</span>  <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span> = python36  <span class=\"comment\">#2</span></span><br><span class=\"line\"><span class=\"attr\">module</span> = myapp:app  <span class=\"comment\">#3</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这里不是 socket, 也不是 http, 而是 http-socket。官网原话 (Do not use <code>--http</code> when you have a frontend webserver or you are doing some form of benchmark, use <code>--http-socket</code>. Continue reading the quickstart to understand why.)。</li>\n<li>插件是一定要安装的，要不然会报错。</li>\n<li>myapp 为 <code>flask</code> 的主程序，里面要有 app 这个 flask 对象。</li>\n</ol>\n<h4 id=\"记录Log\"><a href=\"#记录Log\" class=\"headerlink\" title=\"记录Log\"></a>记录Log</h4><p>uwsgi 有很多的 log 插件，以那种方式记录log，就需要安装 对应的插件，然后在配置文件中，添加 logger 配置即可。它支持多种log记录方式，包括file、socket、syslog、redis、MongoDB、ZeroMq等等，还支持加密传输。<br>在配置文件中，添加 logger 即可。</p>\n<p>安装日志插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">file</span></span><br><span class=\"line\">yum install uwsgi-logger-file</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">syslog</span></span><br><span class=\"line\">yum install uwsgi-logger-syslog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">syslog</span></span><br><span class=\"line\">yum install uwsgi-logger-redis</span><br></pre></td></tr></table></figure>\n\n<p>插件配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = file:logfile=/var/log/uwsgi.log,maxsize=<span class=\"number\">2000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># socket</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:/tmp/uwsgi.logsock</span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:<span class=\"number\">192.168</span>.<span class=\"number\">173.19</span>:<span class=\"number\">5050</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># syslog</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234</span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234,local6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># syslog</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234</span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234,local6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># remote syslog</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = rsyslog:<span class=\"number\">12.34</span>.<span class=\"number\">56.78</span>:<span class=\"number\">12345</span>,uwsgi1234</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis</span></span><br><span class=\"line\"><span class=\"comment\"># --logger redislog[:&lt;host&gt;,&lt;command&gt;,&lt;prefix&gt;]</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = redislog:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>,publish uwsgi</span><br><span class=\"line\"><span class=\"attr\">logger</span> = rredislog:/tmp/redis.sock,rpush foo,example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># --logger mongodblog[:&lt;host&gt;,&lt;collection&gt;,&lt;node&gt;]</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog</span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">27017</span>,uwsgi.logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># --logger mongodblog[:&lt;host&gt;,&lt;collection&gt;,&lt;node&gt;]</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog</span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">27017</span>,uwsgi.logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ZeroMQ</span></span><br><span class=\"line\"><span class=\"comment\"># uwsgi --logger zeromq:tcp://192.168.173.18:9191 --socket :3031 --module werkzeug.testapp:test_app</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>完整的配置文件</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">http-socket</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">module</span> = myproject:app</span><br><span class=\"line\"><span class=\"attr\">plugins</span> = python36,logfile</span><br><span class=\"line\"><span class=\"attr\">logger</span> = file:/var/log/uwsgi.log,maxsize=<span class=\"number\">2000000</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一些错误处理\"><a href=\"#一些错误处理\" class=\"headerlink\" title=\"一些错误处理\"></a>一些错误处理</h4><p><em>1</em>. invalid request block size: 21573 (max 4096)…skip</p>\n<p>网上的解决方案是添加一个配置项 buffer-size &#x3D; 32768 或者将 socket &#x3D; :8000 改成 http &#x3D; :8000，经过测试，如果直接添加 buffer-size &#x3D; 32768，则访问无响应，如果改成 http &#x3D; :8000，则 uwsgi 根本无法启动。</p>\n<p>解决方案：把 socket 改成 http-socket。</p>\n<p><em>2</em>. no python application found</p>\n<p>安装 uwsgi-plugin-python  插件</p>\n<h5 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h5><p>用 uwsgi 部署我在腾讯云上的 Flask 服务后，没几个请求，服务就被系统给 Killed 掉了，看来  uwsgi 对内存还是有一定要求的，对于只有 1G 内存的腾讯云，还是安心的使用 tornado 吧。</p>\n<hr>\n<p><em>参考</em></p>\n<p><a href=\"https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html\">https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html</a><br><a href=\"https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi\">https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi</a><br><a href=\"https://uwsgi-docs.readthedocs.io/en/latest/Logging.html\">https://uwsgi-docs.readthedocs.io/en/latest/Logging.html</a></p>\n","site":{"data":{}},"excerpt":"<p>Flask的部署方式有很多，常用的有Gunicorn、uWSGI、FastCGI、Gevent、Twisted和 tornado 等，这里简单介绍一下uWSGI，至于搭配 Nginx + uWSGI的部署方式，可以看另外一篇关于Nginx配置的文章。</p>","more":"<hr>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>操作系统：Centos 7<br>uWSGI版本：2.0.18<br>Python版本：3.6.8</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install uwsgi</span><br><span class=\"line\">yum install uwsgi-plugin-python36</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><p>可以通过命令行，也可以通过配置文件来启动 uwsgi。</p>\n<p>命令行方式启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http-socket :5000 --plugins python36 --module myproject:app</span><br></pre></td></tr></table></figure>\n\n<p>注意 –plugins python36 参数必须在 –module myproject:app 参数前面。</p>\n<p>通过配置文件启动，这里以 ini 格式为例，当然也支持 json, xml, yml 等格式。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">## 启动命令</span></span></span><br><span class=\"line\">uwsgi --ini uwsgi.ini</span><br><span class=\"line\">或</span><br><span class=\"line\">uwsgi uwsgi.ini # 必须以 ini 作为后缀</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>在网上随便搜索 flask+uwsgi，就会出现许多的文章，可能是版本问题，没有一个是成功的。</p>\n<p>比如这个，根本连不上：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"attr\">master</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">home</span> = venv</span><br><span class=\"line\"><span class=\"attr\">wsgi-file</span> = manage.py</span><br><span class=\"line\"><span class=\"attr\">callable</span> = app</span><br><span class=\"line\"><span class=\"attr\">socket</span> = :<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">processes</span> = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">threads</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">buffer-size</span> = <span class=\"number\">32768</span></span><br></pre></td></tr></table></figure>\n\n<p>经过不停的试错，得到了下面的这个最简单的配置，亲测有效。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"attr\">http-socket</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5000</span>  <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span> = python36  <span class=\"comment\">#2</span></span><br><span class=\"line\"><span class=\"attr\">module</span> = myapp:app  <span class=\"comment\">#3</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这里不是 socket, 也不是 http, 而是 http-socket。官网原话 (Do not use <code>--http</code> when you have a frontend webserver or you are doing some form of benchmark, use <code>--http-socket</code>. Continue reading the quickstart to understand why.)。</li>\n<li>插件是一定要安装的，要不然会报错。</li>\n<li>myapp 为 <code>flask</code> 的主程序，里面要有 app 这个 flask 对象。</li>\n</ol>\n<h4 id=\"记录Log\"><a href=\"#记录Log\" class=\"headerlink\" title=\"记录Log\"></a>记录Log</h4><p>uwsgi 有很多的 log 插件，以那种方式记录log，就需要安装 对应的插件，然后在配置文件中，添加 logger 配置即可。它支持多种log记录方式，包括file、socket、syslog、redis、MongoDB、ZeroMq等等，还支持加密传输。<br>在配置文件中，添加 logger 即可。</p>\n<p>安装日志插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">file</span></span><br><span class=\"line\">yum install uwsgi-logger-file</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">syslog</span></span><br><span class=\"line\">yum install uwsgi-logger-syslog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">redis</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">syslog</span></span><br><span class=\"line\">yum install uwsgi-logger-redis</span><br></pre></td></tr></table></figure>\n\n<p>插件配置</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = file:logfile=/var/log/uwsgi.log,maxsize=<span class=\"number\">2000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># socket</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:/tmp/uwsgi.logsock</span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:<span class=\"number\">192.168</span>.<span class=\"number\">173.19</span>:<span class=\"number\">5050</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># syslog</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234</span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234,local6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># syslog</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234</span><br><span class=\"line\"><span class=\"attr\">logger</span> = socket:syslog:uwsgi1234,local6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># remote syslog</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = rsyslog:<span class=\"number\">12.34</span>.<span class=\"number\">56.78</span>:<span class=\"number\">12345</span>,uwsgi1234</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis</span></span><br><span class=\"line\"><span class=\"comment\"># --logger redislog[:&lt;host&gt;,&lt;command&gt;,&lt;prefix&gt;]</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = redislog:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>,publish uwsgi</span><br><span class=\"line\"><span class=\"attr\">logger</span> = rredislog:/tmp/redis.sock,rpush foo,example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># --logger mongodblog[:&lt;host&gt;,&lt;collection&gt;,&lt;node&gt;]</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog</span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">27017</span>,uwsgi.logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MongoDB</span></span><br><span class=\"line\"><span class=\"comment\"># --logger mongodblog[:&lt;host&gt;,&lt;collection&gt;,&lt;node&gt;]</span></span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog</span><br><span class=\"line\"><span class=\"attr\">logger</span> = mongodblog:<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">27017</span>,uwsgi.logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ZeroMQ</span></span><br><span class=\"line\"><span class=\"comment\"># uwsgi --logger zeromq:tcp://192.168.173.18:9191 --socket :3031 --module werkzeug.testapp:test_app</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>完整的配置文件</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">http-socket</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"attr\">module</span> = myproject:app</span><br><span class=\"line\"><span class=\"attr\">plugins</span> = python36,logfile</span><br><span class=\"line\"><span class=\"attr\">logger</span> = file:/var/log/uwsgi.log,maxsize=<span class=\"number\">2000000</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一些错误处理\"><a href=\"#一些错误处理\" class=\"headerlink\" title=\"一些错误处理\"></a>一些错误处理</h4><p><em>1</em>. invalid request block size: 21573 (max 4096)…skip</p>\n<p>网上的解决方案是添加一个配置项 buffer-size &#x3D; 32768 或者将 socket &#x3D; :8000 改成 http &#x3D; :8000，经过测试，如果直接添加 buffer-size &#x3D; 32768，则访问无响应，如果改成 http &#x3D; :8000，则 uwsgi 根本无法启动。</p>\n<p>解决方案：把 socket 改成 http-socket。</p>\n<p><em>2</em>. no python application found</p>\n<p>安装 uwsgi-plugin-python  插件</p>\n<h5 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h5><p>用 uwsgi 部署我在腾讯云上的 Flask 服务后，没几个请求，服务就被系统给 Killed 掉了，看来  uwsgi 对内存还是有一定要求的，对于只有 1G 内存的腾讯云，还是安心的使用 tornado 吧。</p>\n<hr>\n<p><em>参考</em></p>\n<p><a href=\"https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html\">https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html</a><br><a href=\"https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi\">https://flask.palletsprojects.com/en/1.1.x/deploying/wsgi-standalone/#uwsgi</a><br><a href=\"https://uwsgi-docs.readthedocs.io/en/latest/Logging.html\">https://uwsgi-docs.readthedocs.io/en/latest/Logging.html</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl1nbtozo00036rxi8vgde5s0","tag_id":"cl1nbtozr00056rxi79bg6nb5","_id":"cl1nbtp09000e6rxidyr4fcqy"},{"post_id":"cl1nbtozo00036rxi8vgde5s0","tag_id":"cl1nbtp0300096rxiffi9ans0","_id":"cl1nbtp0e000g6rxihnobfpje"},{"post_id":"cl1nbtozp00046rxih081gu7e","tag_id":"cl1nbtozr00056rxi79bg6nb5","_id":"cl1nbtp1p000m6rxi7feqcwqc"},{"post_id":"cl1nbtozp00046rxih081gu7e","tag_id":"cl1nbtp0300096rxiffi9ans0","_id":"cl1nbtp1q000o6rxihu2i7jrn"},{"post_id":"cl1nbtozs00066rxicro88anw","tag_id":"cl1nbtp0300096rxiffi9ans0","_id":"cl1nbtp1s000t6rxiclpw0vtw"},{"post_id":"cl1nbtozs00066rxicro88anw","tag_id":"cl1nbtozr00056rxi79bg6nb5","_id":"cl1nbtp1s000u6rxidjdw65ek"},{"post_id":"cl1nbtozt00076rxi6hbcgz1g","tag_id":"cl1nbtp0300096rxiffi9ans0","_id":"cl1nbtp1s000w6rxid32sh8ka"},{"post_id":"cl1nbtozu00086rxifep2btw8","tag_id":"cl1nbtp1s000v6rxi5gbdat61","_id":"cl1nbtp1t000z6rxig1160hq6"},{"post_id":"cl1nbtozu00086rxifep2btw8","tag_id":"cl1nbtp1t000x6rxidjzubqz2","_id":"cl1nbtp1t00106rxi6qr00skj"},{"post_id":"cl1nbtp04000a6rxi8ymnecc7","tag_id":"cl1nbtp1s000v6rxi5gbdat61","_id":"cl1nbtp1u00146rxif706e2z6"},{"post_id":"cl1nbtp04000a6rxi8ymnecc7","tag_id":"cl1nbtp1t00116rxihrj3aol6","_id":"cl1nbtp1u00156rxiaigr35vn"},{"post_id":"cl1nbtp04000a6rxi8ymnecc7","tag_id":"cl1nbtp1u00126rxi6afb7l0x","_id":"cl1nbtp1v00176rxiddv7h9ak"},{"post_id":"cl1nbtp04000a6rxi8ymnecc7","tag_id":"cl1nbtozr00056rxi79bg6nb5","_id":"cl1nbtp1v00186rxi0r62e27o"},{"post_id":"cl1nbtp05000b6rxiaxaoeohu","tag_id":"cl1nbtp1u00136rxi7g29agov","_id":"cl1nbtp1v001a6rxi8yvh8an8"},{"post_id":"cl1nbtp05000b6rxiaxaoeohu","tag_id":"cl1nbtp1v00166rxi0x69fdxb","_id":"cl1nbtp1v001b6rxi85904vku"},{"post_id":"cl1nbtp07000d6rxigelhhk3p","tag_id":"cl1nbtp1t000x6rxidjzubqz2","_id":"cl1nbtp1w001d6rxiemflf89b"},{"post_id":"cl1nbtp09000f6rxica4bg0vf","tag_id":"cl1nbtp1v001c6rxi55wl7m6u","_id":"cl1nbtp1w001f6rxidt93fk4k"},{"post_id":"cl1nbtp09000f6rxica4bg0vf","tag_id":"cl1nbtp0300096rxiffi9ans0","_id":"cl1nbtp1w001g6rxi2i3t6q9f"},{"post_id":"cl1nbtp0f000i6rxiek400w95","tag_id":"cl1nbtp1t000x6rxidjzubqz2","_id":"cl1nbtp1w001i6rxi02wld2fl"},{"post_id":"cl1nbtp1o000j6rxicby93sm5","tag_id":"cl1nbtp1w001h6rxi3u4q1wrx","_id":"cl1nbtp1x001k6rxicdasd674"},{"post_id":"cl1nbtp1p000l6rxi5wk62mpy","tag_id":"cl1nbtp1s000v6rxi5gbdat61","_id":"cl1nbtp1y001n6rxidh0a8wp3"},{"post_id":"cl1nbtp1p000l6rxi5wk62mpy","tag_id":"cl1nbtp1x001l6rxido6m9fkv","_id":"cl1nbtp1y001o6rxi54ebh43v"},{"post_id":"cl1nbtp1p000n6rxi5g4y5ne3","tag_id":"cl1nbtp1t000x6rxidjzubqz2","_id":"cl1nbtp1y001q6rxihd4j2mno"},{"post_id":"cl1nbtp1q000q6rxi1pqs2c8u","tag_id":"cl1nbtp1t000x6rxidjzubqz2","_id":"cl1nbtp1y001s6rxi2bnt0nq5"},{"post_id":"cl1nbtp1r000r6rxi6r74a33k","tag_id":"cl1nbtp1y001r6rxidbfh6ljs","_id":"cl1nbtp1z001t6rxi0932buvo"}],"Tag":[{"name":"docker","_id":"cl1nbtozr00056rxi79bg6nb5"},{"name":"elasticsearch","_id":"cl1nbtp0300096rxiffi9ans0"},{"name":"python","_id":"cl1nbtp1s000v6rxi5gbdat61"},{"name":"leetcode","_id":"cl1nbtp1t000x6rxidjzubqz2"},{"name":"flask","_id":"cl1nbtp1t00116rxihrj3aol6"},{"name":"gevent","_id":"cl1nbtp1u00126rxi6afb7l0x"},{"name":"hexo","_id":"cl1nbtp1u00136rxi7g29agov"},{"name":"landscape","_id":"cl1nbtp1v00166rxi0x69fdxb"},{"name":"logstash","_id":"cl1nbtp1v001c6rxi55wl7m6u"},{"name":"nginx","_id":"cl1nbtp1w001h6rxi3u4q1wrx"},{"name":"supervisor","_id":"cl1nbtp1x001l6rxido6m9fkv"},{"name":"uwsgi","_id":"cl1nbtp1y001r6rxidbfh6ljs"}]}}